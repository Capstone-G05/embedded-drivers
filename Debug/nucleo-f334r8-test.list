
nucleo-f334r8-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e70  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  0800a000  0800a000  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a18c  0800a18c  0000c060  2**0
                  CONTENTS
  4 .ARM          00000008  0800a18c  0800a18c  0000b18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a194  0800a194  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a194  0800a194  0000b194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a198  0800a198  0000b198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800a19c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c060  2**0
                  CONTENTS
 10 .bss          00001ce0  20000060  20000060  0000c060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001d40  20001d40  0000c060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ccb4  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003981  00000000  00000000  00028d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001730  00000000  00000000  0002c6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001234  00000000  00000000  0002ddf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003c23  00000000  00000000  0002f02c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cf6e  00000000  00000000  00032c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce8ed  00000000  00000000  0004fbbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011e4aa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006720  00000000  00000000  0011e4f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  00124c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009fe8 	.word	0x08009fe8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08009fe8 	.word	0x08009fe8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_I2C_SlaveRxCpltCallback>:
{
  HAL_I2C_DeInit(rev_i2c);
  HAL_I2C_Init(rev_i2c);
}

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == I2C1) {
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a06      	ldr	r2, [pc, #24]	@ (80002a8 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 800028e:	4293      	cmp	r3, r2
 8000290:	d106      	bne.n	80002a0 <HAL_I2C_SlaveRxCpltCallback+0x20>
    // Process Data
    ProcessI2CData();
 8000292:	f000 f80d 	bl	80002b0 <ProcessI2CData>
    // Restart I2C reception
    HAL_I2C_Slave_Receive_IT(hi2c, (uint8_t*)rx_buf, RXBUFSIZE);
 8000296:	2201      	movs	r2, #1
 8000298:	4904      	ldr	r1, [pc, #16]	@ (80002ac <HAL_I2C_SlaveRxCpltCallback+0x2c>)
 800029a:	6878      	ldr	r0, [r7, #4]
 800029c:	f001 fb16 	bl	80018cc <HAL_I2C_Slave_Receive_IT>
  }
}
 80002a0:	bf00      	nop
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	40005400 	.word	0x40005400
 80002ac:	200001bc 	.word	0x200001bc

080002b0 <ProcessI2CData>:

void ProcessI2CData()
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b08e      	sub	sp, #56	@ 0x38
 80002b4:	af00      	add	r7, sp, #0
  osMutexAcquire(I2CMutexRXHandle, portMAX_DELAY);
 80002b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000324 <ProcessI2CData+0x74>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f04f 31ff 	mov.w	r1, #4294967295
 80002be:	4618      	mov	r0, r3
 80002c0:	f006 f948 	bl	8006554 <osMutexAcquire>
  uint8_t rx_recv = rx_buf[0];
 80002c4:	4b18      	ldr	r3, [pc, #96]	@ (8000328 <ProcessI2CData+0x78>)
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  osMutexRelease(I2CMutexRXHandle);
 80002cc:	4b15      	ldr	r3, [pc, #84]	@ (8000324 <ProcessI2CData+0x74>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4618      	mov	r0, r3
 80002d2:	f006 f99d 	bl	8006610 <osMutexRelease>
  //UART Send
  char i2c_rx_message[MAX_STRING_LEN];
  sprintf(i2c_rx_message, "RECEIVED: %u\n\r", rx_recv);
 80002d6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	4913      	ldr	r1, [pc, #76]	@ (800032c <ProcessI2CData+0x7c>)
 80002de:	4618      	mov	r0, r3
 80002e0:	f009 f98c 	bl	80095fc <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)i2c_rx_message, strlen(i2c_rx_message), HAL_MAX_DELAY);
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	4618      	mov	r0, r3
 80002e8:	f7ff ff72 	bl	80001d0 <strlen>
 80002ec:	4603      	mov	r3, r0
 80002ee:	b29a      	uxth	r2, r3
 80002f0:	1d39      	adds	r1, r7, #4
 80002f2:	f04f 33ff 	mov.w	r3, #4294967295
 80002f6:	480e      	ldr	r0, [pc, #56]	@ (8000330 <ProcessI2CData+0x80>)
 80002f8:	f005 fb76 	bl	80059e8 <HAL_UART_Transmit>
  // Update TX buffer
  osMutexAcquire(I2CMutexTXHandle, portMAX_DELAY);
 80002fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000334 <ProcessI2CData+0x84>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f04f 31ff 	mov.w	r1, #4294967295
 8000304:	4618      	mov	r0, r3
 8000306:	f006 f925 	bl	8006554 <osMutexAcquire>
  tx_buf = rx_recv;
 800030a:	4a0b      	ldr	r2, [pc, #44]	@ (8000338 <ProcessI2CData+0x88>)
 800030c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000310:	7013      	strb	r3, [r2, #0]
  osMutexRelease(I2CMutexTXHandle);
 8000312:	4b08      	ldr	r3, [pc, #32]	@ (8000334 <ProcessI2CData+0x84>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4618      	mov	r0, r3
 8000318:	f006 f97a 	bl	8006610 <osMutexRelease>
}
 800031c:	bf00      	nop
 800031e:	3738      	adds	r7, #56	@ 0x38
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	200001b8 	.word	0x200001b8
 8000328:	200001bc 	.word	0x200001bc
 800032c:	0800a048 	.word	0x0800a048
 8000330:	2000011c 	.word	0x2000011c
 8000334:	200001b0 	.word	0x200001b0
 8000338:	200001bd 	.word	0x200001bd

0800033c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000340:	f000 fcc4 	bl	8000ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000344:	f000 f856 	bl	80003f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000348:	f000 f97a 	bl	8000640 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800034c:	f000 f948 	bl	80005e0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000350:	f000 f8ac 	bl	80004ac <MX_I2C1_Init>
  MX_TIM1_Init();
 8000354:	f000 f8ea 	bl	800052c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000358:	f005 ff22 	bl	80061a0 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of I2CMutexTX */
  I2CMutexTXHandle = osMutexNew(&I2CMutexTX_attributes);
 800035c:	4816      	ldr	r0, [pc, #88]	@ (80003b8 <main+0x7c>)
 800035e:	f006 f85f 	bl	8006420 <osMutexNew>
 8000362:	4603      	mov	r3, r0
 8000364:	4a15      	ldr	r2, [pc, #84]	@ (80003bc <main+0x80>)
 8000366:	6013      	str	r3, [r2, #0]

  /* creation of UARTMutex */
  UARTMutexHandle = osMutexNew(&UARTMutex_attributes);
 8000368:	4815      	ldr	r0, [pc, #84]	@ (80003c0 <main+0x84>)
 800036a:	f006 f859 	bl	8006420 <osMutexNew>
 800036e:	4603      	mov	r3, r0
 8000370:	4a14      	ldr	r2, [pc, #80]	@ (80003c4 <main+0x88>)
 8000372:	6013      	str	r3, [r2, #0]

  /* creation of I2CMutexRX */
  I2CMutexRXHandle = osMutexNew(&I2CMutexRX_attributes);
 8000374:	4814      	ldr	r0, [pc, #80]	@ (80003c8 <main+0x8c>)
 8000376:	f006 f853 	bl	8006420 <osMutexNew>
 800037a:	4603      	mov	r3, r0
 800037c:	4a13      	ldr	r2, [pc, #76]	@ (80003cc <main+0x90>)
 800037e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of logTask */
  logTaskHandle = osThreadNew(StartLog, NULL, &logTask_attributes);
 8000380:	4a13      	ldr	r2, [pc, #76]	@ (80003d0 <main+0x94>)
 8000382:	2100      	movs	r1, #0
 8000384:	4813      	ldr	r0, [pc, #76]	@ (80003d4 <main+0x98>)
 8000386:	f005 ff73 	bl	8006270 <osThreadNew>
 800038a:	4603      	mov	r3, r0
 800038c:	4a12      	ldr	r2, [pc, #72]	@ (80003d8 <main+0x9c>)
 800038e:	6013      	str	r3, [r2, #0]

  /* creation of I2CSendTask */
  I2CSendTaskHandle = osThreadNew(StartI2CSend, NULL, &I2CSendTask_attributes);
 8000390:	4a12      	ldr	r2, [pc, #72]	@ (80003dc <main+0xa0>)
 8000392:	2100      	movs	r1, #0
 8000394:	4812      	ldr	r0, [pc, #72]	@ (80003e0 <main+0xa4>)
 8000396:	f005 ff6b 	bl	8006270 <osThreadNew>
 800039a:	4603      	mov	r3, r0
 800039c:	4a11      	ldr	r2, [pc, #68]	@ (80003e4 <main+0xa8>)
 800039e:	6013      	str	r3, [r2, #0]

  /* creation of I2CReceiveTask */
  I2CReceiveTaskHandle = osThreadNew(StartI2CReceive, NULL, &I2CReceiveTask_attributes);
 80003a0:	4a11      	ldr	r2, [pc, #68]	@ (80003e8 <main+0xac>)
 80003a2:	2100      	movs	r1, #0
 80003a4:	4811      	ldr	r0, [pc, #68]	@ (80003ec <main+0xb0>)
 80003a6:	f005 ff63 	bl	8006270 <osThreadNew>
 80003aa:	4603      	mov	r3, r0
 80003ac:	4a10      	ldr	r2, [pc, #64]	@ (80003f0 <main+0xb4>)
 80003ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80003b0:	f005 ff2a 	bl	8006208 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003b4:	bf00      	nop
 80003b6:	e7fd      	b.n	80003b4 <main+0x78>
 80003b8:	0800a0f0 	.word	0x0800a0f0
 80003bc:	200001b0 	.word	0x200001b0
 80003c0:	0800a100 	.word	0x0800a100
 80003c4:	200001b4 	.word	0x200001b4
 80003c8:	0800a110 	.word	0x0800a110
 80003cc:	200001b8 	.word	0x200001b8
 80003d0:	0800a084 	.word	0x0800a084
 80003d4:	0800070d 	.word	0x0800070d
 80003d8:	200001a4 	.word	0x200001a4
 80003dc:	0800a0a8 	.word	0x0800a0a8
 80003e0:	08000791 	.word	0x08000791
 80003e4:	200001a8 	.word	0x200001a8
 80003e8:	0800a0cc 	.word	0x0800a0cc
 80003ec:	080007e1 	.word	0x080007e1
 80003f0:	200001ac 	.word	0x200001ac

080003f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b096      	sub	sp, #88	@ 0x58
 80003f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80003fe:	2228      	movs	r2, #40	@ 0x28
 8000400:	2100      	movs	r1, #0
 8000402:	4618      	mov	r0, r3
 8000404:	f009 f91a 	bl	800963c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000408:	f107 031c 	add.w	r3, r7, #28
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	605a      	str	r2, [r3, #4]
 8000412:	609a      	str	r2, [r3, #8]
 8000414:	60da      	str	r2, [r3, #12]
 8000416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000418:	463b      	mov	r3, r7
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]
 8000420:	609a      	str	r2, [r3, #8]
 8000422:	60da      	str	r2, [r3, #12]
 8000424:	611a      	str	r2, [r3, #16]
 8000426:	615a      	str	r2, [r3, #20]
 8000428:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800042a:	2302      	movs	r3, #2
 800042c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800042e:	2301      	movs	r3, #1
 8000430:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000432:	2310      	movs	r3, #16
 8000434:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000436:	2302      	movs	r3, #2
 8000438:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800043a:	2300      	movs	r3, #0
 800043c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800043e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000442:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000444:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000448:	4618      	mov	r0, r3
 800044a:	f003 f861 	bl	8003510 <HAL_RCC_OscConfig>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000454:	f000 f9fa 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000458:	230f      	movs	r3, #15
 800045a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800045c:	2302      	movs	r3, #2
 800045e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000460:	2300      	movs	r3, #0
 8000462:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000464:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000468:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800046a:	2300      	movs	r3, #0
 800046c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800046e:	f107 031c 	add.w	r3, r7, #28
 8000472:	2102      	movs	r1, #2
 8000474:	4618      	mov	r0, r3
 8000476:	f004 f889 	bl	800458c <HAL_RCC_ClockConfig>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000480:	f000 f9e4 	bl	800084c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
 8000484:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8000488:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800048a:	2300      	movs	r3, #0
 800048c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800048e:	2300      	movs	r3, #0
 8000490:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000492:	463b      	mov	r3, r7
 8000494:	4618      	mov	r0, r3
 8000496:	f004 facb 	bl	8004a30 <HAL_RCCEx_PeriphCLKConfig>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80004a0:	f000 f9d4 	bl	800084c <Error_Handler>
  }
}
 80004a4:	bf00      	nop
 80004a6:	3758      	adds	r7, #88	@ 0x58
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}

080004ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000520 <MX_I2C1_Init+0x74>)
 80004b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000524 <MX_I2C1_Init+0x78>)
 80004b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80004b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000520 <MX_I2C1_Init+0x74>)
 80004b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000528 <MX_I2C1_Init+0x7c>)
 80004ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 32;
 80004bc:	4b18      	ldr	r3, [pc, #96]	@ (8000520 <MX_I2C1_Init+0x74>)
 80004be:	2220      	movs	r2, #32
 80004c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004c2:	4b17      	ldr	r3, [pc, #92]	@ (8000520 <MX_I2C1_Init+0x74>)
 80004c4:	2201      	movs	r2, #1
 80004c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004c8:	4b15      	ldr	r3, [pc, #84]	@ (8000520 <MX_I2C1_Init+0x74>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004ce:	4b14      	ldr	r3, [pc, #80]	@ (8000520 <MX_I2C1_Init+0x74>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004d4:	4b12      	ldr	r3, [pc, #72]	@ (8000520 <MX_I2C1_Init+0x74>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004da:	4b11      	ldr	r3, [pc, #68]	@ (8000520 <MX_I2C1_Init+0x74>)
 80004dc:	2200      	movs	r2, #0
 80004de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000520 <MX_I2C1_Init+0x74>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004e6:	480e      	ldr	r0, [pc, #56]	@ (8000520 <MX_I2C1_Init+0x74>)
 80004e8:	f000 fef8 	bl	80012dc <HAL_I2C_Init>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004f2:	f000 f9ab 	bl	800084c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004f6:	2100      	movs	r1, #0
 80004f8:	4809      	ldr	r0, [pc, #36]	@ (8000520 <MX_I2C1_Init+0x74>)
 80004fa:	f002 ff71 	bl	80033e0 <HAL_I2CEx_ConfigAnalogFilter>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000504:	f000 f9a2 	bl	800084c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000508:	2100      	movs	r1, #0
 800050a:	4805      	ldr	r0, [pc, #20]	@ (8000520 <MX_I2C1_Init+0x74>)
 800050c:	f002 ffb3 	bl	8003476 <HAL_I2CEx_ConfigDigitalFilter>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000516:	f000 f999 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	2000007c 	.word	0x2000007c
 8000524:	40005400 	.word	0x40005400
 8000528:	00201d2b 	.word	0x00201d2b

0800052c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b088      	sub	sp, #32
 8000530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000532:	f107 0314 	add.w	r3, r7, #20
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800054a:	4b23      	ldr	r3, [pc, #140]	@ (80005d8 <MX_TIM1_Init+0xac>)
 800054c:	4a23      	ldr	r2, [pc, #140]	@ (80005dc <MX_TIM1_Init+0xb0>)
 800054e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64;
 8000550:	4b21      	ldr	r3, [pc, #132]	@ (80005d8 <MX_TIM1_Init+0xac>)
 8000552:	2240      	movs	r2, #64	@ 0x40
 8000554:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000556:	4b20      	ldr	r3, [pc, #128]	@ (80005d8 <MX_TIM1_Init+0xac>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800055c:	4b1e      	ldr	r3, [pc, #120]	@ (80005d8 <MX_TIM1_Init+0xac>)
 800055e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000562:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000564:	4b1c      	ldr	r3, [pc, #112]	@ (80005d8 <MX_TIM1_Init+0xac>)
 8000566:	2200      	movs	r2, #0
 8000568:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800056a:	4b1b      	ldr	r3, [pc, #108]	@ (80005d8 <MX_TIM1_Init+0xac>)
 800056c:	2200      	movs	r2, #0
 800056e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000570:	4b19      	ldr	r3, [pc, #100]	@ (80005d8 <MX_TIM1_Init+0xac>)
 8000572:	2200      	movs	r2, #0
 8000574:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000576:	4818      	ldr	r0, [pc, #96]	@ (80005d8 <MX_TIM1_Init+0xac>)
 8000578:	f004 fc4e 	bl	8004e18 <HAL_TIM_IC_Init>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000582:	f000 f963 	bl	800084c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800058a:	2300      	movs	r3, #0
 800058c:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800058e:	2300      	movs	r3, #0
 8000590:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	4619      	mov	r1, r3
 8000598:	480f      	ldr	r0, [pc, #60]	@ (80005d8 <MX_TIM1_Init+0xac>)
 800059a:	f005 f94b 	bl	8005834 <HAL_TIMEx_MasterConfigSynchronization>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80005a4:	f000 f952 	bl	800084c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80005ac:	2301      	movs	r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2200      	movs	r2, #0
 80005bc:	4619      	mov	r1, r3
 80005be:	4806      	ldr	r0, [pc, #24]	@ (80005d8 <MX_TIM1_Init+0xac>)
 80005c0:	f004 feb8 	bl	8005334 <HAL_TIM_IC_ConfigChannel>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80005ca:	f000 f93f 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80005ce:	bf00      	nop
 80005d0:	3720      	adds	r7, #32
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200000d0 	.word	0x200000d0
 80005dc:	40012c00 	.word	0x40012c00

080005e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005e4:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 80005e6:	4a15      	ldr	r2, [pc, #84]	@ (800063c <MX_USART2_UART_Init+0x5c>)
 80005e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80005ea:	4b13      	ldr	r3, [pc, #76]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 80005ec:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80005f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005f2:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 8000600:	2200      	movs	r2, #0
 8000602:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000604:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 8000606:	220c      	movs	r2, #12
 8000608:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060a:	4b0b      	ldr	r3, [pc, #44]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000610:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000616:	4b08      	ldr	r3, [pc, #32]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800061c:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 800061e:	2200      	movs	r2, #0
 8000620:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000622:	4805      	ldr	r0, [pc, #20]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 8000624:	f005 f992 	bl	800594c <HAL_UART_Init>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800062e:	f000 f90d 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	2000011c 	.word	0x2000011c
 800063c:	40004400 	.word	0x40004400

08000640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	@ 0x28
 8000644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000656:	4b2b      	ldr	r3, [pc, #172]	@ (8000704 <MX_GPIO_Init+0xc4>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	4a2a      	ldr	r2, [pc, #168]	@ (8000704 <MX_GPIO_Init+0xc4>)
 800065c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000660:	6153      	str	r3, [r2, #20]
 8000662:	4b28      	ldr	r3, [pc, #160]	@ (8000704 <MX_GPIO_Init+0xc4>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800066e:	4b25      	ldr	r3, [pc, #148]	@ (8000704 <MX_GPIO_Init+0xc4>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	4a24      	ldr	r2, [pc, #144]	@ (8000704 <MX_GPIO_Init+0xc4>)
 8000674:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000678:	6153      	str	r3, [r2, #20]
 800067a:	4b22      	ldr	r3, [pc, #136]	@ (8000704 <MX_GPIO_Init+0xc4>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	4b1f      	ldr	r3, [pc, #124]	@ (8000704 <MX_GPIO_Init+0xc4>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	4a1e      	ldr	r2, [pc, #120]	@ (8000704 <MX_GPIO_Init+0xc4>)
 800068c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000690:	6153      	str	r3, [r2, #20]
 8000692:	4b1c      	ldr	r3, [pc, #112]	@ (8000704 <MX_GPIO_Init+0xc4>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069e:	4b19      	ldr	r3, [pc, #100]	@ (8000704 <MX_GPIO_Init+0xc4>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	4a18      	ldr	r2, [pc, #96]	@ (8000704 <MX_GPIO_Init+0xc4>)
 80006a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80006a8:	6153      	str	r3, [r2, #20]
 80006aa:	4b16      	ldr	r3, [pc, #88]	@ (8000704 <MX_GPIO_Init+0xc4>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2120      	movs	r1, #32
 80006ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006be:	f000 fddb 	bl	8001278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006c8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	4619      	mov	r1, r3
 80006d8:	480b      	ldr	r0, [pc, #44]	@ (8000708 <MX_GPIO_Init+0xc8>)
 80006da:	f000 fc5b 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006de:	2320      	movs	r3, #32
 80006e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e2:	2301      	movs	r3, #1
 80006e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ea:	2300      	movs	r3, #0
 80006ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f8:	f000 fc4c 	bl	8000f94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006fc:	bf00      	nop
 80006fe:	3728      	adds	r7, #40	@ 0x28
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40021000 	.word	0x40021000
 8000708:	48000800 	.word	0x48000800

0800070c <StartLog>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLog */
void StartLog(void *argument)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b090      	sub	sp, #64	@ 0x40
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    // Toggle LED
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000714:	2120      	movs	r1, #32
 8000716:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800071a:	f000 fdc5 	bl	80012a8 <HAL_GPIO_TogglePin>
    // UART Send
    char heart_beat_message[MAX_STRING_LEN];
    sprintf(heart_beat_message, "STM32 Online (%u)\n\r", heart_beat_count);
 800071e:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <StartLog+0x74>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	461a      	mov	r2, r3
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	4916      	ldr	r1, [pc, #88]	@ (8000784 <StartLog+0x78>)
 800072a:	4618      	mov	r0, r3
 800072c:	f008 ff66 	bl	80095fc <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)heart_beat_message, strlen(heart_beat_message), HAL_MAX_DELAY);
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fd4b 	bl	80001d0 <strlen>
 800073a:	4603      	mov	r3, r0
 800073c:	b29a      	uxth	r2, r3
 800073e:	f107 010c 	add.w	r1, r7, #12
 8000742:	f04f 33ff 	mov.w	r3, #4294967295
 8000746:	4810      	ldr	r0, [pc, #64]	@ (8000788 <StartLog+0x7c>)
 8000748:	f005 f94e 	bl	80059e8 <HAL_UART_Transmit>
    // Update heart beat
    heart_beat_count++;
 800074c:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <StartLog+0x74>)
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	3301      	adds	r3, #1
 8000752:	b29a      	uxth	r2, r3
 8000754:	4b0a      	ldr	r3, [pc, #40]	@ (8000780 <StartLog+0x74>)
 8000756:	801a      	strh	r2, [r3, #0]
    heart_beat_count = heart_beat_count % HEARTBEAT_MAX;
 8000758:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <StartLog+0x74>)
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	4a0b      	ldr	r2, [pc, #44]	@ (800078c <StartLog+0x80>)
 800075e:	fba2 1203 	umull	r1, r2, r2, r3
 8000762:	0a12      	lsrs	r2, r2, #8
 8000764:	f242 710f 	movw	r1, #9999	@ 0x270f
 8000768:	fb01 f202 	mul.w	r2, r1, r2
 800076c:	1a9b      	subs	r3, r3, r2
 800076e:	b29a      	uxth	r2, r3
 8000770:	4b03      	ldr	r3, [pc, #12]	@ (8000780 <StartLog+0x74>)
 8000772:	801a      	strh	r2, [r3, #0]
    osDelay(HEARTBEAT_SLEEP);
 8000774:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000778:	f005 fe24 	bl	80063c4 <osDelay>
  {
 800077c:	bf00      	nop
 800077e:	e7c9      	b.n	8000714 <StartLog+0x8>
 8000780:	200001c0 	.word	0x200001c0
 8000784:	0800a058 	.word	0x0800a058
 8000788:	2000011c 	.word	0x2000011c
 800078c:	068de3af 	.word	0x068de3af

08000790 <StartI2CSend>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartI2CSend */
void StartI2CSend(void *argument)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartI2CSend */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000798:	2100      	movs	r1, #0
 800079a:	480d      	ldr	r0, [pc, #52]	@ (80007d0 <StartI2CSend+0x40>)
 800079c:	f004 fb94 	bl	8004ec8 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  for(;;)
  {
    // I2C Send
    osMutexAcquire(I2CMutexTXHandle, portMAX_DELAY);
 80007a0:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <StartI2CSend+0x44>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f04f 31ff 	mov.w	r1, #4294967295
 80007a8:	4618      	mov	r0, r3
 80007aa:	f005 fed3 	bl	8006554 <osMutexAcquire>
    HAL_I2C_Slave_Transmit(&hi2c1, (uint8_t*)&tx_buf, TXBUFSIZE, 0x01);
 80007ae:	2301      	movs	r3, #1
 80007b0:	2201      	movs	r2, #1
 80007b2:	4909      	ldr	r1, [pc, #36]	@ (80007d8 <StartI2CSend+0x48>)
 80007b4:	4809      	ldr	r0, [pc, #36]	@ (80007dc <StartI2CSend+0x4c>)
 80007b6:	f000 fe2c 	bl	8001412 <HAL_I2C_Slave_Transmit>
    osMutexRelease(I2CMutexTXHandle);
 80007ba:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <StartI2CSend+0x44>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4618      	mov	r0, r3
 80007c0:	f005 ff26 	bl	8006610 <osMutexRelease>
    osDelay(I2C_SLEEP);
 80007c4:	2019      	movs	r0, #25
 80007c6:	f005 fdfd 	bl	80063c4 <osDelay>
    osMutexAcquire(I2CMutexTXHandle, portMAX_DELAY);
 80007ca:	bf00      	nop
 80007cc:	e7e8      	b.n	80007a0 <StartI2CSend+0x10>
 80007ce:	bf00      	nop
 80007d0:	200000d0 	.word	0x200000d0
 80007d4:	200001b0 	.word	0x200001b0
 80007d8:	200001bd 	.word	0x200001bd
 80007dc:	2000007c 	.word	0x2000007c

080007e0 <StartI2CReceive>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartI2CReceive */
void StartI2CReceive(void *argument)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartI2CReceive */
  HAL_I2C_Slave_Receive_IT(&hi2c1, (uint8_t*)&rx_buf, RXBUFSIZE); // async
 80007e8:	2201      	movs	r2, #1
 80007ea:	490c      	ldr	r1, [pc, #48]	@ (800081c <StartI2CReceive+0x3c>)
 80007ec:	480c      	ldr	r0, [pc, #48]	@ (8000820 <StartI2CReceive+0x40>)
 80007ee:	f001 f86d 	bl	80018cc <HAL_I2C_Slave_Receive_IT>
  /* Infinite loop */
  for(;;)
  {
    sig = HAL_I2C_Slave_Receive(&hi2c1, (uint8_t*)&rx_buf, RXBUFSIZE, 0xFFFFFFFF); // blocking
 80007f2:	f04f 33ff 	mov.w	r3, #4294967295
 80007f6:	2201      	movs	r2, #1
 80007f8:	4908      	ldr	r1, [pc, #32]	@ (800081c <StartI2CReceive+0x3c>)
 80007fa:	4809      	ldr	r0, [pc, #36]	@ (8000820 <StartI2CReceive+0x40>)
 80007fc:	f000 ff56 	bl	80016ac <HAL_I2C_Slave_Receive>
 8000800:	4603      	mov	r3, r0
 8000802:	461a      	mov	r2, r3
 8000804:	4b07      	ldr	r3, [pc, #28]	@ (8000824 <StartI2CReceive+0x44>)
 8000806:	701a      	strb	r2, [r3, #0]
    if (sig == HAL_OK) {
 8000808:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <StartI2CReceive+0x44>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d101      	bne.n	8000814 <StartI2CReceive+0x34>
      // Process Data
      ProcessI2CData();
 8000810:	f7ff fd4e 	bl	80002b0 <ProcessI2CData>
    }
    osDelay(I2C_SLEEP);
 8000814:	2019      	movs	r0, #25
 8000816:	f005 fdd5 	bl	80063c4 <osDelay>
    sig = HAL_I2C_Slave_Receive(&hi2c1, (uint8_t*)&rx_buf, RXBUFSIZE, 0xFFFFFFFF); // blocking
 800081a:	e7ea      	b.n	80007f2 <StartI2CReceive+0x12>
 800081c:	200001bc 	.word	0x200001bc
 8000820:	2000007c 	.word	0x2000007c
 8000824:	200001be 	.word	0x200001be

08000828 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a04      	ldr	r2, [pc, #16]	@ (8000848 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d101      	bne.n	800083e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800083a:	f000 fa5d 	bl	8000cf8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40001000 	.word	0x40001000

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <Error_Handler+0x8>

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <HAL_MspInit+0x4c>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	4a10      	ldr	r2, [pc, #64]	@ (80008a4 <HAL_MspInit+0x4c>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6193      	str	r3, [r2, #24]
 800086a:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <HAL_MspInit+0x4c>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <HAL_MspInit+0x4c>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	4a0a      	ldr	r2, [pc, #40]	@ (80008a4 <HAL_MspInit+0x4c>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000880:	61d3      	str	r3, [r2, #28]
 8000882:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <HAL_MspInit+0x4c>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	210f      	movs	r1, #15
 8000892:	f06f 0001 	mvn.w	r0, #1
 8000896:	f000 fb07 	bl	8000ea8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40021000 	.word	0x40021000

080008a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	@ 0x28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a1f      	ldr	r2, [pc, #124]	@ (8000944 <HAL_I2C_MspInit+0x9c>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d138      	bne.n	800093c <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000948 <HAL_I2C_MspInit+0xa0>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	4a1e      	ldr	r2, [pc, #120]	@ (8000948 <HAL_I2C_MspInit+0xa0>)
 80008d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008d4:	6153      	str	r3, [r2, #20]
 80008d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000948 <HAL_I2C_MspInit+0xa0>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e8:	2312      	movs	r3, #18
 80008ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f0:	2303      	movs	r3, #3
 80008f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008f4:	2304      	movs	r3, #4
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4619      	mov	r1, r3
 80008fe:	4813      	ldr	r0, [pc, #76]	@ (800094c <HAL_I2C_MspInit+0xa4>)
 8000900:	f000 fb48 	bl	8000f94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000904:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <HAL_I2C_MspInit+0xa0>)
 8000906:	69db      	ldr	r3, [r3, #28]
 8000908:	4a0f      	ldr	r2, [pc, #60]	@ (8000948 <HAL_I2C_MspInit+0xa0>)
 800090a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800090e:	61d3      	str	r3, [r2, #28]
 8000910:	4b0d      	ldr	r3, [pc, #52]	@ (8000948 <HAL_I2C_MspInit+0xa0>)
 8000912:	69db      	ldr	r3, [r3, #28]
 8000914:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800091c:	2200      	movs	r2, #0
 800091e:	2105      	movs	r1, #5
 8000920:	201f      	movs	r0, #31
 8000922:	f000 fac1 	bl	8000ea8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000926:	201f      	movs	r0, #31
 8000928:	f000 fada 	bl	8000ee0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800092c:	2200      	movs	r2, #0
 800092e:	2105      	movs	r1, #5
 8000930:	2020      	movs	r0, #32
 8000932:	f000 fab9 	bl	8000ea8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000936:	2020      	movs	r0, #32
 8000938:	f000 fad2 	bl	8000ee0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800093c:	bf00      	nop
 800093e:	3728      	adds	r7, #40	@ 0x28
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40005400 	.word	0x40005400
 8000948:	40021000 	.word	0x40021000
 800094c:	48000400 	.word	0x48000400

08000950 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	@ 0x28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a1c      	ldr	r2, [pc, #112]	@ (80009e0 <HAL_TIM_IC_MspInit+0x90>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d131      	bne.n	80009d6 <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000972:	4b1c      	ldr	r3, [pc, #112]	@ (80009e4 <HAL_TIM_IC_MspInit+0x94>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	4a1b      	ldr	r2, [pc, #108]	@ (80009e4 <HAL_TIM_IC_MspInit+0x94>)
 8000978:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800097c:	6193      	str	r3, [r2, #24]
 800097e:	4b19      	ldr	r3, [pc, #100]	@ (80009e4 <HAL_TIM_IC_MspInit+0x94>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b16      	ldr	r3, [pc, #88]	@ (80009e4 <HAL_TIM_IC_MspInit+0x94>)
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	4a15      	ldr	r2, [pc, #84]	@ (80009e4 <HAL_TIM_IC_MspInit+0x94>)
 8000990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000994:	6153      	str	r3, [r2, #20]
 8000996:	4b13      	ldr	r3, [pc, #76]	@ (80009e4 <HAL_TIM_IC_MspInit+0x94>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80009b4:	2306      	movs	r3, #6
 80009b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4619      	mov	r1, r3
 80009be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c2:	f000 fae7 	bl	8000f94 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2105      	movs	r1, #5
 80009ca:	201b      	movs	r0, #27
 80009cc:	f000 fa6c 	bl	8000ea8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80009d0:	201b      	movs	r0, #27
 80009d2:	f000 fa85 	bl	8000ee0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80009d6:	bf00      	nop
 80009d8:	3728      	adds	r7, #40	@ 0x28
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40012c00 	.word	0x40012c00
 80009e4:	40021000 	.word	0x40021000

080009e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	@ 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a17      	ldr	r2, [pc, #92]	@ (8000a64 <HAL_UART_MspInit+0x7c>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d128      	bne.n	8000a5c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a0a:	4b17      	ldr	r3, [pc, #92]	@ (8000a68 <HAL_UART_MspInit+0x80>)
 8000a0c:	69db      	ldr	r3, [r3, #28]
 8000a0e:	4a16      	ldr	r2, [pc, #88]	@ (8000a68 <HAL_UART_MspInit+0x80>)
 8000a10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a14:	61d3      	str	r3, [r2, #28]
 8000a16:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <HAL_UART_MspInit+0x80>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <HAL_UART_MspInit+0x80>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	4a10      	ldr	r2, [pc, #64]	@ (8000a68 <HAL_UART_MspInit+0x80>)
 8000a28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a2c:	6153      	str	r3, [r2, #20]
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <HAL_UART_MspInit+0x80>)
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a3a:	230c      	movs	r3, #12
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a4a:	2307      	movs	r3, #7
 8000a4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a58:	f000 fa9c 	bl	8000f94 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a5c:	bf00      	nop
 8000a5e:	3728      	adds	r7, #40	@ 0x28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40004400 	.word	0x40004400
 8000a68:	40021000 	.word	0x40021000

08000a6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08e      	sub	sp, #56	@ 0x38
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a7c:	4b33      	ldr	r3, [pc, #204]	@ (8000b4c <HAL_InitTick+0xe0>)
 8000a7e:	69db      	ldr	r3, [r3, #28]
 8000a80:	4a32      	ldr	r2, [pc, #200]	@ (8000b4c <HAL_InitTick+0xe0>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	61d3      	str	r3, [r2, #28]
 8000a88:	4b30      	ldr	r3, [pc, #192]	@ (8000b4c <HAL_InitTick+0xe0>)
 8000a8a:	69db      	ldr	r3, [r3, #28]
 8000a8c:	f003 0310 	and.w	r3, r3, #16
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a94:	f107 0210 	add.w	r2, r7, #16
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4611      	mov	r1, r2
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f003 ff94 	bl	80049cc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000aa4:	6a3b      	ldr	r3, [r7, #32]
 8000aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d103      	bne.n	8000ab6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000aae:	f003 ff49 	bl	8004944 <HAL_RCC_GetPCLK1Freq>
 8000ab2:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ab4:	e004      	b.n	8000ac0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ab6:	f003 ff45 	bl	8004944 <HAL_RCC_GetPCLK1Freq>
 8000aba:	4603      	mov	r3, r0
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ac2:	4a23      	ldr	r2, [pc, #140]	@ (8000b50 <HAL_InitTick+0xe4>)
 8000ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac8:	0c9b      	lsrs	r3, r3, #18
 8000aca:	3b01      	subs	r3, #1
 8000acc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ace:	4b21      	ldr	r3, [pc, #132]	@ (8000b54 <HAL_InitTick+0xe8>)
 8000ad0:	4a21      	ldr	r2, [pc, #132]	@ (8000b58 <HAL_InitTick+0xec>)
 8000ad2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b54 <HAL_InitTick+0xe8>)
 8000ad6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ada:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000adc:	4a1d      	ldr	r2, [pc, #116]	@ (8000b54 <HAL_InitTick+0xe8>)
 8000ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ae0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b54 <HAL_InitTick+0xe8>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b54 <HAL_InitTick+0xe8>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aee:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <HAL_InitTick+0xe8>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000af4:	4817      	ldr	r0, [pc, #92]	@ (8000b54 <HAL_InitTick+0xe8>)
 8000af6:	f004 f8d1 	bl	8004c9c <HAL_TIM_Base_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d11b      	bne.n	8000b40 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b08:	4812      	ldr	r0, [pc, #72]	@ (8000b54 <HAL_InitTick+0xe8>)
 8000b0a:	f004 f929 	bl	8004d60 <HAL_TIM_Base_Start_IT>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d111      	bne.n	8000b40 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000b1c:	2036      	movs	r0, #54	@ 0x36
 8000b1e:	f000 f9df 	bl	8000ee0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b0f      	cmp	r3, #15
 8000b26:	d808      	bhi.n	8000b3a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority, 0U);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	2036      	movs	r0, #54	@ 0x36
 8000b2e:	f000 f9bb 	bl	8000ea8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b32:	4a0a      	ldr	r2, [pc, #40]	@ (8000b5c <HAL_InitTick+0xf0>)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6013      	str	r3, [r2, #0]
 8000b38:	e002      	b.n	8000b40 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b40:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3738      	adds	r7, #56	@ 0x38
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	431bde83 	.word	0x431bde83
 8000b54:	200001c4 	.word	0x200001c4
 8000b58:	40001000 	.word	0x40001000
 8000b5c:	20000004 	.word	0x20000004

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <NMI_Handler+0x4>

08000b68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <HardFault_Handler+0x4>

08000b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <MemManage_Handler+0x4>

08000b78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <BusFault_Handler+0x4>

08000b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <UsageFault_Handler+0x4>

08000b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
	...

08000b98 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b9c:	4802      	ldr	r0, [pc, #8]	@ (8000ba8 <TIM1_CC_IRQHandler+0x10>)
 8000b9e:	f004 fac7 	bl	8005130 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200000d0 	.word	0x200000d0

08000bac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000bb0:	4802      	ldr	r0, [pc, #8]	@ (8000bbc <I2C1_EV_IRQHandler+0x10>)
 8000bb2:	f000 fedb 	bl	800196c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	2000007c 	.word	0x2000007c

08000bc0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000bc4:	4802      	ldr	r0, [pc, #8]	@ (8000bd0 <I2C1_ER_IRQHandler+0x10>)
 8000bc6:	f000 feeb 	bl	80019a0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000007c 	.word	0x2000007c

08000bd4 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bd8:	4802      	ldr	r0, [pc, #8]	@ (8000be4 <TIM6_DAC1_IRQHandler+0x10>)
 8000bda:	f004 faa9 	bl	8005130 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200001c4 	.word	0x200001c4

08000be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf0:	4a14      	ldr	r2, [pc, #80]	@ (8000c44 <_sbrk+0x5c>)
 8000bf2:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <_sbrk+0x60>)
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bfc:	4b13      	ldr	r3, [pc, #76]	@ (8000c4c <_sbrk+0x64>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d102      	bne.n	8000c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c04:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <_sbrk+0x64>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	@ (8000c50 <_sbrk+0x68>)
 8000c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0a:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d207      	bcs.n	8000c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c18:	f008 fd6e 	bl	80096f8 <__errno>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	220c      	movs	r2, #12
 8000c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	e009      	b.n	8000c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c28:	4b08      	ldr	r3, [pc, #32]	@ (8000c4c <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2e:	4b07      	ldr	r3, [pc, #28]	@ (8000c4c <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	4a05      	ldr	r2, [pc, #20]	@ (8000c4c <_sbrk+0x64>)
 8000c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20003000 	.word	0x20003000
 8000c48:	00000400 	.word	0x00000400
 8000c4c:	20000210 	.word	0x20000210
 8000c50:	20001d40 	.word	0x20001d40

08000c54 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c58:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <SystemInit+0x20>)
 8000c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c5e:	4a05      	ldr	r2, [pc, #20]	@ (8000c74 <SystemInit+0x20>)
 8000c60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cb0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c7c:	f7ff ffea 	bl	8000c54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c80:	480c      	ldr	r0, [pc, #48]	@ (8000cb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c82:	490d      	ldr	r1, [pc, #52]	@ (8000cb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c84:	4a0d      	ldr	r2, [pc, #52]	@ (8000cbc <LoopForever+0xe>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c88:	e002      	b.n	8000c90 <LoopCopyDataInit>

08000c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8e:	3304      	adds	r3, #4

08000c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c94:	d3f9      	bcc.n	8000c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c96:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c98:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc4 <LoopForever+0x16>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c9c:	e001      	b.n	8000ca2 <LoopFillZerobss>

08000c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca0:	3204      	adds	r2, #4

08000ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca4:	d3fb      	bcc.n	8000c9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ca6:	f008 fd2d 	bl	8009704 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000caa:	f7ff fb47 	bl	800033c <main>

08000cae <LoopForever>:

LoopForever:
    b LoopForever
 8000cae:	e7fe      	b.n	8000cae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cb0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000cbc:	0800a19c 	.word	0x0800a19c
  ldr r2, =_sbss
 8000cc0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000cc4:	20001d40 	.word	0x20001d40

08000cc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cc8:	e7fe      	b.n	8000cc8 <ADC1_2_IRQHandler>
	...

08000ccc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd0:	4b08      	ldr	r3, [pc, #32]	@ (8000cf4 <HAL_Init+0x28>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a07      	ldr	r2, [pc, #28]	@ (8000cf4 <HAL_Init+0x28>)
 8000cd6:	f043 0310 	orr.w	r3, r3, #16
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cdc:	2003      	movs	r0, #3
 8000cde:	f000 f8d8 	bl	8000e92 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce2:	200f      	movs	r0, #15
 8000ce4:	f7ff fec2 	bl	8000a6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce8:	f7ff fdb6 	bl	8000858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40022000 	.word	0x40022000

08000cf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <HAL_IncTick+0x20>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <HAL_IncTick+0x24>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a04      	ldr	r2, [pc, #16]	@ (8000d1c <HAL_IncTick+0x24>)
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	20000214 	.word	0x20000214

08000d20 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d24:	4b03      	ldr	r3, [pc, #12]	@ (8000d34 <HAL_GetTick+0x14>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000214 	.word	0x20000214

08000d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d48:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d54:	4013      	ands	r3, r2
 8000d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6a:	4a04      	ldr	r2, [pc, #16]	@ (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	60d3      	str	r3, [r2, #12]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d84:	4b04      	ldr	r3, [pc, #16]	@ (8000d98 <__NVIC_GetPriorityGrouping+0x18>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	f003 0307 	and.w	r3, r3, #7
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	db0b      	blt.n	8000dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	f003 021f 	and.w	r2, r3, #31
 8000db4:	4907      	ldr	r1, [pc, #28]	@ (8000dd4 <__NVIC_EnableIRQ+0x38>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	095b      	lsrs	r3, r3, #5
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000e100 	.word	0xe000e100

08000dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	db0a      	blt.n	8000e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	490c      	ldr	r1, [pc, #48]	@ (8000e24 <__NVIC_SetPriority+0x4c>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	0112      	lsls	r2, r2, #4
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e00:	e00a      	b.n	8000e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4908      	ldr	r1, [pc, #32]	@ (8000e28 <__NVIC_SetPriority+0x50>)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f003 030f 	and.w	r3, r3, #15
 8000e0e:	3b04      	subs	r3, #4
 8000e10:	0112      	lsls	r2, r2, #4
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	440b      	add	r3, r1
 8000e16:	761a      	strb	r2, [r3, #24]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000e100 	.word	0xe000e100
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	@ 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f1c3 0307 	rsb	r3, r3, #7
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	bf28      	it	cs
 8000e4a:	2304      	movcs	r3, #4
 8000e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3304      	adds	r3, #4
 8000e52:	2b06      	cmp	r3, #6
 8000e54:	d902      	bls.n	8000e5c <NVIC_EncodePriority+0x30>
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3b03      	subs	r3, #3
 8000e5a:	e000      	b.n	8000e5e <NVIC_EncodePriority+0x32>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	f04f 32ff 	mov.w	r2, #4294967295
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e74:	f04f 31ff 	mov.w	r1, #4294967295
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	43d9      	mvns	r1, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	4313      	orrs	r3, r2
         );
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3724      	adds	r7, #36	@ 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ff4c 	bl	8000d38 <__NVIC_SetPriorityGrouping>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eba:	f7ff ff61 	bl	8000d80 <__NVIC_GetPriorityGrouping>
 8000ebe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	68b9      	ldr	r1, [r7, #8]
 8000ec4:	6978      	ldr	r0, [r7, #20]
 8000ec6:	f7ff ffb1 	bl	8000e2c <NVIC_EncodePriority>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed0:	4611      	mov	r1, r2
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ff80 	bl	8000dd8 <__NVIC_SetPriority>
}
 8000ed8:	bf00      	nop
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ff54 	bl	8000d9c <__NVIC_EnableIRQ>
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f04:	2300      	movs	r3, #0
 8000f06:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d005      	beq.n	8000f1e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2204      	movs	r2, #4
 8000f16:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	e027      	b.n	8000f6e <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f022 020e 	bic.w	r2, r2, #14
 8000f2c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f022 0201 	bic.w	r2, r2, #1
 8000f3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f46:	2101      	movs	r1, #1
 8000f48:	fa01 f202 	lsl.w	r2, r1, r2
 8000f4c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2201      	movs	r2, #1
 8000f52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	4798      	blx	r3
    }
  }
  return status;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b087      	sub	sp, #28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa2:	e14e      	b.n	8001242 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	2101      	movs	r1, #1
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 8140 	beq.w	800123c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d005      	beq.n	8000fd4 <HAL_GPIO_Init+0x40>
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d130      	bne.n	8001036 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	2203      	movs	r2, #3
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	68da      	ldr	r2, [r3, #12]
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800100a:	2201      	movs	r2, #1
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	091b      	lsrs	r3, r3, #4
 8001020:	f003 0201 	and.w	r2, r3, #1
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	2b03      	cmp	r3, #3
 8001040:	d017      	beq.n	8001072 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	2203      	movs	r2, #3
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4013      	ands	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	689a      	ldr	r2, [r3, #8]
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d123      	bne.n	80010c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	08da      	lsrs	r2, r3, #3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3208      	adds	r2, #8
 8001086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800108a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	220f      	movs	r2, #15
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	691a      	ldr	r2, [r3, #16]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	08da      	lsrs	r2, r3, #3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3208      	adds	r2, #8
 80010c0:	6939      	ldr	r1, [r7, #16]
 80010c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0203 	and.w	r2, r3, #3
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001102:	2b00      	cmp	r3, #0
 8001104:	f000 809a 	beq.w	800123c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001108:	4b55      	ldr	r3, [pc, #340]	@ (8001260 <HAL_GPIO_Init+0x2cc>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a54      	ldr	r2, [pc, #336]	@ (8001260 <HAL_GPIO_Init+0x2cc>)
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	6193      	str	r3, [r2, #24]
 8001114:	4b52      	ldr	r3, [pc, #328]	@ (8001260 <HAL_GPIO_Init+0x2cc>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001120:	4a50      	ldr	r2, [pc, #320]	@ (8001264 <HAL_GPIO_Init+0x2d0>)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	089b      	lsrs	r3, r3, #2
 8001126:	3302      	adds	r3, #2
 8001128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	220f      	movs	r2, #15
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800114a:	d013      	beq.n	8001174 <HAL_GPIO_Init+0x1e0>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a46      	ldr	r2, [pc, #280]	@ (8001268 <HAL_GPIO_Init+0x2d4>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d00d      	beq.n	8001170 <HAL_GPIO_Init+0x1dc>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a45      	ldr	r2, [pc, #276]	@ (800126c <HAL_GPIO_Init+0x2d8>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d007      	beq.n	800116c <HAL_GPIO_Init+0x1d8>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a44      	ldr	r2, [pc, #272]	@ (8001270 <HAL_GPIO_Init+0x2dc>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d101      	bne.n	8001168 <HAL_GPIO_Init+0x1d4>
 8001164:	2303      	movs	r3, #3
 8001166:	e006      	b.n	8001176 <HAL_GPIO_Init+0x1e2>
 8001168:	2305      	movs	r3, #5
 800116a:	e004      	b.n	8001176 <HAL_GPIO_Init+0x1e2>
 800116c:	2302      	movs	r3, #2
 800116e:	e002      	b.n	8001176 <HAL_GPIO_Init+0x1e2>
 8001170:	2301      	movs	r3, #1
 8001172:	e000      	b.n	8001176 <HAL_GPIO_Init+0x1e2>
 8001174:	2300      	movs	r3, #0
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	f002 0203 	and.w	r2, r2, #3
 800117c:	0092      	lsls	r2, r2, #2
 800117e:	4093      	lsls	r3, r2
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001186:	4937      	ldr	r1, [pc, #220]	@ (8001264 <HAL_GPIO_Init+0x2d0>)
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	089b      	lsrs	r3, r3, #2
 800118c:	3302      	adds	r3, #2
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001194:	4b37      	ldr	r3, [pc, #220]	@ (8001274 <HAL_GPIO_Init+0x2e0>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	43db      	mvns	r3, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011b8:	4a2e      	ldr	r2, [pc, #184]	@ (8001274 <HAL_GPIO_Init+0x2e0>)
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011be:	4b2d      	ldr	r3, [pc, #180]	@ (8001274 <HAL_GPIO_Init+0x2e0>)
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4313      	orrs	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011e2:	4a24      	ldr	r2, [pc, #144]	@ (8001274 <HAL_GPIO_Init+0x2e0>)
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011e8:	4b22      	ldr	r3, [pc, #136]	@ (8001274 <HAL_GPIO_Init+0x2e0>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4313      	orrs	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800120c:	4a19      	ldr	r2, [pc, #100]	@ (8001274 <HAL_GPIO_Init+0x2e0>)
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001212:	4b18      	ldr	r3, [pc, #96]	@ (8001274 <HAL_GPIO_Init+0x2e0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	43db      	mvns	r3, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4313      	orrs	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001236:	4a0f      	ldr	r2, [pc, #60]	@ (8001274 <HAL_GPIO_Init+0x2e0>)
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	3301      	adds	r3, #1
 8001240:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	fa22 f303 	lsr.w	r3, r2, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	f47f aea9 	bne.w	8000fa4 <HAL_GPIO_Init+0x10>
  }
}
 8001252:	bf00      	nop
 8001254:	bf00      	nop
 8001256:	371c      	adds	r7, #28
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	40021000 	.word	0x40021000
 8001264:	40010000 	.word	0x40010000
 8001268:	48000400 	.word	0x48000400
 800126c:	48000800 	.word	0x48000800
 8001270:	48000c00 	.word	0x48000c00
 8001274:	40010400 	.word	0x40010400

08001278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	807b      	strh	r3, [r7, #2]
 8001284:	4613      	mov	r3, r2
 8001286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001288:	787b      	ldrb	r3, [r7, #1]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800128e:	887a      	ldrh	r2, [r7, #2]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001294:	e002      	b.n	800129c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001296:	887a      	ldrh	r2, [r7, #2]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	695b      	ldr	r3, [r3, #20]
 80012b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012ba:	887a      	ldrh	r2, [r7, #2]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4013      	ands	r3, r2
 80012c0:	041a      	lsls	r2, r3, #16
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	43d9      	mvns	r1, r3
 80012c6:	887b      	ldrh	r3, [r7, #2]
 80012c8:	400b      	ands	r3, r1
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	619a      	str	r2, [r3, #24]
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e08d      	b.n	800140a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d106      	bne.n	8001308 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff fad0 	bl	80008a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2224      	movs	r2, #36	@ 0x24
 800130c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0201 	bic.w	r2, r2, #1
 800131e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800132c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800133c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d107      	bne.n	8001356 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	e006      	b.n	8001364 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001362:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	2b02      	cmp	r3, #2
 800136a:	d108      	bne.n	800137e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	e007      	b.n	800138e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800138c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800139c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	68da      	ldr	r2, [r3, #12]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	691a      	ldr	r2, [r3, #16]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69d9      	ldr	r1, [r3, #28]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a1a      	ldr	r2, [r3, #32]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 0201 	orr.w	r2, r2, #1
 80013ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2220      	movs	r2, #32
 80013f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_I2C_Slave_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b088      	sub	sp, #32
 8001416:	af02      	add	r7, sp, #8
 8001418:	60f8      	str	r0, [r7, #12]
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	603b      	str	r3, [r7, #0]
 800141e:	4613      	mov	r3, r2
 8001420:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint16_t tmpXferCount;
  HAL_StatusTypeDef error;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b20      	cmp	r3, #32
 800142c:	f040 8139 	bne.w	80016a2 <HAL_I2C_Slave_Transmit+0x290>
  {
    if ((pData == NULL) || (Size == 0U))
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d002      	beq.n	800143c <HAL_I2C_Slave_Transmit+0x2a>
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d105      	bne.n	8001448 <HAL_I2C_Slave_Transmit+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001442:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e12d      	b.n	80016a4 <HAL_I2C_Slave_Transmit+0x292>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800144e:	2b01      	cmp	r3, #1
 8001450:	d101      	bne.n	8001456 <HAL_I2C_Slave_Transmit+0x44>
 8001452:	2302      	movs	r3, #2
 8001454:	e126      	b.n	80016a4 <HAL_I2C_Slave_Transmit+0x292>
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800145e:	f7ff fc5f 	bl	8000d20 <HAL_GetTick>
 8001462:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2221      	movs	r2, #33	@ 0x21
 8001468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2220      	movs	r2, #32
 8001470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2200      	movs	r2, #0
 8001478:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	68ba      	ldr	r2, [r7, #8]
 800147e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	88fa      	ldrh	r2, [r7, #6]
 8001484:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2200      	movs	r2, #0
 800148a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800149a:	605a      	str	r2, [r3, #4]

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80014a4:	d111      	bne.n	80014ca <HAL_I2C_Slave_Transmit+0xb8>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014aa:	781a      	ldrb	r2, [r3, #0]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b6:	1c5a      	adds	r2, r3, #1
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	3b01      	subs	r3, #1
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	2200      	movs	r2, #0
 80014d2:	2108      	movs	r1, #8
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f001 fc20 	bl	8002d1a <I2C_WaitOnFlagUntilTimeout>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d00c      	beq.n	80014fa <HAL_I2C_Slave_Transmit+0xe8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014ee:	605a      	str	r2, [r3, #4]

      /* Flush TX register */
      I2C_Flush_TXDR(hi2c);
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f001 fbd0 	bl	8002c96 <I2C_Flush_TXDR>

      return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e0d4      	b.n	80016a4 <HAL_I2C_Slave_Transmit+0x292>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2208      	movs	r2, #8
 8001500:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	2b02      	cmp	r3, #2
 8001508:	d11b      	bne.n	8001542 <HAL_I2C_Slave_Transmit+0x130>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	2200      	movs	r2, #0
 8001512:	2108      	movs	r1, #8
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f001 fc00 	bl	8002d1a <I2C_WaitOnFlagUntilTimeout>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00c      	beq.n	800153a <HAL_I2C_Slave_Transmit+0x128>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800152e:	605a      	str	r2, [r3, #4]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f001 fbb0 	bl	8002c96 <I2C_Flush_TXDR>

        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e0b4      	b.n	80016a4 <HAL_I2C_Slave_Transmit+0x292>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2208      	movs	r2, #8
 8001540:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f001 fbe3 	bl	8002d1a <I2C_WaitOnFlagUntilTimeout>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d030      	beq.n	80015bc <HAL_I2C_Slave_Transmit+0x1aa>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001568:	605a      	str	r2, [r3, #4]

      /* Flush TX register */
      I2C_Flush_TXDR(hi2c);
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f001 fb93 	bl	8002c96 <I2C_Flush_TXDR>

      return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e097      	b.n	80016a4 <HAL_I2C_Slave_Transmit+0x292>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	6839      	ldr	r1, [r7, #0]
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f001 fc27 	bl	8002dcc <I2C_WaitOnTXISFlagUntilTimeout>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d009      	beq.n	8001598 <HAL_I2C_Slave_Transmit+0x186>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001592:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e085      	b.n	80016a4 <HAL_I2C_Slave_Transmit+0x292>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159c:	781a      	ldrb	r2, [r3, #0]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a8:	1c5a      	adds	r2, r3, #1
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	3b01      	subs	r3, #1
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferCount > 0U)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1d6      	bne.n	8001574 <HAL_I2C_Slave_Transmit+0x162>
    }

    /* Wait until AF flag is set */
    error = I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart);
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	2200      	movs	r2, #0
 80015ce:	2110      	movs	r1, #16
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	f001 fba2 	bl	8002d1a <I2C_WaitOnFlagUntilTimeout>
 80015d6:	4603      	mov	r3, r0
 80015d8:	74fb      	strb	r3, [r7, #19]

    if (error != HAL_OK)
 80015da:	7cfb      	ldrb	r3, [r7, #19]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d017      	beq.n	8001610 <HAL_I2C_Slave_Transmit+0x1fe>
    {
      /* Check that I2C transfer finished */
      /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
      /* Mean XferCount == 0 */

      tmpXferCount = hi2c->XferCount;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015e4:	823b      	strh	r3, [r7, #16]
      if ((hi2c->ErrorCode == HAL_I2C_ERROR_AF) && (tmpXferCount == 0U))
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	d106      	bne.n	80015fc <HAL_I2C_Slave_Transmit+0x1ea>
 80015ee:	8a3b      	ldrh	r3, [r7, #16]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d103      	bne.n	80015fc <HAL_I2C_Slave_Transmit+0x1ea>
      {
        /* Reset ErrorCode to NONE */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2200      	movs	r2, #0
 80015f8:	645a      	str	r2, [r3, #68]	@ 0x44
 80015fa:	e026      	b.n	800164a <HAL_I2C_Slave_Transmit+0x238>
      }
      else
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800160a:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e049      	b.n	80016a4 <HAL_I2C_Slave_Transmit+0x292>
      }
    }
    else
    {
      /* Flush TX register */
      I2C_Flush_TXDR(hi2c);
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f001 fb40 	bl	8002c96 <I2C_Flush_TXDR>

      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2210      	movs	r2, #16
 800161c:	61da      	str	r2, [r3, #28]

      /* Wait until STOP flag is set */
      if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	6839      	ldr	r1, [r7, #0]
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f001 fc19 	bl	8002e5a <I2C_WaitOnSTOPFlagUntilTimeout>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d009      	beq.n	8001642 <HAL_I2C_Slave_Transmit+0x230>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800163c:	605a      	str	r2, [r3, #4]

        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e030      	b.n	80016a4 <HAL_I2C_Slave_Transmit+0x292>
      }

      /* Clear STOP flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2220      	movs	r2, #32
 8001648:	61da      	str	r2, [r3, #28]
    }

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	2201      	movs	r2, #1
 8001652:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f001 fb5f 	bl	8002d1a <I2C_WaitOnFlagUntilTimeout>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d009      	beq.n	8001676 <HAL_I2C_Slave_Transmit+0x264>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001670:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e016      	b.n	80016a4 <HAL_I2C_Slave_Transmit+0x292>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001684:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2220      	movs	r2, #32
 800168a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	e000      	b.n	80016a4 <HAL_I2C_Slave_Transmit+0x292>
  }
  else
  {
    return HAL_BUSY;
 80016a2:	2302      	movs	r3, #2
  }
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <HAL_I2C_Slave_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                        uint32_t Timeout)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af02      	add	r7, sp, #8
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	4613      	mov	r3, r2
 80016ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b20      	cmp	r3, #32
 80016c6:	f040 80fc 	bne.w	80018c2 <HAL_I2C_Slave_Receive+0x216>
  {
    if ((pData == NULL) || (Size == 0U))
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <HAL_I2C_Slave_Receive+0x2a>
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d105      	bne.n	80016e2 <HAL_I2C_Slave_Receive+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016dc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e0f0      	b.n	80018c4 <HAL_I2C_Slave_Receive+0x218>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d101      	bne.n	80016f0 <HAL_I2C_Slave_Receive+0x44>
 80016ec:	2302      	movs	r3, #2
 80016ee:	e0e9      	b.n	80018c4 <HAL_I2C_Slave_Receive+0x218>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016f8:	f7ff fb12 	bl	8000d20 <HAL_GetTick>
 80016fc:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2222      	movs	r2, #34	@ 0x22
 8001702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2220      	movs	r2, #32
 800170a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2200      	movs	r2, #0
 8001712:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	88fa      	ldrh	r2, [r7, #6]
 800171e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize = hi2c->XferCount;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001724:	b29a      	uxth	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferISR   = NULL;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2200      	movs	r2, #0
 800172e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800173e:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	2200      	movs	r2, #0
 8001748:	2108      	movs	r1, #8
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f001 fae5 	bl	8002d1a <I2C_WaitOnFlagUntilTimeout>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d009      	beq.n	800176a <HAL_I2C_Slave_Receive+0xbe>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001764:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e0ac      	b.n	80018c4 <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2208      	movs	r2, #8
 8001770:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	2201      	movs	r2, #1
 800177a:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f001 facb 	bl	8002d1a <I2C_WaitOnFlagUntilTimeout>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d054      	beq.n	8001834 <HAL_I2C_Slave_Receive+0x188>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001798:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e092      	b.n	80018c4 <HAL_I2C_Slave_Receive+0x218>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	6839      	ldr	r1, [r7, #0]
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f001 fb9c 	bl	8002ee0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d029      	beq.n	8001802 <HAL_I2C_Slave_Receive+0x156>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017bc:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d118      	bne.n	80017fe <HAL_I2C_Slave_Receive+0x152>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	625a      	str	r2, [r3, #36]	@ 0x24

          hi2c->XferCount--;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	3b01      	subs	r3, #1
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
          hi2c->XferSize--;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017f6:	3b01      	subs	r3, #1
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        }

        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e060      	b.n	80018c4 <HAL_I2C_Slave_Receive+0x218>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001814:	1c5a      	adds	r2, r3, #1
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800181e:	b29b      	uxth	r3, r3
 8001820:	3b01      	subs	r3, #1
 8001822:	b29a      	uxth	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800182c:	3b01      	subs	r3, #1
 800182e:	b29a      	uxth	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	851a      	strh	r2, [r3, #40]	@ 0x28
    while (hi2c->XferCount > 0U)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001838:	b29b      	uxth	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1af      	bne.n	800179e <HAL_I2C_Slave_Receive+0xf2>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	6839      	ldr	r1, [r7, #0]
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f001 fb09 	bl	8002e5a <I2C_WaitOnSTOPFlagUntilTimeout>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d009      	beq.n	8001862 <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800185c:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e030      	b.n	80018c4 <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2220      	movs	r2, #32
 8001868:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2201      	movs	r2, #1
 8001872:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f001 fa4f 	bl	8002d1a <I2C_WaitOnFlagUntilTimeout>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d009      	beq.n	8001896 <HAL_I2C_Slave_Receive+0x1ea>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001890:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e016      	b.n	80018c4 <HAL_I2C_Slave_Receive+0x218>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018a4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2220      	movs	r2, #32
 80018aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	e000      	b.n	80018c4 <HAL_I2C_Slave_Receive+0x218>
  }
  else
  {
    return HAL_BUSY;
 80018c2:	2302      	movs	r3, #2
  }
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	4613      	mov	r3, r2
 80018d8:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b20      	cmp	r3, #32
 80018e4:	d139      	bne.n	800195a <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d101      	bne.n	80018f4 <HAL_I2C_Slave_Receive_IT+0x28>
 80018f0:	2302      	movs	r3, #2
 80018f2:	e033      	b.n	800195c <HAL_I2C_Slave_Receive_IT+0x90>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2222      	movs	r2, #34	@ 0x22
 8001900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2220      	movs	r2, #32
 8001908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2200      	movs	r2, #0
 8001910:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001920:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	88fa      	ldrh	r2, [r7, #6]
 800192c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001932:	b29a      	uxth	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4a0a      	ldr	r2, [pc, #40]	@ (8001964 <HAL_I2C_Slave_Receive_IT+0x98>)
 800193c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4a09      	ldr	r2, [pc, #36]	@ (8001968 <HAL_I2C_Slave_Receive_IT+0x9c>)
 8001942:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 800194c:	f248 0102 	movw	r1, #32770	@ 0x8002
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f001 fc63 	bl	800321c <I2C_Enable_IRQ>

    return HAL_OK;
 8001956:	2300      	movs	r3, #0
 8001958:	e000      	b.n	800195c <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 800195a:	2302      	movs	r3, #2
  }
}
 800195c:	4618      	mov	r0, r3
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	ffff0000 	.word	0xffff0000
 8001968:	08001b13 	.word	0x08001b13

0800196c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	68f9      	ldr	r1, [r7, #12]
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	4798      	blx	r3
  }
}
 8001998:	bf00      	nop
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00f      	beq.n	80019e2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00a      	beq.n	80019e2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d0:	f043 0201 	orr.w	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019e0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d00f      	beq.n	8001a0c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00a      	beq.n	8001a0c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fa:	f043 0208 	orr.w	r2, r3, #8
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a0a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00f      	beq.n	8001a36 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00a      	beq.n	8001a36 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a24:	f043 0202 	orr.w	r2, r3, #2
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a34:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 030b 	and.w	r3, r3, #11
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001a46:	68f9      	ldr	r1, [r7, #12]
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f001 f80d 	bl	8002a68 <I2C_ITError>
  }
}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	70fb      	strb	r3, [r7, #3]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b22:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d101      	bne.n	8001b36 <I2C_Slave_ISR_IT+0x24>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e0e2      	b.n	8001cfc <I2C_Slave_ISR_IT+0x1ea>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	f003 0320 	and.w	r3, r3, #32
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d009      	beq.n	8001b5c <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d004      	beq.n	8001b5c <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001b52:	6939      	ldr	r1, [r7, #16]
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f000 fdcf 	bl	80026f8 <I2C_ITSlaveCplt>
 8001b5a:	e0ca      	b.n	8001cf2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	f003 0310 	and.w	r3, r3, #16
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d04b      	beq.n	8001bfe <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d046      	beq.n	8001bfe <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d128      	bne.n	8001bcc <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b28      	cmp	r3, #40	@ 0x28
 8001b84:	d108      	bne.n	8001b98 <I2C_Slave_ISR_IT+0x86>
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001b8c:	d104      	bne.n	8001b98 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001b8e:	6939      	ldr	r1, [r7, #16]
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f000 ff15 	bl	80029c0 <I2C_ITListenCplt>
 8001b96:	e031      	b.n	8001bfc <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b29      	cmp	r3, #41	@ 0x29
 8001ba2:	d10e      	bne.n	8001bc2 <I2C_Slave_ISR_IT+0xb0>
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001baa:	d00a      	beq.n	8001bc2 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2210      	movs	r2, #16
 8001bb2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f001 f86e 	bl	8002c96 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 fc78 	bl	80024b0 <I2C_ITSlaveSeqCplt>
 8001bc0:	e01c      	b.n	8001bfc <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2210      	movs	r2, #16
 8001bc8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001bca:	e08f      	b.n	8001cec <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2210      	movs	r2, #16
 8001bd2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd8:	f043 0204 	orr.w	r2, r3, #4
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <I2C_Slave_ISR_IT+0xdc>
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bec:	d17e      	bne.n	8001cec <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 ff37 	bl	8002a68 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001bfa:	e077      	b.n	8001cec <I2C_Slave_ISR_IT+0x1da>
 8001bfc:	e076      	b.n	8001cec <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d02f      	beq.n	8001c68 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d02a      	beq.n	8001c68 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d018      	beq.n	8001c4e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	3b01      	subs	r3, #1
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d14b      	bne.n	8001cf0 <I2C_Slave_ISR_IT+0x1de>
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001c5e:	d047      	beq.n	8001cf0 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f000 fc25 	bl	80024b0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001c66:	e043      	b.n	8001cf0 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d009      	beq.n	8001c86 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d004      	beq.n	8001c86 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001c7c:	6939      	ldr	r1, [r7, #16]
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 fb55 	bl	800232e <I2C_ITAddrCplt>
 8001c84:	e035      	b.n	8001cf2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d030      	beq.n	8001cf2 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d02b      	beq.n	8001cf2 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d018      	beq.n	8001cd6 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca8:	781a      	ldrb	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb4:	1c5a      	adds	r2, r3, #1
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001cd4:	e00d      	b.n	8001cf2 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cdc:	d002      	beq.n	8001ce4 <I2C_Slave_ISR_IT+0x1d2>
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d106      	bne.n	8001cf2 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f000 fbe3 	bl	80024b0 <I2C_ITSlaveSeqCplt>
 8001cea:	e002      	b.n	8001cf2 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8001cec:	bf00      	nop
 8001cee:	e000      	b.n	8001cf2 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8001cf0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af02      	add	r7, sp, #8
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d101      	bne.n	8001d1e <I2C_Master_ISR_DMA+0x1a>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e0e7      	b.n	8001eee <I2C_Master_ISR_DMA+0x1ea>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	f003 0310 	and.w	r3, r3, #16
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d016      	beq.n	8001d5e <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d011      	beq.n	8001d5e <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2210      	movs	r2, #16
 8001d40:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d46:	f043 0204 	orr.w	r2, r3, #4
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001d4e:	2120      	movs	r1, #32
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f001 fa63 	bl	800321c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 ff9d 	bl	8002c96 <I2C_Flush_TXDR>
 8001d5c:	e0c2      	b.n	8001ee4 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d07f      	beq.n	8001e68 <I2C_Master_ISR_DMA+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d07a      	beq.n	8001e68 <I2C_Master_ISR_DMA+0x164>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d80:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d05c      	beq.n	8001e46 <I2C_Master_ISR_DMA+0x142>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d98:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	2bff      	cmp	r3, #255	@ 0xff
 8001da2:	d914      	bls.n	8001dce <I2C_Master_ISR_DMA+0xca>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	0c1b      	lsrs	r3, r3, #16
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d103      	bne.n	8001dc0 <I2C_Master_ISR_DMA+0xbc>
        {
          hi2c->XferSize = 1U;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001dbe:	e002      	b.n	8001dc6 <I2C_Master_ISR_DMA+0xc2>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	22ff      	movs	r2, #255	@ 0xff
 8001dc4:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8001dc6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	e010      	b.n	8001df0 <I2C_Master_ISR_DMA+0xec>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ddc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001de0:	d003      	beq.n	8001dea <I2C_Master_ISR_DMA+0xe6>
        {
          xfermode = hi2c->XferOptions;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	e002      	b.n	8001df0 <I2C_Master_ISR_DMA+0xec>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001dea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001dee:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	8a79      	ldrh	r1, [r7, #18]
 8001df8:	2300      	movs	r3, #0
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f001 f9da 	bl	80031b8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b22      	cmp	r3, #34	@ 0x22
 8001e20:	d108      	bne.n	8001e34 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e30:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001e32:	e057      	b.n	8001ee4 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e42:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001e44:	e04e      	b.n	8001ee4 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e54:	d003      	beq.n	8001e5e <I2C_Master_ISR_DMA+0x15a>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 faed 	bl	8002436 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001e5c:	e042      	b.n	8001ee4 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001e5e:	2140      	movs	r1, #64	@ 0x40
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f000 fe01 	bl	8002a68 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001e66:	e03d      	b.n	8001ee4 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d028      	beq.n	8001ec4 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d023      	beq.n	8001ec4 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d119      	bne.n	8001eba <I2C_Master_ISR_DMA+0x1b6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e94:	d025      	beq.n	8001ee2 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e9a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001e9e:	d108      	bne.n	8001eb2 <I2C_Master_ISR_DMA+0x1ae>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001eae:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001eb0:	e017      	b.n	8001ee2 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f000 fabf 	bl	8002436 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001eb8:	e013      	b.n	8001ee2 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001eba:	2140      	movs	r1, #64	@ 0x40
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 fdd3 	bl	8002a68 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001ec2:	e00e      	b.n	8001ee2 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f003 0320 	and.w	r3, r3, #32
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00a      	beq.n	8001ee4 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 fb44 	bl	8002568 <I2C_ITMasterCplt>
 8001ee0:	e000      	b.n	8001ee4 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8001ee2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af02      	add	r7, sp, #8
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8001f04:	4b90      	ldr	r3, [pc, #576]	@ (8002148 <I2C_Mem_ISR_DMA+0x250>)
 8001f06:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <I2C_Mem_ISR_DMA+0x1e>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e12f      	b.n	8002176 <I2C_Mem_ISR_DMA+0x27e>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	f003 0310 	and.w	r3, r3, #16
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d016      	beq.n	8001f56 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d011      	beq.n	8001f56 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2210      	movs	r2, #16
 8001f38:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3e:	f043 0204 	orr.w	r2, r3, #4
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001f46:	2120      	movs	r1, #32
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f001 f967 	bl	800321c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 fea1 	bl	8002c96 <I2C_Flush_TXDR>
 8001f54:	e10a      	b.n	800216c <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00e      	beq.n	8001f7e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d009      	beq.n	8001f7e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f72:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f04f 32ff 	mov.w	r2, #4294967295
 8001f7a:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f7c:	e0f6      	b.n	800216c <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d06d      	beq.n	8002064 <I2C_Mem_ISR_DMA+0x16c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d068      	beq.n	8002064 <I2C_Mem_ISR_DMA+0x16c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001f92:	2101      	movs	r1, #1
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f001 f9c5 	bl	8003324 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001f9a:	2110      	movs	r1, #16
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f001 f93d 	bl	800321c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d056      	beq.n	800205a <I2C_Mem_ISR_DMA+0x162>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	2bff      	cmp	r3, #255	@ 0xff
 8001fb4:	d91e      	bls.n	8001ff4 <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	0c1b      	lsrs	r3, r3, #16
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d103      	bne.n	8001fd2 <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001fd0:	e002      	b.n	8001fd8 <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	22ff      	movs	r2, #255	@ 0xff
 8001fd6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fdc:	b299      	uxth	r1, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f001 f8e3 	bl	80031b8 <I2C_TransferConfig>
 8001ff2:	e011      	b.n	8002018 <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002002:	b299      	uxth	r1, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002008:	b2da      	uxtb	r2, r3
 800200a:	2300      	movs	r3, #0
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f001 f8d0 	bl	80031b8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800201c:	b29a      	uxth	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	b29a      	uxth	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b22      	cmp	r3, #34	@ 0x22
 8002034:	d108      	bne.n	8002048 <I2C_Mem_ISR_DMA+0x150>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002044:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002046:	e091      	b.n	800216c <I2C_Mem_ISR_DMA+0x274>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002056:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002058:	e088      	b.n	800216c <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800205a:	2140      	movs	r1, #64	@ 0x40
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 fd03 	bl	8002a68 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002062:	e083      	b.n	800216c <I2C_Mem_ISR_DMA+0x274>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800206a:	2b00      	cmp	r3, #0
 800206c:	d070      	beq.n	8002150 <I2C_Mem_ISR_DMA+0x258>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002074:	2b00      	cmp	r3, #0
 8002076:	d06b      	beq.n	8002150 <I2C_Mem_ISR_DMA+0x258>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002078:	2101      	movs	r1, #1
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f001 f952 	bl	8003324 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002080:	2110      	movs	r1, #16
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f001 f8ca 	bl	800321c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b22      	cmp	r3, #34	@ 0x22
 8002092:	d101      	bne.n	8002098 <I2C_Mem_ISR_DMA+0x1a0>
    {
      direction = I2C_GENERATE_START_READ;
 8002094:	4b2d      	ldr	r3, [pc, #180]	@ (800214c <I2C_Mem_ISR_DMA+0x254>)
 8002096:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800209c:	b29b      	uxth	r3, r3
 800209e:	2bff      	cmp	r3, #255	@ 0xff
 80020a0:	d91e      	bls.n	80020e0 <I2C_Mem_ISR_DMA+0x1e8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	0c1b      	lsrs	r3, r3, #16
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d103      	bne.n	80020be <I2C_Mem_ISR_DMA+0x1c6>
      {
        hi2c->XferSize = 1U;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2201      	movs	r2, #1
 80020ba:	851a      	strh	r2, [r3, #40]	@ 0x28
 80020bc:	e002      	b.n	80020c4 <I2C_Mem_ISR_DMA+0x1cc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	22ff      	movs	r2, #255	@ 0xff
 80020c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c8:	b299      	uxth	r1, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f001 f86d 	bl	80031b8 <I2C_TransferConfig>
 80020de:	e011      	b.n	8002104 <I2C_Mem_ISR_DMA+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ee:	b299      	uxth	r1, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f001 f85a 	bl	80031b8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002108:	b29a      	uxth	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	b29a      	uxth	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b22      	cmp	r3, #34	@ 0x22
 8002120:	d108      	bne.n	8002134 <I2C_Mem_ISR_DMA+0x23c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002130:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002132:	e01b      	b.n	800216c <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002142:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002144:	e012      	b.n	800216c <I2C_Mem_ISR_DMA+0x274>
 8002146:	bf00      	nop
 8002148:	80002000 	.word	0x80002000
 800214c:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	f003 0320 	and.w	r3, r3, #32
 8002156:	2b00      	cmp	r3, #0
 8002158:	d008      	beq.n	800216c <I2C_Mem_ISR_DMA+0x274>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <I2C_Mem_ISR_DMA+0x274>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002164:	68b9      	ldr	r1, [r7, #8]
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f000 f9fe 	bl	8002568 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop

08002180 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002190:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <I2C_Slave_ISR_DMA+0x24>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e0c0      	b.n	8002326 <I2C_Slave_ISR_DMA+0x1a6>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	f003 0320 	and.w	r3, r3, #32
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d009      	beq.n	80021ca <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d004      	beq.n	80021ca <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80021c0:	68b9      	ldr	r1, [r7, #8]
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 fa98 	bl	80026f8 <I2C_ITSlaveCplt>
 80021c8:	e0a8      	b.n	800231c <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 8095 	beq.w	8002300 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 808f 	beq.w	8002300 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d104      	bne.n	80021f6 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d07d      	beq.n	80022f2 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00c      	beq.n	8002218 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d007      	beq.n	8002218 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8002214:	2301      	movs	r3, #1
 8002216:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00c      	beq.n	800223a <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d007      	beq.n	800223a <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8002236:	2301      	movs	r3, #1
 8002238:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d128      	bne.n	8002292 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b28      	cmp	r3, #40	@ 0x28
 800224a:	d108      	bne.n	800225e <I2C_Slave_ISR_DMA+0xde>
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002252:	d104      	bne.n	800225e <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002254:	68b9      	ldr	r1, [r7, #8]
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 fbb2 	bl	80029c0 <I2C_ITListenCplt>
 800225c:	e048      	b.n	80022f0 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b29      	cmp	r3, #41	@ 0x29
 8002268:	d10e      	bne.n	8002288 <I2C_Slave_ISR_DMA+0x108>
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002270:	d00a      	beq.n	8002288 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2210      	movs	r2, #16
 8002278:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 fd0b 	bl	8002c96 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f000 f915 	bl	80024b0 <I2C_ITSlaveSeqCplt>
 8002286:	e033      	b.n	80022f0 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2210      	movs	r2, #16
 800228e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002290:	e034      	b.n	80022fc <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2210      	movs	r2, #16
 8002298:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229e:	f043 0204 	orr.w	r2, r3, #4
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022ac:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <I2C_Slave_ISR_DMA+0x13c>
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022ba:	d11f      	bne.n	80022fc <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80022bc:	7dfb      	ldrb	r3, [r7, #23]
 80022be:	2b21      	cmp	r3, #33	@ 0x21
 80022c0:	d002      	beq.n	80022c8 <I2C_Slave_ISR_DMA+0x148>
 80022c2:	7dfb      	ldrb	r3, [r7, #23]
 80022c4:	2b29      	cmp	r3, #41	@ 0x29
 80022c6:	d103      	bne.n	80022d0 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2221      	movs	r2, #33	@ 0x21
 80022cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80022ce:	e008      	b.n	80022e2 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80022d0:	7dfb      	ldrb	r3, [r7, #23]
 80022d2:	2b22      	cmp	r3, #34	@ 0x22
 80022d4:	d002      	beq.n	80022dc <I2C_Slave_ISR_DMA+0x15c>
 80022d6:	7dfb      	ldrb	r3, [r7, #23]
 80022d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80022da:	d102      	bne.n	80022e2 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2222      	movs	r2, #34	@ 0x22
 80022e0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e6:	4619      	mov	r1, r3
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f000 fbbd 	bl	8002a68 <I2C_ITError>
      if (treatdmanack == 1U)
 80022ee:	e005      	b.n	80022fc <I2C_Slave_ISR_DMA+0x17c>
 80022f0:	e004      	b.n	80022fc <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2210      	movs	r2, #16
 80022f8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80022fa:	e00f      	b.n	800231c <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 80022fc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80022fe:	e00d      	b.n	800231c <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d008      	beq.n	800231c <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 f809 	bl	800232e <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3720      	adds	r7, #32
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b084      	sub	sp, #16
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800233e:	b2db      	uxtb	r3, r3
 8002340:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002344:	2b28      	cmp	r3, #40	@ 0x28
 8002346:	d16a      	bne.n	800241e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	0c1b      	lsrs	r3, r3, #16
 8002350:	b2db      	uxtb	r3, r3
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	0c1b      	lsrs	r3, r3, #16
 8002360:	b29b      	uxth	r3, r3
 8002362:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002366:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	b29b      	uxth	r3, r3
 8002370:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002374:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	b29b      	uxth	r3, r3
 800237e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002382:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	2b02      	cmp	r3, #2
 800238a:	d138      	bne.n	80023fe <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800238c:	897b      	ldrh	r3, [r7, #10]
 800238e:	09db      	lsrs	r3, r3, #7
 8002390:	b29a      	uxth	r2, r3
 8002392:	89bb      	ldrh	r3, [r7, #12]
 8002394:	4053      	eors	r3, r2
 8002396:	b29b      	uxth	r3, r3
 8002398:	f003 0306 	and.w	r3, r3, #6
 800239c:	2b00      	cmp	r3, #0
 800239e:	d11c      	bne.n	80023da <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80023a0:	897b      	ldrh	r3, [r7, #10]
 80023a2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d13b      	bne.n	800242e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2208      	movs	r2, #8
 80023c2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80023cc:	89ba      	ldrh	r2, [r7, #12]
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
 80023d0:	4619      	mov	r1, r3
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff fb5d 	bl	8001a92 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80023d8:	e029      	b.n	800242e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80023da:	893b      	ldrh	r3, [r7, #8]
 80023dc:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80023de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 ff9e 	bl	8003324 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80023f0:	89ba      	ldrh	r2, [r7, #12]
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	4619      	mov	r1, r3
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff fb4b 	bl	8001a92 <HAL_I2C_AddrCallback>
}
 80023fc:	e017      	b.n	800242e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80023fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 ff8e 	bl	8003324 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002410:	89ba      	ldrh	r2, [r7, #12]
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	4619      	mov	r1, r3
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7ff fb3b 	bl	8001a92 <HAL_I2C_AddrCallback>
}
 800241c:	e007      	b.n	800242e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2208      	movs	r2, #8
 8002424:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800242e:	bf00      	nop
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b21      	cmp	r3, #33	@ 0x21
 8002450:	d115      	bne.n	800247e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2220      	movs	r2, #32
 8002456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2211      	movs	r2, #17
 800245e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002466:	2101      	movs	r1, #1
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 ff5b 	bl	8003324 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff faed 	bl	8001a56 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800247c:	e014      	b.n	80024a8 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2220      	movs	r2, #32
 8002482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2212      	movs	r2, #18
 800248a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002492:	2102      	movs	r1, #2
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 ff45 	bl	8003324 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff fae1 	bl	8001a6a <HAL_I2C_MasterRxCpltCallback>
}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d008      	beq.n	80024e4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	e00c      	b.n	80024fe <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d007      	beq.n	80024fe <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024fc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b29      	cmp	r3, #41	@ 0x29
 8002508:	d112      	bne.n	8002530 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2228      	movs	r2, #40	@ 0x28
 800250e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2221      	movs	r2, #33	@ 0x21
 8002516:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002518:	2101      	movs	r1, #1
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 ff02 	bl	8003324 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff faa8 	bl	8001a7e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800252e:	e017      	b.n	8002560 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b2a      	cmp	r3, #42	@ 0x2a
 800253a:	d111      	bne.n	8002560 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2228      	movs	r2, #40	@ 0x28
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2222      	movs	r2, #34	@ 0x22
 8002548:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800254a:	2102      	movs	r1, #2
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 fee9 	bl	8003324 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7fd fe90 	bl	8000280 <HAL_I2C_SlaveRxCpltCallback>
}
 8002560:	bf00      	nop
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2220      	movs	r2, #32
 800257c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b21      	cmp	r3, #33	@ 0x21
 8002588:	d107      	bne.n	800259a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800258a:	2101      	movs	r1, #1
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 fec9 	bl	8003324 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2211      	movs	r2, #17
 8002596:	631a      	str	r2, [r3, #48]	@ 0x30
 8002598:	e00c      	b.n	80025b4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b22      	cmp	r3, #34	@ 0x22
 80025a4:	d106      	bne.n	80025b4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80025a6:	2102      	movs	r1, #2
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 febb 	bl	8003324 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2212      	movs	r2, #18
 80025b2:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6859      	ldr	r1, [r3, #4]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	4b4c      	ldr	r3, [pc, #304]	@ (80026f0 <I2C_ITMasterCplt+0x188>)
 80025c0:	400b      	ands	r3, r1
 80025c2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a49      	ldr	r2, [pc, #292]	@ (80026f4 <I2C_ITMasterCplt+0x18c>)
 80025ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d009      	beq.n	80025ee <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2210      	movs	r2, #16
 80025e0:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e6:	f043 0204 	orr.w	r2, r3, #4
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b60      	cmp	r3, #96	@ 0x60
 80025f8:	d10a      	bne.n	8002610 <I2C_ITMasterCplt+0xa8>
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260a:	b2db      	uxtb	r3, r3
 800260c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800260e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 fb40 	bl	8002c96 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b60      	cmp	r3, #96	@ 0x60
 8002626:	d002      	beq.n	800262e <I2C_ITMasterCplt+0xc6>
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d006      	beq.n	800263c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002632:	4619      	mov	r1, r3
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 fa17 	bl	8002a68 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800263a:	e054      	b.n	80026e6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b21      	cmp	r3, #33	@ 0x21
 8002646:	d124      	bne.n	8002692 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2220      	movs	r2, #32
 800264c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b40      	cmp	r3, #64	@ 0x40
 8002660:	d10b      	bne.n	800267a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff fa25 	bl	8001ac2 <HAL_I2C_MemTxCpltCallback>
}
 8002678:	e035      	b.n	80026e6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff f9e3 	bl	8001a56 <HAL_I2C_MasterTxCpltCallback>
}
 8002690:	e029      	b.n	80026e6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b22      	cmp	r3, #34	@ 0x22
 800269c:	d123      	bne.n	80026e6 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2220      	movs	r2, #32
 80026a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b40      	cmp	r3, #64	@ 0x40
 80026b6:	d10b      	bne.n	80026d0 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff fa04 	bl	8001ad6 <HAL_I2C_MemRxCpltCallback>
}
 80026ce:	e00a      	b.n	80026e6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff f9c2 	bl	8001a6a <HAL_I2C_MasterRxCpltCallback>
}
 80026e6:	bf00      	nop
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	fe00e800 	.word	0xfe00e800
 80026f4:	ffff0000 	.word	0xffff0000

080026f8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002712:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800271a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2220      	movs	r2, #32
 8002722:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002724:	7afb      	ldrb	r3, [r7, #11]
 8002726:	2b21      	cmp	r3, #33	@ 0x21
 8002728:	d002      	beq.n	8002730 <I2C_ITSlaveCplt+0x38>
 800272a:	7afb      	ldrb	r3, [r7, #11]
 800272c:	2b29      	cmp	r3, #41	@ 0x29
 800272e:	d108      	bne.n	8002742 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002730:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 fdf5 	bl	8003324 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2221      	movs	r2, #33	@ 0x21
 800273e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002740:	e019      	b.n	8002776 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002742:	7afb      	ldrb	r3, [r7, #11]
 8002744:	2b22      	cmp	r3, #34	@ 0x22
 8002746:	d002      	beq.n	800274e <I2C_ITSlaveCplt+0x56>
 8002748:	7afb      	ldrb	r3, [r7, #11]
 800274a:	2b2a      	cmp	r3, #42	@ 0x2a
 800274c:	d108      	bne.n	8002760 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800274e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fde6 	bl	8003324 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2222      	movs	r2, #34	@ 0x22
 800275c:	631a      	str	r2, [r3, #48]	@ 0x30
 800275e:	e00a      	b.n	8002776 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002760:	7afb      	ldrb	r3, [r7, #11]
 8002762:	2b28      	cmp	r3, #40	@ 0x28
 8002764:	d107      	bne.n	8002776 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002766:	f248 0103 	movw	r1, #32771	@ 0x8003
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 fdda 	bl	8003324 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002784:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6859      	ldr	r1, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4b89      	ldr	r3, [pc, #548]	@ (80029b8 <I2C_ITSlaveCplt+0x2c0>)
 8002792:	400b      	ands	r3, r1
 8002794:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 fa7d 	bl	8002c96 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d013      	beq.n	80027ce <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80027b4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d01f      	beq.n	80027fe <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027cc:	e017      	b.n	80027fe <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d012      	beq.n	80027fe <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027e6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d006      	beq.n	80027fe <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	d020      	beq.n	800284a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f023 0304 	bic.w	r3, r3, #4
 800280e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002822:	1c5a      	adds	r2, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00c      	beq.n	800284a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002840:	b29b      	uxth	r3, r3
 8002842:	3b01      	subs	r3, #1
 8002844:	b29a      	uxth	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800284e:	b29b      	uxth	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002858:	f043 0204 	orr.w	r2, r3, #4
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2b00      	cmp	r3, #0
 8002868:	d049      	beq.n	80028fe <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002870:	2b00      	cmp	r3, #0
 8002872:	d044      	beq.n	80028fe <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002878:	b29b      	uxth	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d128      	bne.n	80028d0 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b28      	cmp	r3, #40	@ 0x28
 8002888:	d108      	bne.n	800289c <I2C_ITSlaveCplt+0x1a4>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002890:	d104      	bne.n	800289c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002892:	6979      	ldr	r1, [r7, #20]
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f893 	bl	80029c0 <I2C_ITListenCplt>
 800289a:	e030      	b.n	80028fe <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b29      	cmp	r3, #41	@ 0x29
 80028a6:	d10e      	bne.n	80028c6 <I2C_ITSlaveCplt+0x1ce>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80028ae:	d00a      	beq.n	80028c6 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2210      	movs	r2, #16
 80028b6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f9ec 	bl	8002c96 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff fdf6 	bl	80024b0 <I2C_ITSlaveSeqCplt>
 80028c4:	e01b      	b.n	80028fe <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2210      	movs	r2, #16
 80028cc:	61da      	str	r2, [r3, #28]
 80028ce:	e016      	b.n	80028fe <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2210      	movs	r2, #16
 80028d6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028dc:	f043 0204 	orr.w	r2, r3, #4
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <I2C_ITSlaveCplt+0x1fa>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028f0:	d105      	bne.n	80028fe <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f6:	4619      	mov	r1, r3
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f8b5 	bl	8002a68 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002910:	2b00      	cmp	r3, #0
 8002912:	d010      	beq.n	8002936 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002918:	4619      	mov	r1, r3
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f8a4 	bl	8002a68 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b28      	cmp	r3, #40	@ 0x28
 800292a:	d141      	bne.n	80029b0 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800292c:	6979      	ldr	r1, [r7, #20]
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f846 	bl	80029c0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002934:	e03c      	b.n	80029b0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800293e:	d014      	beq.n	800296a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff fdb5 	bl	80024b0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a1c      	ldr	r2, [pc, #112]	@ (80029bc <I2C_ITSlaveCplt+0x2c4>)
 800294a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff f8a3 	bl	8001aae <HAL_I2C_ListenCpltCallback>
}
 8002968:	e022      	b.n	80029b0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b22      	cmp	r3, #34	@ 0x22
 8002974:	d10e      	bne.n	8002994 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2220      	movs	r2, #32
 800297a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7fd fc77 	bl	8000280 <HAL_I2C_SlaveRxCpltCallback>
}
 8002992:	e00d      	b.n	80029b0 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff f867 	bl	8001a7e <HAL_I2C_SlaveTxCpltCallback>
}
 80029b0:	bf00      	nop
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	fe00e800 	.word	0xfe00e800
 80029bc:	ffff0000 	.word	0xffff0000

080029c0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a25      	ldr	r2, [pc, #148]	@ (8002a64 <I2C_ITListenCplt+0xa4>)
 80029ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2220      	movs	r2, #32
 80029da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d022      	beq.n	8002a3c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d012      	beq.n	8002a3c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a34:	f043 0204 	orr.w	r2, r3, #4
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002a3c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 fc6f 	bl	8003324 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2210      	movs	r2, #16
 8002a4c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff f829 	bl	8001aae <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002a5c:	bf00      	nop
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	ffff0000 	.word	0xffff0000

08002a68 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a78:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a6d      	ldr	r2, [pc, #436]	@ (8002c3c <I2C_ITError+0x1d4>)
 8002a86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
 8002a9c:	2b28      	cmp	r3, #40	@ 0x28
 8002a9e:	d005      	beq.n	8002aac <I2C_ITError+0x44>
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
 8002aa2:	2b29      	cmp	r3, #41	@ 0x29
 8002aa4:	d002      	beq.n	8002aac <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
 8002aa8:	2b2a      	cmp	r3, #42	@ 0x2a
 8002aaa:	d10b      	bne.n	8002ac4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002aac:	2103      	movs	r1, #3
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fc38 	bl	8003324 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2228      	movs	r2, #40	@ 0x28
 8002ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a60      	ldr	r2, [pc, #384]	@ (8002c40 <I2C_ITError+0x1d8>)
 8002ac0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ac2:	e030      	b.n	8002b26 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002ac4:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 fc2b 	bl	8003324 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f8e1 	bl	8002c96 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b60      	cmp	r3, #96	@ 0x60
 8002ade:	d01f      	beq.n	8002b20 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	2b20      	cmp	r3, #32
 8002af4:	d114      	bne.n	8002b20 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	2b10      	cmp	r3, #16
 8002b02:	d109      	bne.n	8002b18 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2210      	movs	r2, #16
 8002b0a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b10:	f043 0204 	orr.w	r2, r3, #4
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d039      	beq.n	8002ba8 <I2C_ITError+0x140>
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b11      	cmp	r3, #17
 8002b38:	d002      	beq.n	8002b40 <I2C_ITError+0xd8>
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2b21      	cmp	r3, #33	@ 0x21
 8002b3e:	d133      	bne.n	8002ba8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b4e:	d107      	bne.n	8002b60 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b5e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fe fa07 	bl	8000f78 <HAL_DMA_GetState>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d017      	beq.n	8002ba0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b74:	4a33      	ldr	r2, [pc, #204]	@ (8002c44 <I2C_ITError+0x1dc>)
 8002b76:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe f9b9 	bl	8000efc <HAL_DMA_Abort_IT>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d04d      	beq.n	8002c2c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b9e:	e045      	b.n	8002c2c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f851 	bl	8002c48 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ba6:	e041      	b.n	8002c2c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d039      	beq.n	8002c24 <I2C_ITError+0x1bc>
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2b12      	cmp	r3, #18
 8002bb4:	d002      	beq.n	8002bbc <I2C_ITError+0x154>
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b22      	cmp	r3, #34	@ 0x22
 8002bba:	d133      	bne.n	8002c24 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bca:	d107      	bne.n	8002bdc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bda:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fe f9c9 	bl	8000f78 <HAL_DMA_GetState>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d017      	beq.n	8002c1c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf0:	4a14      	ldr	r2, [pc, #80]	@ (8002c44 <I2C_ITError+0x1dc>)
 8002bf2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fe f97b 	bl	8000efc <HAL_DMA_Abort_IT>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d011      	beq.n	8002c30 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c16:	4610      	mov	r0, r2
 8002c18:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c1a:	e009      	b.n	8002c30 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f813 	bl	8002c48 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c22:	e005      	b.n	8002c30 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f80f 	bl	8002c48 <I2C_TreatErrorCallback>
  }
}
 8002c2a:	e002      	b.n	8002c32 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002c2c:	bf00      	nop
 8002c2e:	e000      	b.n	8002c32 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c30:	bf00      	nop
}
 8002c32:	bf00      	nop
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	ffff0000 	.word	0xffff0000
 8002c40:	08001b13 	.word	0x08001b13
 8002c44:	08002cdf 	.word	0x08002cdf

08002c48 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b60      	cmp	r3, #96	@ 0x60
 8002c5a:	d10e      	bne.n	8002c7a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7fe ff43 	bl	8001afe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002c78:	e009      	b.n	8002c8e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7fe ff2e 	bl	8001aea <HAL_I2C_ErrorCallback>
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d103      	bne.n	8002cb4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d007      	beq.n	8002cd2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	699a      	ldr	r2, [r3, #24]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f042 0201 	orr.w	r2, r2, #1
 8002cd0:	619a      	str	r2, [r3, #24]
  }
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b084      	sub	sp, #16
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d08:	2200      	movs	r2, #0
 8002d0a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f7ff ff9b 	bl	8002c48 <I2C_TreatErrorCallback>
}
 8002d12:	bf00      	nop
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b084      	sub	sp, #16
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	60f8      	str	r0, [r7, #12]
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	603b      	str	r3, [r7, #0]
 8002d26:	4613      	mov	r3, r2
 8002d28:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d2a:	e03b      	b.n	8002da4 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	6839      	ldr	r1, [r7, #0]
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 f961 	bl	8002ff8 <I2C_IsErrorOccurred>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e041      	b.n	8002dc4 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d46:	d02d      	beq.n	8002da4 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d48:	f7fd ffea 	bl	8000d20 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d302      	bcc.n	8002d5e <I2C_WaitOnFlagUntilTimeout+0x44>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d122      	bne.n	8002da4 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	699a      	ldr	r2, [r3, #24]
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	4013      	ands	r3, r2
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	bf0c      	ite	eq
 8002d6e:	2301      	moveq	r3, #1
 8002d70:	2300      	movne	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	461a      	mov	r2, r3
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d113      	bne.n	8002da4 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d80:	f043 0220 	orr.w	r2, r3, #32
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e00f      	b.n	8002dc4 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	4013      	ands	r3, r2
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	bf0c      	ite	eq
 8002db4:	2301      	moveq	r3, #1
 8002db6:	2300      	movne	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	461a      	mov	r2, r3
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d0b4      	beq.n	8002d2c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002dd8:	e033      	b.n	8002e42 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	68b9      	ldr	r1, [r7, #8]
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 f90a 	bl	8002ff8 <I2C_IsErrorOccurred>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e031      	b.n	8002e52 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df4:	d025      	beq.n	8002e42 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df6:	f7fd ff93 	bl	8000d20 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d302      	bcc.n	8002e0c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d11a      	bne.n	8002e42 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d013      	beq.n	8002e42 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1e:	f043 0220 	orr.w	r2, r3, #32
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e007      	b.n	8002e52 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d1c4      	bne.n	8002dda <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	60b9      	str	r1, [r7, #8]
 8002e64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e66:	e02f      	b.n	8002ec8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	68b9      	ldr	r1, [r7, #8]
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 f8c3 	bl	8002ff8 <I2C_IsErrorOccurred>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e02d      	b.n	8002ed8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e7c:	f7fd ff50 	bl	8000d20 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d302      	bcc.n	8002e92 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d11a      	bne.n	8002ec8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	f003 0320 	and.w	r3, r3, #32
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d013      	beq.n	8002ec8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea4:	f043 0220 	orr.w	r2, r3, #32
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e007      	b.n	8002ed8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	d1c8      	bne.n	8002e68 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eec:	2300      	movs	r3, #0
 8002eee:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002ef0:	e071      	b.n	8002fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	68b9      	ldr	r1, [r7, #8]
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 f87e 	bl	8002ff8 <I2C_IsErrorOccurred>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	f003 0320 	and.w	r3, r3, #32
 8002f10:	2b20      	cmp	r3, #32
 8002f12:	d13b      	bne.n	8002f8c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002f14:	7dfb      	ldrb	r3, [r7, #23]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d138      	bne.n	8002f8c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d105      	bne.n	8002f34 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f003 0310 	and.w	r3, r3, #16
 8002f3e:	2b10      	cmp	r3, #16
 8002f40:	d121      	bne.n	8002f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2210      	movs	r2, #16
 8002f48:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2204      	movs	r2, #4
 8002f4e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2220      	movs	r2, #32
 8002f56:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6859      	ldr	r1, [r3, #4]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	4b24      	ldr	r3, [pc, #144]	@ (8002ff4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002f64:	400b      	ands	r3, r1
 8002f66:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	75fb      	strb	r3, [r7, #23]
 8002f84:	e002      	b.n	8002f8c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002f8c:	f7fd fec8 	bl	8000d20 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d302      	bcc.n	8002fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d119      	bne.n	8002fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002fa2:	7dfb      	ldrb	r3, [r7, #23]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d116      	bne.n	8002fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d00f      	beq.n	8002fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fba:	f043 0220 	orr.w	r2, r3, #32
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d002      	beq.n	8002fea <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002fe4:	7dfb      	ldrb	r3, [r7, #23]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d083      	beq.n	8002ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	fe00e800 	.word	0xfe00e800

08002ff8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08a      	sub	sp, #40	@ 0x28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	2b00      	cmp	r3, #0
 8003022:	d068      	beq.n	80030f6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2210      	movs	r2, #16
 800302a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800302c:	e049      	b.n	80030c2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003034:	d045      	beq.n	80030c2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003036:	f7fd fe73 	bl	8000d20 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	429a      	cmp	r2, r3
 8003044:	d302      	bcc.n	800304c <I2C_IsErrorOccurred+0x54>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d13a      	bne.n	80030c2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003056:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800305e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800306a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800306e:	d121      	bne.n	80030b4 <I2C_IsErrorOccurred+0xbc>
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003076:	d01d      	beq.n	80030b4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003078:	7cfb      	ldrb	r3, [r7, #19]
 800307a:	2b20      	cmp	r3, #32
 800307c:	d01a      	beq.n	80030b4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800308c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800308e:	f7fd fe47 	bl	8000d20 <HAL_GetTick>
 8003092:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003094:	e00e      	b.n	80030b4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003096:	f7fd fe43 	bl	8000d20 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b19      	cmp	r3, #25
 80030a2:	d907      	bls.n	80030b4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	f043 0320 	orr.w	r3, r3, #32
 80030aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80030b2:	e006      	b.n	80030c2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	f003 0320 	and.w	r3, r3, #32
 80030be:	2b20      	cmp	r3, #32
 80030c0:	d1e9      	bne.n	8003096 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	f003 0320 	and.w	r3, r3, #32
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	d003      	beq.n	80030d8 <I2C_IsErrorOccurred+0xe0>
 80030d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0aa      	beq.n	800302e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80030d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d103      	bne.n	80030e8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2220      	movs	r2, #32
 80030e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	f043 0304 	orr.w	r3, r3, #4
 80030ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00b      	beq.n	8003120 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003118:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00b      	beq.n	8003142 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	f043 0308 	orr.w	r3, r3, #8
 8003130:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800313a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00b      	beq.n	8003164 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	f043 0302 	orr.w	r3, r3, #2
 8003152:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800315c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003164:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003168:	2b00      	cmp	r3, #0
 800316a:	d01c      	beq.n	80031a6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f7ff fd92 	bl	8002c96 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6859      	ldr	r1, [r3, #4]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	4b0d      	ldr	r3, [pc, #52]	@ (80031b4 <I2C_IsErrorOccurred+0x1bc>)
 800317e:	400b      	ands	r3, r1
 8003180:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	431a      	orrs	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2220      	movs	r2, #32
 8003192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80031a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3728      	adds	r7, #40	@ 0x28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	fe00e800 	.word	0xfe00e800

080031b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b087      	sub	sp, #28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	607b      	str	r3, [r7, #4]
 80031c2:	460b      	mov	r3, r1
 80031c4:	817b      	strh	r3, [r7, #10]
 80031c6:	4613      	mov	r3, r2
 80031c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031ca:	897b      	ldrh	r3, [r7, #10]
 80031cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031d0:	7a7b      	ldrb	r3, [r7, #9]
 80031d2:	041b      	lsls	r3, r3, #16
 80031d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80031e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	0d5b      	lsrs	r3, r3, #21
 80031f2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80031f6:	4b08      	ldr	r3, [pc, #32]	@ (8003218 <I2C_TransferConfig+0x60>)
 80031f8:	430b      	orrs	r3, r1
 80031fa:	43db      	mvns	r3, r3
 80031fc:	ea02 0103 	and.w	r1, r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	430a      	orrs	r2, r1
 8003208:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800320a:	bf00      	nop
 800320c:	371c      	adds	r7, #28
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	03ff63ff 	.word	0x03ff63ff

0800321c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003230:	4a39      	ldr	r2, [pc, #228]	@ (8003318 <I2C_Enable_IRQ+0xfc>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d032      	beq.n	800329c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800323a:	4a38      	ldr	r2, [pc, #224]	@ (800331c <I2C_Enable_IRQ+0x100>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d02d      	beq.n	800329c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003244:	4a36      	ldr	r2, [pc, #216]	@ (8003320 <I2C_Enable_IRQ+0x104>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d028      	beq.n	800329c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800324a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800324e:	2b00      	cmp	r3, #0
 8003250:	da03      	bge.n	800325a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003258:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800325a:	887b      	ldrh	r3, [r7, #2]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800326a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800326c:	887b      	ldrh	r3, [r7, #2]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800327c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800327e:	887b      	ldrh	r3, [r7, #2]
 8003280:	2b10      	cmp	r3, #16
 8003282:	d103      	bne.n	800328c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800328a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800328c:	887b      	ldrh	r3, [r7, #2]
 800328e:	2b20      	cmp	r3, #32
 8003290:	d133      	bne.n	80032fa <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f043 0320 	orr.w	r3, r3, #32
 8003298:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800329a:	e02e      	b.n	80032fa <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800329c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	da03      	bge.n	80032ac <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80032aa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80032ac:	887b      	ldrh	r3, [r7, #2]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80032bc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80032be:	887b      	ldrh	r3, [r7, #2]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80032ce:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80032d0:	887b      	ldrh	r3, [r7, #2]
 80032d2:	2b10      	cmp	r3, #16
 80032d4:	d103      	bne.n	80032de <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80032dc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80032de:	887b      	ldrh	r3, [r7, #2]
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	d103      	bne.n	80032ec <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80032ea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80032ec:	887b      	ldrh	r3, [r7, #2]
 80032ee:	2b40      	cmp	r3, #64	@ 0x40
 80032f0:	d103      	bne.n	80032fa <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032f8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6819      	ldr	r1, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	430a      	orrs	r2, r1
 8003308:	601a      	str	r2, [r3, #0]
}
 800330a:	bf00      	nop
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	08001d05 	.word	0x08001d05
 800331c:	08002181 	.word	0x08002181
 8003320:	08001ef9 	.word	0x08001ef9

08003324 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003334:	887b      	ldrh	r3, [r7, #2]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00f      	beq.n	800335e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003344:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800334c:	b2db      	uxtb	r3, r3
 800334e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003352:	2b28      	cmp	r3, #40	@ 0x28
 8003354:	d003      	beq.n	800335e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800335c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800335e:	887b      	ldrh	r3, [r7, #2]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00f      	beq.n	8003388 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800336e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003376:	b2db      	uxtb	r3, r3
 8003378:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800337c:	2b28      	cmp	r3, #40	@ 0x28
 800337e:	d003      	beq.n	8003388 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003386:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003388:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800338c:	2b00      	cmp	r3, #0
 800338e:	da03      	bge.n	8003398 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003396:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003398:	887b      	ldrh	r3, [r7, #2]
 800339a:	2b10      	cmp	r3, #16
 800339c:	d103      	bne.n	80033a6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80033a4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80033a6:	887b      	ldrh	r3, [r7, #2]
 80033a8:	2b20      	cmp	r3, #32
 80033aa:	d103      	bne.n	80033b4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f043 0320 	orr.w	r3, r3, #32
 80033b2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80033b4:	887b      	ldrh	r3, [r7, #2]
 80033b6:	2b40      	cmp	r3, #64	@ 0x40
 80033b8:	d103      	bne.n	80033c2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033c0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6819      	ldr	r1, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	43da      	mvns	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	400a      	ands	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]
}
 80033d4:	bf00      	nop
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b20      	cmp	r3, #32
 80033f4:	d138      	bne.n	8003468 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d101      	bne.n	8003404 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003400:	2302      	movs	r3, #2
 8003402:	e032      	b.n	800346a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2224      	movs	r2, #36	@ 0x24
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0201 	bic.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003432:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6819      	ldr	r1, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0201 	orr.w	r2, r2, #1
 8003452:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003464:	2300      	movs	r3, #0
 8003466:	e000      	b.n	800346a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003468:	2302      	movs	r3, #2
  }
}
 800346a:	4618      	mov	r0, r3
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003476:	b480      	push	{r7}
 8003478:	b085      	sub	sp, #20
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b20      	cmp	r3, #32
 800348a:	d139      	bne.n	8003500 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003492:	2b01      	cmp	r3, #1
 8003494:	d101      	bne.n	800349a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003496:	2302      	movs	r3, #2
 8003498:	e033      	b.n	8003502 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2224      	movs	r2, #36	@ 0x24
 80034a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0201 	bic.w	r2, r2, #1
 80034b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80034c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	021b      	lsls	r3, r3, #8
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0201 	orr.w	r2, r2, #1
 80034ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	e000      	b.n	8003502 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003500:	2302      	movs	r3, #2
  }
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
	...

08003510 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003516:	af00      	add	r7, sp, #0
 8003518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800351c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003520:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003526:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	f001 b823 	b.w	800457c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800353a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 817d 	beq.w	8003846 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800354c:	4bbc      	ldr	r3, [pc, #752]	@ (8003840 <HAL_RCC_OscConfig+0x330>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 030c 	and.w	r3, r3, #12
 8003554:	2b04      	cmp	r3, #4
 8003556:	d00c      	beq.n	8003572 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003558:	4bb9      	ldr	r3, [pc, #740]	@ (8003840 <HAL_RCC_OscConfig+0x330>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f003 030c 	and.w	r3, r3, #12
 8003560:	2b08      	cmp	r3, #8
 8003562:	d15c      	bne.n	800361e <HAL_RCC_OscConfig+0x10e>
 8003564:	4bb6      	ldr	r3, [pc, #728]	@ (8003840 <HAL_RCC_OscConfig+0x330>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800356c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003570:	d155      	bne.n	800361e <HAL_RCC_OscConfig+0x10e>
 8003572:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003576:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800357e:	fa93 f3a3 	rbit	r3, r3
 8003582:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003586:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800358a:	fab3 f383 	clz	r3, r3
 800358e:	b2db      	uxtb	r3, r3
 8003590:	095b      	lsrs	r3, r3, #5
 8003592:	b2db      	uxtb	r3, r3
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b01      	cmp	r3, #1
 800359c:	d102      	bne.n	80035a4 <HAL_RCC_OscConfig+0x94>
 800359e:	4ba8      	ldr	r3, [pc, #672]	@ (8003840 <HAL_RCC_OscConfig+0x330>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	e015      	b.n	80035d0 <HAL_RCC_OscConfig+0xc0>
 80035a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035a8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ac:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80035b0:	fa93 f3a3 	rbit	r3, r3
 80035b4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80035b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035bc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80035c0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80035c4:	fa93 f3a3 	rbit	r3, r3
 80035c8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80035cc:	4b9c      	ldr	r3, [pc, #624]	@ (8003840 <HAL_RCC_OscConfig+0x330>)
 80035ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80035d4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80035d8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80035dc:	fa92 f2a2 	rbit	r2, r2
 80035e0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80035e4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80035e8:	fab2 f282 	clz	r2, r2
 80035ec:	b2d2      	uxtb	r2, r2
 80035ee:	f042 0220 	orr.w	r2, r2, #32
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	f002 021f 	and.w	r2, r2, #31
 80035f8:	2101      	movs	r1, #1
 80035fa:	fa01 f202 	lsl.w	r2, r1, r2
 80035fe:	4013      	ands	r3, r2
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 811f 	beq.w	8003844 <HAL_RCC_OscConfig+0x334>
 8003606:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800360a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	f040 8116 	bne.w	8003844 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	f000 bfaf 	b.w	800457c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800361e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003622:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800362e:	d106      	bne.n	800363e <HAL_RCC_OscConfig+0x12e>
 8003630:	4b83      	ldr	r3, [pc, #524]	@ (8003840 <HAL_RCC_OscConfig+0x330>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a82      	ldr	r2, [pc, #520]	@ (8003840 <HAL_RCC_OscConfig+0x330>)
 8003636:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	e036      	b.n	80036ac <HAL_RCC_OscConfig+0x19c>
 800363e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003642:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10c      	bne.n	8003668 <HAL_RCC_OscConfig+0x158>
 800364e:	4b7c      	ldr	r3, [pc, #496]	@ (8003840 <HAL_RCC_OscConfig+0x330>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a7b      	ldr	r2, [pc, #492]	@ (8003840 <HAL_RCC_OscConfig+0x330>)
 8003654:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	4b79      	ldr	r3, [pc, #484]	@ (8003840 <HAL_RCC_OscConfig+0x330>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a78      	ldr	r2, [pc, #480]	@ (8003840 <HAL_RCC_OscConfig+0x330>)
 8003660:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	e021      	b.n	80036ac <HAL_RCC_OscConfig+0x19c>
 8003668:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800366c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003678:	d10c      	bne.n	8003694 <HAL_RCC_OscConfig+0x184>
 800367a:	4b71      	ldr	r3, [pc, #452]	@ (8003840 <HAL_RCC_OscConfig+0x330>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a70      	ldr	r2, [pc, #448]	@ (8003840 <HAL_RCC_OscConfig+0x330>)
 8003680:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003684:	6013      	str	r3, [r2, #0]
 8003686:	4b6e      	ldr	r3, [pc, #440]	@ (8003840 <HAL_RCC_OscConfig+0x330>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a6d      	ldr	r2, [pc, #436]	@ (8003840 <HAL_RCC_OscConfig+0x330>)
 800368c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	e00b      	b.n	80036ac <HAL_RCC_OscConfig+0x19c>
 8003694:	4b6a      	ldr	r3, [pc, #424]	@ (8003840 <HAL_RCC_OscConfig+0x330>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a69      	ldr	r2, [pc, #420]	@ (8003840 <HAL_RCC_OscConfig+0x330>)
 800369a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	4b67      	ldr	r3, [pc, #412]	@ (8003840 <HAL_RCC_OscConfig+0x330>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a66      	ldr	r2, [pc, #408]	@ (8003840 <HAL_RCC_OscConfig+0x330>)
 80036a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036aa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036ac:	4b64      	ldr	r3, [pc, #400]	@ (8003840 <HAL_RCC_OscConfig+0x330>)
 80036ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b0:	f023 020f 	bic.w	r2, r3, #15
 80036b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	495f      	ldr	r1, [pc, #380]	@ (8003840 <HAL_RCC_OscConfig+0x330>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d059      	beq.n	800378a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d6:	f7fd fb23 	bl	8000d20 <HAL_GetTick>
 80036da:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036de:	e00a      	b.n	80036f6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036e0:	f7fd fb1e 	bl	8000d20 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b64      	cmp	r3, #100	@ 0x64
 80036ee:	d902      	bls.n	80036f6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	f000 bf43 	b.w	800457c <HAL_RCC_OscConfig+0x106c>
 80036f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036fa:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003702:	fa93 f3a3 	rbit	r3, r3
 8003706:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800370a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370e:	fab3 f383 	clz	r3, r3
 8003712:	b2db      	uxtb	r3, r3
 8003714:	095b      	lsrs	r3, r3, #5
 8003716:	b2db      	uxtb	r3, r3
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b01      	cmp	r3, #1
 8003720:	d102      	bne.n	8003728 <HAL_RCC_OscConfig+0x218>
 8003722:	4b47      	ldr	r3, [pc, #284]	@ (8003840 <HAL_RCC_OscConfig+0x330>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	e015      	b.n	8003754 <HAL_RCC_OscConfig+0x244>
 8003728:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800372c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003730:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003734:	fa93 f3a3 	rbit	r3, r3
 8003738:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800373c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003740:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003744:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003748:	fa93 f3a3 	rbit	r3, r3
 800374c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003750:	4b3b      	ldr	r3, [pc, #236]	@ (8003840 <HAL_RCC_OscConfig+0x330>)
 8003752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003754:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003758:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800375c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003760:	fa92 f2a2 	rbit	r2, r2
 8003764:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003768:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800376c:	fab2 f282 	clz	r2, r2
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	f042 0220 	orr.w	r2, r2, #32
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	f002 021f 	and.w	r2, r2, #31
 800377c:	2101      	movs	r1, #1
 800377e:	fa01 f202 	lsl.w	r2, r1, r2
 8003782:	4013      	ands	r3, r2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0ab      	beq.n	80036e0 <HAL_RCC_OscConfig+0x1d0>
 8003788:	e05d      	b.n	8003846 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378a:	f7fd fac9 	bl	8000d20 <HAL_GetTick>
 800378e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003792:	e00a      	b.n	80037aa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003794:	f7fd fac4 	bl	8000d20 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b64      	cmp	r3, #100	@ 0x64
 80037a2:	d902      	bls.n	80037aa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	f000 bee9 	b.w	800457c <HAL_RCC_OscConfig+0x106c>
 80037aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037ae:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80037b6:	fa93 f3a3 	rbit	r3, r3
 80037ba:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80037be:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037c2:	fab3 f383 	clz	r3, r3
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	095b      	lsrs	r3, r3, #5
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d102      	bne.n	80037dc <HAL_RCC_OscConfig+0x2cc>
 80037d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003840 <HAL_RCC_OscConfig+0x330>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	e015      	b.n	8003808 <HAL_RCC_OscConfig+0x2f8>
 80037dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037e0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80037e8:	fa93 f3a3 	rbit	r3, r3
 80037ec:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80037f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037f4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80037f8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80037fc:	fa93 f3a3 	rbit	r3, r3
 8003800:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003804:	4b0e      	ldr	r3, [pc, #56]	@ (8003840 <HAL_RCC_OscConfig+0x330>)
 8003806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003808:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800380c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003810:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003814:	fa92 f2a2 	rbit	r2, r2
 8003818:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800381c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003820:	fab2 f282 	clz	r2, r2
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	f042 0220 	orr.w	r2, r2, #32
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	f002 021f 	and.w	r2, r2, #31
 8003830:	2101      	movs	r1, #1
 8003832:	fa01 f202 	lsl.w	r2, r1, r2
 8003836:	4013      	ands	r3, r2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1ab      	bne.n	8003794 <HAL_RCC_OscConfig+0x284>
 800383c:	e003      	b.n	8003846 <HAL_RCC_OscConfig+0x336>
 800383e:	bf00      	nop
 8003840:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800384a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 817d 	beq.w	8003b56 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800385c:	4ba6      	ldr	r3, [pc, #664]	@ (8003af8 <HAL_RCC_OscConfig+0x5e8>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 030c 	and.w	r3, r3, #12
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00b      	beq.n	8003880 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003868:	4ba3      	ldr	r3, [pc, #652]	@ (8003af8 <HAL_RCC_OscConfig+0x5e8>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 030c 	and.w	r3, r3, #12
 8003870:	2b08      	cmp	r3, #8
 8003872:	d172      	bne.n	800395a <HAL_RCC_OscConfig+0x44a>
 8003874:	4ba0      	ldr	r3, [pc, #640]	@ (8003af8 <HAL_RCC_OscConfig+0x5e8>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d16c      	bne.n	800395a <HAL_RCC_OscConfig+0x44a>
 8003880:	2302      	movs	r3, #2
 8003882:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003886:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800388a:	fa93 f3a3 	rbit	r3, r3
 800388e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003892:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003896:	fab3 f383 	clz	r3, r3
 800389a:	b2db      	uxtb	r3, r3
 800389c:	095b      	lsrs	r3, r3, #5
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d102      	bne.n	80038b0 <HAL_RCC_OscConfig+0x3a0>
 80038aa:	4b93      	ldr	r3, [pc, #588]	@ (8003af8 <HAL_RCC_OscConfig+0x5e8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	e013      	b.n	80038d8 <HAL_RCC_OscConfig+0x3c8>
 80038b0:	2302      	movs	r3, #2
 80038b2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80038ba:	fa93 f3a3 	rbit	r3, r3
 80038be:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80038c2:	2302      	movs	r3, #2
 80038c4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80038c8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80038cc:	fa93 f3a3 	rbit	r3, r3
 80038d0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80038d4:	4b88      	ldr	r3, [pc, #544]	@ (8003af8 <HAL_RCC_OscConfig+0x5e8>)
 80038d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d8:	2202      	movs	r2, #2
 80038da:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80038de:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80038e2:	fa92 f2a2 	rbit	r2, r2
 80038e6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80038ea:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80038ee:	fab2 f282 	clz	r2, r2
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	f042 0220 	orr.w	r2, r2, #32
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	f002 021f 	and.w	r2, r2, #31
 80038fe:	2101      	movs	r1, #1
 8003900:	fa01 f202 	lsl.w	r2, r1, r2
 8003904:	4013      	ands	r3, r2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00a      	beq.n	8003920 <HAL_RCC_OscConfig+0x410>
 800390a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800390e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d002      	beq.n	8003920 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	f000 be2e 	b.w	800457c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003920:	4b75      	ldr	r3, [pc, #468]	@ (8003af8 <HAL_RCC_OscConfig+0x5e8>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003928:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800392c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	21f8      	movs	r1, #248	@ 0xf8
 8003936:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800393e:	fa91 f1a1 	rbit	r1, r1
 8003942:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003946:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800394a:	fab1 f181 	clz	r1, r1
 800394e:	b2c9      	uxtb	r1, r1
 8003950:	408b      	lsls	r3, r1
 8003952:	4969      	ldr	r1, [pc, #420]	@ (8003af8 <HAL_RCC_OscConfig+0x5e8>)
 8003954:	4313      	orrs	r3, r2
 8003956:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003958:	e0fd      	b.n	8003b56 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800395a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800395e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 8088 	beq.w	8003a7c <HAL_RCC_OscConfig+0x56c>
 800396c:	2301      	movs	r3, #1
 800396e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003972:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003976:	fa93 f3a3 	rbit	r3, r3
 800397a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800397e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003982:	fab3 f383 	clz	r3, r3
 8003986:	b2db      	uxtb	r3, r3
 8003988:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800398c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	461a      	mov	r2, r3
 8003994:	2301      	movs	r3, #1
 8003996:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003998:	f7fd f9c2 	bl	8000d20 <HAL_GetTick>
 800399c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a0:	e00a      	b.n	80039b8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039a2:	f7fd f9bd 	bl	8000d20 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d902      	bls.n	80039b8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	f000 bde2 	b.w	800457c <HAL_RCC_OscConfig+0x106c>
 80039b8:	2302      	movs	r3, #2
 80039ba:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039be:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80039c2:	fa93 f3a3 	rbit	r3, r3
 80039c6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80039ca:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ce:	fab3 f383 	clz	r3, r3
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	095b      	lsrs	r3, r3, #5
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d102      	bne.n	80039e8 <HAL_RCC_OscConfig+0x4d8>
 80039e2:	4b45      	ldr	r3, [pc, #276]	@ (8003af8 <HAL_RCC_OscConfig+0x5e8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	e013      	b.n	8003a10 <HAL_RCC_OscConfig+0x500>
 80039e8:	2302      	movs	r3, #2
 80039ea:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ee:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80039f2:	fa93 f3a3 	rbit	r3, r3
 80039f6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80039fa:	2302      	movs	r3, #2
 80039fc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003a00:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003a04:	fa93 f3a3 	rbit	r3, r3
 8003a08:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8003af8 <HAL_RCC_OscConfig+0x5e8>)
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a10:	2202      	movs	r2, #2
 8003a12:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003a16:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003a1a:	fa92 f2a2 	rbit	r2, r2
 8003a1e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003a22:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003a26:	fab2 f282 	clz	r2, r2
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	f042 0220 	orr.w	r2, r2, #32
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	f002 021f 	and.w	r2, r2, #31
 8003a36:	2101      	movs	r1, #1
 8003a38:	fa01 f202 	lsl.w	r2, r1, r2
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0af      	beq.n	80039a2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a42:	4b2d      	ldr	r3, [pc, #180]	@ (8003af8 <HAL_RCC_OscConfig+0x5e8>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	21f8      	movs	r1, #248	@ 0xf8
 8003a58:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003a60:	fa91 f1a1 	rbit	r1, r1
 8003a64:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003a68:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003a6c:	fab1 f181 	clz	r1, r1
 8003a70:	b2c9      	uxtb	r1, r1
 8003a72:	408b      	lsls	r3, r1
 8003a74:	4920      	ldr	r1, [pc, #128]	@ (8003af8 <HAL_RCC_OscConfig+0x5e8>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	600b      	str	r3, [r1, #0]
 8003a7a:	e06c      	b.n	8003b56 <HAL_RCC_OscConfig+0x646>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a82:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003a86:	fa93 f3a3 	rbit	r3, r3
 8003a8a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003a8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a92:	fab3 f383 	clz	r3, r3
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003a9c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa8:	f7fd f93a 	bl	8000d20 <HAL_GetTick>
 8003aac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab0:	e00a      	b.n	8003ac8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ab2:	f7fd f935 	bl	8000d20 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d902      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	f000 bd5a 	b.w	800457c <HAL_RCC_OscConfig+0x106c>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ace:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003ad2:	fa93 f3a3 	rbit	r3, r3
 8003ad6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ade:	fab3 f383 	clz	r3, r3
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	095b      	lsrs	r3, r3, #5
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d104      	bne.n	8003afc <HAL_RCC_OscConfig+0x5ec>
 8003af2:	4b01      	ldr	r3, [pc, #4]	@ (8003af8 <HAL_RCC_OscConfig+0x5e8>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	e015      	b.n	8003b24 <HAL_RCC_OscConfig+0x614>
 8003af8:	40021000 	.word	0x40021000
 8003afc:	2302      	movs	r3, #2
 8003afe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b02:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003b06:	fa93 f3a3 	rbit	r3, r3
 8003b0a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003b0e:	2302      	movs	r3, #2
 8003b10:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003b14:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003b18:	fa93 f3a3 	rbit	r3, r3
 8003b1c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003b20:	4bc8      	ldr	r3, [pc, #800]	@ (8003e44 <HAL_RCC_OscConfig+0x934>)
 8003b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b24:	2202      	movs	r2, #2
 8003b26:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003b2a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003b2e:	fa92 f2a2 	rbit	r2, r2
 8003b32:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003b36:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003b3a:	fab2 f282 	clz	r2, r2
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	f042 0220 	orr.w	r2, r2, #32
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	f002 021f 	and.w	r2, r2, #31
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b50:	4013      	ands	r3, r2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1ad      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 8110 	beq.w	8003d8c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d079      	beq.n	8003c70 <HAL_RCC_OscConfig+0x760>
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b82:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003b86:	fa93 f3a3 	rbit	r3, r3
 8003b8a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b92:	fab3 f383 	clz	r3, r3
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4bab      	ldr	r3, [pc, #684]	@ (8003e48 <HAL_RCC_OscConfig+0x938>)
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba6:	f7fd f8bb 	bl	8000d20 <HAL_GetTick>
 8003baa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bae:	e00a      	b.n	8003bc6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bb0:	f7fd f8b6 	bl	8000d20 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d902      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	f000 bcdb 	b.w	800457c <HAL_RCC_OscConfig+0x106c>
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bcc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003bd0:	fa93 f3a3 	rbit	r3, r3
 8003bd4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003bd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bdc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003be0:	2202      	movs	r2, #2
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003be8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	fa93 f2a3 	rbit	r2, r3
 8003bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c04:	2202      	movs	r2, #2
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	fa93 f2a3 	rbit	r2, r3
 8003c16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c1a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003c1e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c20:	4b88      	ldr	r3, [pc, #544]	@ (8003e44 <HAL_RCC_OscConfig+0x934>)
 8003c22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c28:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003c2c:	2102      	movs	r1, #2
 8003c2e:	6019      	str	r1, [r3, #0]
 8003c30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c34:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	fa93 f1a3 	rbit	r1, r3
 8003c3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c42:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003c46:	6019      	str	r1, [r3, #0]
  return result;
 8003c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c4c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	fab3 f383 	clz	r3, r3
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	f003 031f 	and.w	r3, r3, #31
 8003c62:	2101      	movs	r1, #1
 8003c64:	fa01 f303 	lsl.w	r3, r1, r3
 8003c68:	4013      	ands	r3, r2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0a0      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x6a0>
 8003c6e:	e08d      	b.n	8003d8c <HAL_RCC_OscConfig+0x87c>
 8003c70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c74:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003c78:	2201      	movs	r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c80:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	fa93 f2a3 	rbit	r2, r3
 8003c8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c8e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003c92:	601a      	str	r2, [r3, #0]
  return result;
 8003c94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c98:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003c9c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c9e:	fab3 f383 	clz	r3, r3
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4b68      	ldr	r3, [pc, #416]	@ (8003e48 <HAL_RCC_OscConfig+0x938>)
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	461a      	mov	r2, r3
 8003cae:	2300      	movs	r3, #0
 8003cb0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb2:	f7fd f835 	bl	8000d20 <HAL_GetTick>
 8003cb6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cba:	e00a      	b.n	8003cd2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cbc:	f7fd f830 	bl	8000d20 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d902      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	f000 bc55 	b.w	800457c <HAL_RCC_OscConfig+0x106c>
 8003cd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cd6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003cda:	2202      	movs	r2, #2
 8003cdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ce2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	fa93 f2a3 	rbit	r2, r3
 8003cec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cf0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cfa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003cfe:	2202      	movs	r2, #2
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d06:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	fa93 f2a3 	rbit	r2, r3
 8003d10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d14:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d1e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003d22:	2202      	movs	r2, #2
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d2a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	fa93 f2a3 	rbit	r2, r3
 8003d34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d38:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003d3c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d3e:	4b41      	ldr	r3, [pc, #260]	@ (8003e44 <HAL_RCC_OscConfig+0x934>)
 8003d40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d46:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003d4a:	2102      	movs	r1, #2
 8003d4c:	6019      	str	r1, [r3, #0]
 8003d4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d52:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	fa93 f1a3 	rbit	r1, r3
 8003d5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d60:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003d64:	6019      	str	r1, [r3, #0]
  return result;
 8003d66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d6a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	fab3 f383 	clz	r3, r3
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	f003 031f 	and.w	r3, r3, #31
 8003d80:	2101      	movs	r1, #1
 8003d82:	fa01 f303 	lsl.w	r3, r1, r3
 8003d86:	4013      	ands	r3, r2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d197      	bne.n	8003cbc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d90:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 81a1 	beq.w	80040e4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003da2:	2300      	movs	r3, #0
 8003da4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003da8:	4b26      	ldr	r3, [pc, #152]	@ (8003e44 <HAL_RCC_OscConfig+0x934>)
 8003daa:	69db      	ldr	r3, [r3, #28]
 8003dac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d116      	bne.n	8003de2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db4:	4b23      	ldr	r3, [pc, #140]	@ (8003e44 <HAL_RCC_OscConfig+0x934>)
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	4a22      	ldr	r2, [pc, #136]	@ (8003e44 <HAL_RCC_OscConfig+0x934>)
 8003dba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dbe:	61d3      	str	r3, [r2, #28]
 8003dc0:	4b20      	ldr	r3, [pc, #128]	@ (8003e44 <HAL_RCC_OscConfig+0x934>)
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003dc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dcc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dd6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003dda:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de2:	4b1a      	ldr	r3, [pc, #104]	@ (8003e4c <HAL_RCC_OscConfig+0x93c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d11a      	bne.n	8003e24 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dee:	4b17      	ldr	r3, [pc, #92]	@ (8003e4c <HAL_RCC_OscConfig+0x93c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a16      	ldr	r2, [pc, #88]	@ (8003e4c <HAL_RCC_OscConfig+0x93c>)
 8003df4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003df8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dfa:	f7fc ff91 	bl	8000d20 <HAL_GetTick>
 8003dfe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e02:	e009      	b.n	8003e18 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e04:	f7fc ff8c 	bl	8000d20 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b64      	cmp	r3, #100	@ 0x64
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e3b1      	b.n	800457c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e18:	4b0c      	ldr	r3, [pc, #48]	@ (8003e4c <HAL_RCC_OscConfig+0x93c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0ef      	beq.n	8003e04 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d10d      	bne.n	8003e50 <HAL_RCC_OscConfig+0x940>
 8003e34:	4b03      	ldr	r3, [pc, #12]	@ (8003e44 <HAL_RCC_OscConfig+0x934>)
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	4a02      	ldr	r2, [pc, #8]	@ (8003e44 <HAL_RCC_OscConfig+0x934>)
 8003e3a:	f043 0301 	orr.w	r3, r3, #1
 8003e3e:	6213      	str	r3, [r2, #32]
 8003e40:	e03c      	b.n	8003ebc <HAL_RCC_OscConfig+0x9ac>
 8003e42:	bf00      	nop
 8003e44:	40021000 	.word	0x40021000
 8003e48:	10908120 	.word	0x10908120
 8003e4c:	40007000 	.word	0x40007000
 8003e50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10c      	bne.n	8003e7a <HAL_RCC_OscConfig+0x96a>
 8003e60:	4bc1      	ldr	r3, [pc, #772]	@ (8004168 <HAL_RCC_OscConfig+0xc58>)
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	4ac0      	ldr	r2, [pc, #768]	@ (8004168 <HAL_RCC_OscConfig+0xc58>)
 8003e66:	f023 0301 	bic.w	r3, r3, #1
 8003e6a:	6213      	str	r3, [r2, #32]
 8003e6c:	4bbe      	ldr	r3, [pc, #760]	@ (8004168 <HAL_RCC_OscConfig+0xc58>)
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	4abd      	ldr	r2, [pc, #756]	@ (8004168 <HAL_RCC_OscConfig+0xc58>)
 8003e72:	f023 0304 	bic.w	r3, r3, #4
 8003e76:	6213      	str	r3, [r2, #32]
 8003e78:	e020      	b.n	8003ebc <HAL_RCC_OscConfig+0x9ac>
 8003e7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	2b05      	cmp	r3, #5
 8003e88:	d10c      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x994>
 8003e8a:	4bb7      	ldr	r3, [pc, #732]	@ (8004168 <HAL_RCC_OscConfig+0xc58>)
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	4ab6      	ldr	r2, [pc, #728]	@ (8004168 <HAL_RCC_OscConfig+0xc58>)
 8003e90:	f043 0304 	orr.w	r3, r3, #4
 8003e94:	6213      	str	r3, [r2, #32]
 8003e96:	4bb4      	ldr	r3, [pc, #720]	@ (8004168 <HAL_RCC_OscConfig+0xc58>)
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	4ab3      	ldr	r2, [pc, #716]	@ (8004168 <HAL_RCC_OscConfig+0xc58>)
 8003e9c:	f043 0301 	orr.w	r3, r3, #1
 8003ea0:	6213      	str	r3, [r2, #32]
 8003ea2:	e00b      	b.n	8003ebc <HAL_RCC_OscConfig+0x9ac>
 8003ea4:	4bb0      	ldr	r3, [pc, #704]	@ (8004168 <HAL_RCC_OscConfig+0xc58>)
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	4aaf      	ldr	r2, [pc, #700]	@ (8004168 <HAL_RCC_OscConfig+0xc58>)
 8003eaa:	f023 0301 	bic.w	r3, r3, #1
 8003eae:	6213      	str	r3, [r2, #32]
 8003eb0:	4bad      	ldr	r3, [pc, #692]	@ (8004168 <HAL_RCC_OscConfig+0xc58>)
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	4aac      	ldr	r2, [pc, #688]	@ (8004168 <HAL_RCC_OscConfig+0xc58>)
 8003eb6:	f023 0304 	bic.w	r3, r3, #4
 8003eba:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ebc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ec0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 8081 	beq.w	8003fd0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ece:	f7fc ff27 	bl	8000d20 <HAL_GetTick>
 8003ed2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed6:	e00b      	b.n	8003ef0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed8:	f7fc ff22 	bl	8000d20 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e345      	b.n	800457c <HAL_RCC_OscConfig+0x106c>
 8003ef0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ef4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003ef8:	2202      	movs	r2, #2
 8003efa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f00:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	fa93 f2a3 	rbit	r2, r3
 8003f0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f0e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f18:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f24:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	fa93 f2a3 	rbit	r2, r3
 8003f2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f32:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003f36:	601a      	str	r2, [r3, #0]
  return result;
 8003f38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f3c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003f40:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f42:	fab3 f383 	clz	r3, r3
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	095b      	lsrs	r3, r3, #5
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	f043 0302 	orr.w	r3, r3, #2
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d102      	bne.n	8003f5c <HAL_RCC_OscConfig+0xa4c>
 8003f56:	4b84      	ldr	r3, [pc, #528]	@ (8004168 <HAL_RCC_OscConfig+0xc58>)
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	e013      	b.n	8003f84 <HAL_RCC_OscConfig+0xa74>
 8003f5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f60:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003f64:	2202      	movs	r2, #2
 8003f66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f6c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	fa93 f2a3 	rbit	r2, r3
 8003f76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f7a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	4b79      	ldr	r3, [pc, #484]	@ (8004168 <HAL_RCC_OscConfig+0xc58>)
 8003f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f84:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f88:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003f8c:	2102      	movs	r1, #2
 8003f8e:	6011      	str	r1, [r2, #0]
 8003f90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f94:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003f98:	6812      	ldr	r2, [r2, #0]
 8003f9a:	fa92 f1a2 	rbit	r1, r2
 8003f9e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fa2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003fa6:	6011      	str	r1, [r2, #0]
  return result;
 8003fa8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fac:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003fb0:	6812      	ldr	r2, [r2, #0]
 8003fb2:	fab2 f282 	clz	r2, r2
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	f002 021f 	and.w	r2, r2, #31
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8003fc8:	4013      	ands	r3, r2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d084      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x9c8>
 8003fce:	e07f      	b.n	80040d0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd0:	f7fc fea6 	bl	8000d20 <HAL_GetTick>
 8003fd4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd8:	e00b      	b.n	8003ff2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fda:	f7fc fea1 	bl	8000d20 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e2c4      	b.n	800457c <HAL_RCC_OscConfig+0x106c>
 8003ff2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ff6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004002:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	fa93 f2a3 	rbit	r2, r3
 800400c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004010:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800401a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800401e:	2202      	movs	r2, #2
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004026:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	fa93 f2a3 	rbit	r2, r3
 8004030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004034:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004038:	601a      	str	r2, [r3, #0]
  return result;
 800403a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800403e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004042:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004044:	fab3 f383 	clz	r3, r3
 8004048:	b2db      	uxtb	r3, r3
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	b2db      	uxtb	r3, r3
 800404e:	f043 0302 	orr.w	r3, r3, #2
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d102      	bne.n	800405e <HAL_RCC_OscConfig+0xb4e>
 8004058:	4b43      	ldr	r3, [pc, #268]	@ (8004168 <HAL_RCC_OscConfig+0xc58>)
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	e013      	b.n	8004086 <HAL_RCC_OscConfig+0xb76>
 800405e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004062:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004066:	2202      	movs	r2, #2
 8004068:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800406e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	fa93 f2a3 	rbit	r2, r3
 8004078:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800407c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	4b39      	ldr	r3, [pc, #228]	@ (8004168 <HAL_RCC_OscConfig+0xc58>)
 8004084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004086:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800408a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800408e:	2102      	movs	r1, #2
 8004090:	6011      	str	r1, [r2, #0]
 8004092:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004096:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800409a:	6812      	ldr	r2, [r2, #0]
 800409c:	fa92 f1a2 	rbit	r1, r2
 80040a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040a4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80040a8:	6011      	str	r1, [r2, #0]
  return result;
 80040aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040ae:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	fab2 f282 	clz	r2, r2
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	f002 021f 	and.w	r2, r2, #31
 80040c4:	2101      	movs	r1, #1
 80040c6:	fa01 f202 	lsl.w	r2, r1, r2
 80040ca:	4013      	ands	r3, r2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d184      	bne.n	8003fda <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040d0:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d105      	bne.n	80040e4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d8:	4b23      	ldr	r3, [pc, #140]	@ (8004168 <HAL_RCC_OscConfig+0xc58>)
 80040da:	69db      	ldr	r3, [r3, #28]
 80040dc:	4a22      	ldr	r2, [pc, #136]	@ (8004168 <HAL_RCC_OscConfig+0xc58>)
 80040de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040e2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 8242 	beq.w	800457a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040f6:	4b1c      	ldr	r3, [pc, #112]	@ (8004168 <HAL_RCC_OscConfig+0xc58>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f003 030c 	and.w	r3, r3, #12
 80040fe:	2b08      	cmp	r3, #8
 8004100:	f000 8213 	beq.w	800452a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004108:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	2b02      	cmp	r3, #2
 8004112:	f040 8162 	bne.w	80043da <HAL_RCC_OscConfig+0xeca>
 8004116:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800411a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800411e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004122:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004124:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004128:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	fa93 f2a3 	rbit	r2, r3
 8004132:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004136:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800413a:	601a      	str	r2, [r3, #0]
  return result;
 800413c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004140:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004144:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004146:	fab3 f383 	clz	r3, r3
 800414a:	b2db      	uxtb	r3, r3
 800414c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004150:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	461a      	mov	r2, r3
 8004158:	2300      	movs	r3, #0
 800415a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415c:	f7fc fde0 	bl	8000d20 <HAL_GetTick>
 8004160:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004164:	e00c      	b.n	8004180 <HAL_RCC_OscConfig+0xc70>
 8004166:	bf00      	nop
 8004168:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800416c:	f7fc fdd8 	bl	8000d20 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e1fd      	b.n	800457c <HAL_RCC_OscConfig+0x106c>
 8004180:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004184:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004188:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800418c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004192:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	fa93 f2a3 	rbit	r2, r3
 800419c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041a0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80041a4:	601a      	str	r2, [r3, #0]
  return result;
 80041a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041aa:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80041ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041b0:	fab3 f383 	clz	r3, r3
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	f043 0301 	orr.w	r3, r3, #1
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d102      	bne.n	80041ca <HAL_RCC_OscConfig+0xcba>
 80041c4:	4bb0      	ldr	r3, [pc, #704]	@ (8004488 <HAL_RCC_OscConfig+0xf78>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	e027      	b.n	800421a <HAL_RCC_OscConfig+0xd0a>
 80041ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041ce:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80041d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041dc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	fa93 f2a3 	rbit	r2, r3
 80041e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041ea:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041f4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80041f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004202:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	fa93 f2a3 	rbit	r2, r3
 800420c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004210:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	4b9c      	ldr	r3, [pc, #624]	@ (8004488 <HAL_RCC_OscConfig+0xf78>)
 8004218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800421e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004222:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004226:	6011      	str	r1, [r2, #0]
 8004228:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800422c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004230:	6812      	ldr	r2, [r2, #0]
 8004232:	fa92 f1a2 	rbit	r1, r2
 8004236:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800423a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800423e:	6011      	str	r1, [r2, #0]
  return result;
 8004240:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004244:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004248:	6812      	ldr	r2, [r2, #0]
 800424a:	fab2 f282 	clz	r2, r2
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	f042 0220 	orr.w	r2, r2, #32
 8004254:	b2d2      	uxtb	r2, r2
 8004256:	f002 021f 	and.w	r2, r2, #31
 800425a:	2101      	movs	r1, #1
 800425c:	fa01 f202 	lsl.w	r2, r1, r2
 8004260:	4013      	ands	r3, r2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d182      	bne.n	800416c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004266:	4b88      	ldr	r3, [pc, #544]	@ (8004488 <HAL_RCC_OscConfig+0xf78>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800426e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004272:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800427a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800427e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	430b      	orrs	r3, r1
 8004288:	497f      	ldr	r1, [pc, #508]	@ (8004488 <HAL_RCC_OscConfig+0xf78>)
 800428a:	4313      	orrs	r3, r2
 800428c:	604b      	str	r3, [r1, #4]
 800428e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004292:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004296:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800429a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042a0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	fa93 f2a3 	rbit	r2, r3
 80042aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042ae:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80042b2:	601a      	str	r2, [r3, #0]
  return result;
 80042b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042b8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80042bc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042be:	fab3 f383 	clz	r3, r3
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80042c8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	461a      	mov	r2, r3
 80042d0:	2301      	movs	r3, #1
 80042d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d4:	f7fc fd24 	bl	8000d20 <HAL_GetTick>
 80042d8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042dc:	e009      	b.n	80042f2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042de:	f7fc fd1f 	bl	8000d20 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e144      	b.n	800457c <HAL_RCC_OscConfig+0x106c>
 80042f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042f6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80042fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80042fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004300:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004304:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	fa93 f2a3 	rbit	r2, r3
 800430e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004312:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004316:	601a      	str	r2, [r3, #0]
  return result;
 8004318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800431c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004320:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004322:	fab3 f383 	clz	r3, r3
 8004326:	b2db      	uxtb	r3, r3
 8004328:	095b      	lsrs	r3, r3, #5
 800432a:	b2db      	uxtb	r3, r3
 800432c:	f043 0301 	orr.w	r3, r3, #1
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b01      	cmp	r3, #1
 8004334:	d102      	bne.n	800433c <HAL_RCC_OscConfig+0xe2c>
 8004336:	4b54      	ldr	r3, [pc, #336]	@ (8004488 <HAL_RCC_OscConfig+0xf78>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	e027      	b.n	800438c <HAL_RCC_OscConfig+0xe7c>
 800433c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004340:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004344:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004348:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800434e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	fa93 f2a3 	rbit	r2, r3
 8004358:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800435c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004366:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800436a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004374:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	fa93 f2a3 	rbit	r2, r3
 800437e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004382:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	4b3f      	ldr	r3, [pc, #252]	@ (8004488 <HAL_RCC_OscConfig+0xf78>)
 800438a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004390:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004394:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004398:	6011      	str	r1, [r2, #0]
 800439a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800439e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80043a2:	6812      	ldr	r2, [r2, #0]
 80043a4:	fa92 f1a2 	rbit	r1, r2
 80043a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043ac:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80043b0:	6011      	str	r1, [r2, #0]
  return result;
 80043b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043b6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80043ba:	6812      	ldr	r2, [r2, #0]
 80043bc:	fab2 f282 	clz	r2, r2
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	f042 0220 	orr.w	r2, r2, #32
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	f002 021f 	and.w	r2, r2, #31
 80043cc:	2101      	movs	r1, #1
 80043ce:	fa01 f202 	lsl.w	r2, r1, r2
 80043d2:	4013      	ands	r3, r2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d082      	beq.n	80042de <HAL_RCC_OscConfig+0xdce>
 80043d8:	e0cf      	b.n	800457a <HAL_RCC_OscConfig+0x106a>
 80043da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043de:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80043e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80043e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ec:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	fa93 f2a3 	rbit	r2, r3
 80043f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043fa:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80043fe:	601a      	str	r2, [r3, #0]
  return result;
 8004400:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004404:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004408:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800440a:	fab3 f383 	clz	r3, r3
 800440e:	b2db      	uxtb	r3, r3
 8004410:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004414:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	461a      	mov	r2, r3
 800441c:	2300      	movs	r3, #0
 800441e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004420:	f7fc fc7e 	bl	8000d20 <HAL_GetTick>
 8004424:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004428:	e009      	b.n	800443e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800442a:	f7fc fc79 	bl	8000d20 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e09e      	b.n	800457c <HAL_RCC_OscConfig+0x106c>
 800443e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004442:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004446:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800444a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004450:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	fa93 f2a3 	rbit	r2, r3
 800445a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800445e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004462:	601a      	str	r2, [r3, #0]
  return result;
 8004464:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004468:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800446c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800446e:	fab3 f383 	clz	r3, r3
 8004472:	b2db      	uxtb	r3, r3
 8004474:	095b      	lsrs	r3, r3, #5
 8004476:	b2db      	uxtb	r3, r3
 8004478:	f043 0301 	orr.w	r3, r3, #1
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b01      	cmp	r3, #1
 8004480:	d104      	bne.n	800448c <HAL_RCC_OscConfig+0xf7c>
 8004482:	4b01      	ldr	r3, [pc, #4]	@ (8004488 <HAL_RCC_OscConfig+0xf78>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	e029      	b.n	80044dc <HAL_RCC_OscConfig+0xfcc>
 8004488:	40021000 	.word	0x40021000
 800448c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004490:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004494:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004498:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800449e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	fa93 f2a3 	rbit	r2, r3
 80044a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ac:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044b6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80044ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044c4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	fa93 f2a3 	rbit	r2, r3
 80044ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044d2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80044d6:	601a      	str	r2, [r3, #0]
 80044d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004588 <HAL_RCC_OscConfig+0x1078>)
 80044da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044e0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80044e4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80044e8:	6011      	str	r1, [r2, #0]
 80044ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044ee:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80044f2:	6812      	ldr	r2, [r2, #0]
 80044f4:	fa92 f1a2 	rbit	r1, r2
 80044f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044fc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004500:	6011      	str	r1, [r2, #0]
  return result;
 8004502:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004506:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800450a:	6812      	ldr	r2, [r2, #0]
 800450c:	fab2 f282 	clz	r2, r2
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	f042 0220 	orr.w	r2, r2, #32
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	f002 021f 	and.w	r2, r2, #31
 800451c:	2101      	movs	r1, #1
 800451e:	fa01 f202 	lsl.w	r2, r1, r2
 8004522:	4013      	ands	r3, r2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d180      	bne.n	800442a <HAL_RCC_OscConfig+0xf1a>
 8004528:	e027      	b.n	800457a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800452a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800452e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e01e      	b.n	800457c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800453e:	4b12      	ldr	r3, [pc, #72]	@ (8004588 <HAL_RCC_OscConfig+0x1078>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004546:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800454a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800454e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004552:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	429a      	cmp	r2, r3
 800455c:	d10b      	bne.n	8004576 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800455e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004562:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004566:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800456a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004572:	429a      	cmp	r2, r3
 8004574:	d001      	beq.n	800457a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	40021000 	.word	0x40021000

0800458c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b09e      	sub	sp, #120	@ 0x78
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e162      	b.n	800486a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045a4:	4b90      	ldr	r3, [pc, #576]	@ (80047e8 <HAL_RCC_ClockConfig+0x25c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d910      	bls.n	80045d4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b2:	4b8d      	ldr	r3, [pc, #564]	@ (80047e8 <HAL_RCC_ClockConfig+0x25c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f023 0207 	bic.w	r2, r3, #7
 80045ba:	498b      	ldr	r1, [pc, #556]	@ (80047e8 <HAL_RCC_ClockConfig+0x25c>)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	4313      	orrs	r3, r2
 80045c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045c2:	4b89      	ldr	r3, [pc, #548]	@ (80047e8 <HAL_RCC_ClockConfig+0x25c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0307 	and.w	r3, r3, #7
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d001      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e14a      	b.n	800486a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d008      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e0:	4b82      	ldr	r3, [pc, #520]	@ (80047ec <HAL_RCC_ClockConfig+0x260>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	497f      	ldr	r1, [pc, #508]	@ (80047ec <HAL_RCC_ClockConfig+0x260>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 80dc 	beq.w	80047b8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d13c      	bne.n	8004682 <HAL_RCC_ClockConfig+0xf6>
 8004608:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800460c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004610:	fa93 f3a3 	rbit	r3, r3
 8004614:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004616:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004618:	fab3 f383 	clz	r3, r3
 800461c:	b2db      	uxtb	r3, r3
 800461e:	095b      	lsrs	r3, r3, #5
 8004620:	b2db      	uxtb	r3, r3
 8004622:	f043 0301 	orr.w	r3, r3, #1
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b01      	cmp	r3, #1
 800462a:	d102      	bne.n	8004632 <HAL_RCC_ClockConfig+0xa6>
 800462c:	4b6f      	ldr	r3, [pc, #444]	@ (80047ec <HAL_RCC_ClockConfig+0x260>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	e00f      	b.n	8004652 <HAL_RCC_ClockConfig+0xc6>
 8004632:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004636:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004638:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800463a:	fa93 f3a3 	rbit	r3, r3
 800463e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004640:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004644:	663b      	str	r3, [r7, #96]	@ 0x60
 8004646:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004648:	fa93 f3a3 	rbit	r3, r3
 800464c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800464e:	4b67      	ldr	r3, [pc, #412]	@ (80047ec <HAL_RCC_ClockConfig+0x260>)
 8004650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004652:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004656:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004658:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800465a:	fa92 f2a2 	rbit	r2, r2
 800465e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004660:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004662:	fab2 f282 	clz	r2, r2
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	f042 0220 	orr.w	r2, r2, #32
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	f002 021f 	and.w	r2, r2, #31
 8004672:	2101      	movs	r1, #1
 8004674:	fa01 f202 	lsl.w	r2, r1, r2
 8004678:	4013      	ands	r3, r2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d17b      	bne.n	8004776 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e0f3      	b.n	800486a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2b02      	cmp	r3, #2
 8004688:	d13c      	bne.n	8004704 <HAL_RCC_ClockConfig+0x178>
 800468a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800468e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004690:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004692:	fa93 f3a3 	rbit	r3, r3
 8004696:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004698:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800469a:	fab3 f383 	clz	r3, r3
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	095b      	lsrs	r3, r3, #5
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	f043 0301 	orr.w	r3, r3, #1
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d102      	bne.n	80046b4 <HAL_RCC_ClockConfig+0x128>
 80046ae:	4b4f      	ldr	r3, [pc, #316]	@ (80047ec <HAL_RCC_ClockConfig+0x260>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	e00f      	b.n	80046d4 <HAL_RCC_ClockConfig+0x148>
 80046b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046bc:	fa93 f3a3 	rbit	r3, r3
 80046c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80046c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80046c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046ca:	fa93 f3a3 	rbit	r3, r3
 80046ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046d0:	4b46      	ldr	r3, [pc, #280]	@ (80047ec <HAL_RCC_ClockConfig+0x260>)
 80046d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046d8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80046da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80046dc:	fa92 f2a2 	rbit	r2, r2
 80046e0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80046e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046e4:	fab2 f282 	clz	r2, r2
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	f042 0220 	orr.w	r2, r2, #32
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	f002 021f 	and.w	r2, r2, #31
 80046f4:	2101      	movs	r1, #1
 80046f6:	fa01 f202 	lsl.w	r2, r1, r2
 80046fa:	4013      	ands	r3, r2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d13a      	bne.n	8004776 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e0b2      	b.n	800486a <HAL_RCC_ClockConfig+0x2de>
 8004704:	2302      	movs	r3, #2
 8004706:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470a:	fa93 f3a3 	rbit	r3, r3
 800470e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004712:	fab3 f383 	clz	r3, r3
 8004716:	b2db      	uxtb	r3, r3
 8004718:	095b      	lsrs	r3, r3, #5
 800471a:	b2db      	uxtb	r3, r3
 800471c:	f043 0301 	orr.w	r3, r3, #1
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b01      	cmp	r3, #1
 8004724:	d102      	bne.n	800472c <HAL_RCC_ClockConfig+0x1a0>
 8004726:	4b31      	ldr	r3, [pc, #196]	@ (80047ec <HAL_RCC_ClockConfig+0x260>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	e00d      	b.n	8004748 <HAL_RCC_ClockConfig+0x1bc>
 800472c:	2302      	movs	r3, #2
 800472e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004732:	fa93 f3a3 	rbit	r3, r3
 8004736:	627b      	str	r3, [r7, #36]	@ 0x24
 8004738:	2302      	movs	r3, #2
 800473a:	623b      	str	r3, [r7, #32]
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	fa93 f3a3 	rbit	r3, r3
 8004742:	61fb      	str	r3, [r7, #28]
 8004744:	4b29      	ldr	r3, [pc, #164]	@ (80047ec <HAL_RCC_ClockConfig+0x260>)
 8004746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004748:	2202      	movs	r2, #2
 800474a:	61ba      	str	r2, [r7, #24]
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	fa92 f2a2 	rbit	r2, r2
 8004752:	617a      	str	r2, [r7, #20]
  return result;
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	fab2 f282 	clz	r2, r2
 800475a:	b2d2      	uxtb	r2, r2
 800475c:	f042 0220 	orr.w	r2, r2, #32
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	f002 021f 	and.w	r2, r2, #31
 8004766:	2101      	movs	r1, #1
 8004768:	fa01 f202 	lsl.w	r2, r1, r2
 800476c:	4013      	ands	r3, r2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e079      	b.n	800486a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004776:	4b1d      	ldr	r3, [pc, #116]	@ (80047ec <HAL_RCC_ClockConfig+0x260>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f023 0203 	bic.w	r2, r3, #3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	491a      	ldr	r1, [pc, #104]	@ (80047ec <HAL_RCC_ClockConfig+0x260>)
 8004784:	4313      	orrs	r3, r2
 8004786:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004788:	f7fc faca 	bl	8000d20 <HAL_GetTick>
 800478c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800478e:	e00a      	b.n	80047a6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004790:	f7fc fac6 	bl	8000d20 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800479e:	4293      	cmp	r3, r2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e061      	b.n	800486a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a6:	4b11      	ldr	r3, [pc, #68]	@ (80047ec <HAL_RCC_ClockConfig+0x260>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f003 020c 	and.w	r2, r3, #12
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d1eb      	bne.n	8004790 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047b8:	4b0b      	ldr	r3, [pc, #44]	@ (80047e8 <HAL_RCC_ClockConfig+0x25c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d214      	bcs.n	80047f0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c6:	4b08      	ldr	r3, [pc, #32]	@ (80047e8 <HAL_RCC_ClockConfig+0x25c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f023 0207 	bic.w	r2, r3, #7
 80047ce:	4906      	ldr	r1, [pc, #24]	@ (80047e8 <HAL_RCC_ClockConfig+0x25c>)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d6:	4b04      	ldr	r3, [pc, #16]	@ (80047e8 <HAL_RCC_ClockConfig+0x25c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d005      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e040      	b.n	800486a <HAL_RCC_ClockConfig+0x2de>
 80047e8:	40022000 	.word	0x40022000
 80047ec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d008      	beq.n	800480e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004874 <HAL_RCC_ClockConfig+0x2e8>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	491a      	ldr	r1, [pc, #104]	@ (8004874 <HAL_RCC_ClockConfig+0x2e8>)
 800480a:	4313      	orrs	r3, r2
 800480c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d009      	beq.n	800482e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800481a:	4b16      	ldr	r3, [pc, #88]	@ (8004874 <HAL_RCC_ClockConfig+0x2e8>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	4912      	ldr	r1, [pc, #72]	@ (8004874 <HAL_RCC_ClockConfig+0x2e8>)
 800482a:	4313      	orrs	r3, r2
 800482c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800482e:	f000 f829 	bl	8004884 <HAL_RCC_GetSysClockFreq>
 8004832:	4601      	mov	r1, r0
 8004834:	4b0f      	ldr	r3, [pc, #60]	@ (8004874 <HAL_RCC_ClockConfig+0x2e8>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800483c:	22f0      	movs	r2, #240	@ 0xf0
 800483e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	fa92 f2a2 	rbit	r2, r2
 8004846:	60fa      	str	r2, [r7, #12]
  return result;
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	fab2 f282 	clz	r2, r2
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	40d3      	lsrs	r3, r2
 8004852:	4a09      	ldr	r2, [pc, #36]	@ (8004878 <HAL_RCC_ClockConfig+0x2ec>)
 8004854:	5cd3      	ldrb	r3, [r2, r3]
 8004856:	fa21 f303 	lsr.w	r3, r1, r3
 800485a:	4a08      	ldr	r2, [pc, #32]	@ (800487c <HAL_RCC_ClockConfig+0x2f0>)
 800485c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800485e:	4b08      	ldr	r3, [pc, #32]	@ (8004880 <HAL_RCC_ClockConfig+0x2f4>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4618      	mov	r0, r3
 8004864:	f7fc f902 	bl	8000a6c <HAL_InitTick>
  
  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3778      	adds	r7, #120	@ 0x78
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	40021000 	.word	0x40021000
 8004878:	0800a120 	.word	0x0800a120
 800487c:	20000000 	.word	0x20000000
 8004880:	20000004 	.word	0x20000004

08004884 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004884:	b480      	push	{r7}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800488a:	2300      	movs	r3, #0
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	2300      	movs	r3, #0
 8004890:	60bb      	str	r3, [r7, #8]
 8004892:	2300      	movs	r3, #0
 8004894:	617b      	str	r3, [r7, #20]
 8004896:	2300      	movs	r3, #0
 8004898:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800489e:	4b1e      	ldr	r3, [pc, #120]	@ (8004918 <HAL_RCC_GetSysClockFreq+0x94>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f003 030c 	and.w	r3, r3, #12
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d002      	beq.n	80048b4 <HAL_RCC_GetSysClockFreq+0x30>
 80048ae:	2b08      	cmp	r3, #8
 80048b0:	d003      	beq.n	80048ba <HAL_RCC_GetSysClockFreq+0x36>
 80048b2:	e026      	b.n	8004902 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048b4:	4b19      	ldr	r3, [pc, #100]	@ (800491c <HAL_RCC_GetSysClockFreq+0x98>)
 80048b6:	613b      	str	r3, [r7, #16]
      break;
 80048b8:	e026      	b.n	8004908 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	0c9b      	lsrs	r3, r3, #18
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	4a17      	ldr	r2, [pc, #92]	@ (8004920 <HAL_RCC_GetSysClockFreq+0x9c>)
 80048c4:	5cd3      	ldrb	r3, [r2, r3]
 80048c6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80048c8:	4b13      	ldr	r3, [pc, #76]	@ (8004918 <HAL_RCC_GetSysClockFreq+0x94>)
 80048ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048cc:	f003 030f 	and.w	r3, r3, #15
 80048d0:	4a14      	ldr	r2, [pc, #80]	@ (8004924 <HAL_RCC_GetSysClockFreq+0xa0>)
 80048d2:	5cd3      	ldrb	r3, [r2, r3]
 80048d4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d008      	beq.n	80048f2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80048e0:	4a0e      	ldr	r2, [pc, #56]	@ (800491c <HAL_RCC_GetSysClockFreq+0x98>)
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	fb02 f303 	mul.w	r3, r2, r3
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	e004      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a0c      	ldr	r2, [pc, #48]	@ (8004928 <HAL_RCC_GetSysClockFreq+0xa4>)
 80048f6:	fb02 f303 	mul.w	r3, r2, r3
 80048fa:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	613b      	str	r3, [r7, #16]
      break;
 8004900:	e002      	b.n	8004908 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004902:	4b06      	ldr	r3, [pc, #24]	@ (800491c <HAL_RCC_GetSysClockFreq+0x98>)
 8004904:	613b      	str	r3, [r7, #16]
      break;
 8004906:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004908:	693b      	ldr	r3, [r7, #16]
}
 800490a:	4618      	mov	r0, r3
 800490c:	371c      	adds	r7, #28
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	40021000 	.word	0x40021000
 800491c:	007a1200 	.word	0x007a1200
 8004920:	0800a138 	.word	0x0800a138
 8004924:	0800a148 	.word	0x0800a148
 8004928:	003d0900 	.word	0x003d0900

0800492c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004930:	4b03      	ldr	r3, [pc, #12]	@ (8004940 <HAL_RCC_GetHCLKFreq+0x14>)
 8004932:	681b      	ldr	r3, [r3, #0]
}
 8004934:	4618      	mov	r0, r3
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	20000000 	.word	0x20000000

08004944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800494a:	f7ff ffef 	bl	800492c <HAL_RCC_GetHCLKFreq>
 800494e:	4601      	mov	r1, r0
 8004950:	4b0b      	ldr	r3, [pc, #44]	@ (8004980 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004958:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800495c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	fa92 f2a2 	rbit	r2, r2
 8004964:	603a      	str	r2, [r7, #0]
  return result;
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	fab2 f282 	clz	r2, r2
 800496c:	b2d2      	uxtb	r2, r2
 800496e:	40d3      	lsrs	r3, r2
 8004970:	4a04      	ldr	r2, [pc, #16]	@ (8004984 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004972:	5cd3      	ldrb	r3, [r2, r3]
 8004974:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004978:	4618      	mov	r0, r3
 800497a:	3708      	adds	r7, #8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40021000 	.word	0x40021000
 8004984:	0800a130 	.word	0x0800a130

08004988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800498e:	f7ff ffcd 	bl	800492c <HAL_RCC_GetHCLKFreq>
 8004992:	4601      	mov	r1, r0
 8004994:	4b0b      	ldr	r3, [pc, #44]	@ (80049c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800499c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80049a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	fa92 f2a2 	rbit	r2, r2
 80049a8:	603a      	str	r2, [r7, #0]
  return result;
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	fab2 f282 	clz	r2, r2
 80049b0:	b2d2      	uxtb	r2, r2
 80049b2:	40d3      	lsrs	r3, r2
 80049b4:	4a04      	ldr	r2, [pc, #16]	@ (80049c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80049b6:	5cd3      	ldrb	r3, [r2, r3]
 80049b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80049bc:	4618      	mov	r0, r3
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40021000 	.word	0x40021000
 80049c8:	0800a130 	.word	0x0800a130

080049cc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	220f      	movs	r2, #15
 80049da:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049dc:	4b12      	ldr	r3, [pc, #72]	@ (8004a28 <HAL_RCC_GetClockConfig+0x5c>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f003 0203 	and.w	r2, r3, #3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80049e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004a28 <HAL_RCC_GetClockConfig+0x5c>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80049f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004a28 <HAL_RCC_GetClockConfig+0x5c>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004a00:	4b09      	ldr	r3, [pc, #36]	@ (8004a28 <HAL_RCC_GetClockConfig+0x5c>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	08db      	lsrs	r3, r3, #3
 8004a06:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8004a0e:	4b07      	ldr	r3, [pc, #28]	@ (8004a2c <HAL_RCC_GetClockConfig+0x60>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0207 	and.w	r2, r3, #7
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	601a      	str	r2, [r3, #0]
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	40022000 	.word	0x40022000

08004a30 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b092      	sub	sp, #72	@ 0x48
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004a40:	2300      	movs	r3, #0
 8004a42:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f000 80cd 	beq.w	8004bee <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a54:	4b8e      	ldr	r3, [pc, #568]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a56:	69db      	ldr	r3, [r3, #28]
 8004a58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10e      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a60:	4b8b      	ldr	r3, [pc, #556]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	4a8a      	ldr	r2, [pc, #552]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a6a:	61d3      	str	r3, [r2, #28]
 8004a6c:	4b88      	ldr	r3, [pc, #544]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a6e:	69db      	ldr	r3, [r3, #28]
 8004a70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a74:	60bb      	str	r3, [r7, #8]
 8004a76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a7e:	4b85      	ldr	r3, [pc, #532]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d118      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a8a:	4b82      	ldr	r3, [pc, #520]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a81      	ldr	r2, [pc, #516]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a94:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a96:	f7fc f943 	bl	8000d20 <HAL_GetTick>
 8004a9a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a9e:	f7fc f93f 	bl	8000d20 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b64      	cmp	r3, #100	@ 0x64
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e0ea      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab0:	4b78      	ldr	r3, [pc, #480]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0f0      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004abc:	4b74      	ldr	r3, [pc, #464]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d07d      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ad4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d076      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ada:	4b6d      	ldr	r3, [pc, #436]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ae4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004ae8:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aec:	fa93 f3a3 	rbit	r3, r3
 8004af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004af4:	fab3 f383 	clz	r3, r3
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	461a      	mov	r2, r3
 8004afc:	4b66      	ldr	r3, [pc, #408]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004afe:	4413      	add	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	461a      	mov	r2, r3
 8004b04:	2301      	movs	r3, #1
 8004b06:	6013      	str	r3, [r2, #0]
 8004b08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b10:	fa93 f3a3 	rbit	r3, r3
 8004b14:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b18:	fab3 f383 	clz	r3, r3
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	461a      	mov	r2, r3
 8004b20:	4b5d      	ldr	r3, [pc, #372]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b22:	4413      	add	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	461a      	mov	r2, r3
 8004b28:	2300      	movs	r3, #0
 8004b2a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b2c:	4a58      	ldr	r2, [pc, #352]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b30:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d045      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3c:	f7fc f8f0 	bl	8000d20 <HAL_GetTick>
 8004b40:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b42:	e00a      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b44:	f7fc f8ec 	bl	8000d20 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e095      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b60:	fa93 f3a3 	rbit	r3, r3
 8004b64:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b66:	2302      	movs	r3, #2
 8004b68:	623b      	str	r3, [r7, #32]
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	fa93 f3a3 	rbit	r3, r3
 8004b70:	61fb      	str	r3, [r7, #28]
  return result;
 8004b72:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b74:	fab3 f383 	clz	r3, r3
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	095b      	lsrs	r3, r3, #5
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	f043 0302 	orr.w	r3, r3, #2
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d102      	bne.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004b88:	4b41      	ldr	r3, [pc, #260]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	e007      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	fa93 f3a3 	rbit	r3, r3
 8004b98:	617b      	str	r3, [r7, #20]
 8004b9a:	4b3d      	ldr	r3, [pc, #244]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	613a      	str	r2, [r7, #16]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	fa92 f2a2 	rbit	r2, r2
 8004ba8:	60fa      	str	r2, [r7, #12]
  return result;
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	fab2 f282 	clz	r2, r2
 8004bb0:	b2d2      	uxtb	r2, r2
 8004bb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	f002 021f 	and.w	r2, r2, #31
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0bd      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004bc8:	4b31      	ldr	r3, [pc, #196]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	492e      	ldr	r1, [pc, #184]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004bda:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d105      	bne.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004be2:	4b2b      	ldr	r3, [pc, #172]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	4a2a      	ldr	r2, [pc, #168]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004be8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bec:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d008      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bfa:	4b25      	ldr	r3, [pc, #148]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bfe:	f023 0203 	bic.w	r2, r3, #3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	4922      	ldr	r1, [pc, #136]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0320 	and.w	r3, r3, #32
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d008      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c18:	4b1d      	ldr	r3, [pc, #116]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c1c:	f023 0210 	bic.w	r2, r3, #16
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	491a      	ldr	r1, [pc, #104]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d008      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c36:	4b16      	ldr	r3, [pc, #88]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	4913      	ldr	r1, [pc, #76]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d008      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004c54:	4b0e      	ldr	r3, [pc, #56]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	490b      	ldr	r1, [pc, #44]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d008      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004c72:	4b07      	ldr	r3, [pc, #28]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c76:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	4904      	ldr	r1, [pc, #16]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3748      	adds	r7, #72	@ 0x48
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	40021000 	.word	0x40021000
 8004c94:	40007000 	.word	0x40007000
 8004c98:	10908100 	.word	0x10908100

08004c9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e049      	b.n	8004d42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d106      	bne.n	8004cc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f841 	bl	8004d4a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3304      	adds	r3, #4
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4610      	mov	r0, r2
 8004cdc:	f000 fbee 	bl	80054bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004d52:	bf00      	nop
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
	...

08004d60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d001      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e040      	b.n	8004dfa <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0201 	orr.w	r2, r2, #1
 8004d8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a1c      	ldr	r2, [pc, #112]	@ (8004e08 <HAL_TIM_Base_Start_IT+0xa8>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d00e      	beq.n	8004db8 <HAL_TIM_Base_Start_IT+0x58>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004da2:	d009      	beq.n	8004db8 <HAL_TIM_Base_Start_IT+0x58>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a18      	ldr	r2, [pc, #96]	@ (8004e0c <HAL_TIM_Base_Start_IT+0xac>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d004      	beq.n	8004db8 <HAL_TIM_Base_Start_IT+0x58>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a17      	ldr	r2, [pc, #92]	@ (8004e10 <HAL_TIM_Base_Start_IT+0xb0>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d115      	bne.n	8004de4 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	4b15      	ldr	r3, [pc, #84]	@ (8004e14 <HAL_TIM_Base_Start_IT+0xb4>)
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2b06      	cmp	r3, #6
 8004dc8:	d015      	beq.n	8004df6 <HAL_TIM_Base_Start_IT+0x96>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dd0:	d011      	beq.n	8004df6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f042 0201 	orr.w	r2, r2, #1
 8004de0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de2:	e008      	b.n	8004df6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0201 	orr.w	r2, r2, #1
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	e000      	b.n	8004df8 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	40012c00 	.word	0x40012c00
 8004e0c:	40000400 	.word	0x40000400
 8004e10:	40014000 	.word	0x40014000
 8004e14:	00010007 	.word	0x00010007

08004e18 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e049      	b.n	8004ebe <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d106      	bne.n	8004e44 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7fb fd86 	bl	8000950 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	3304      	adds	r3, #4
 8004e54:	4619      	mov	r1, r3
 8004e56:	4610      	mov	r0, r2
 8004e58:	f000 fb30 	bl	80054bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d104      	bne.n	8004ee6 <HAL_TIM_IC_Start_IT+0x1e>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	e023      	b.n	8004f2e <HAL_TIM_IC_Start_IT+0x66>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b04      	cmp	r3, #4
 8004eea:	d104      	bne.n	8004ef6 <HAL_TIM_IC_Start_IT+0x2e>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	e01b      	b.n	8004f2e <HAL_TIM_IC_Start_IT+0x66>
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d104      	bne.n	8004f06 <HAL_TIM_IC_Start_IT+0x3e>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	e013      	b.n	8004f2e <HAL_TIM_IC_Start_IT+0x66>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b0c      	cmp	r3, #12
 8004f0a:	d104      	bne.n	8004f16 <HAL_TIM_IC_Start_IT+0x4e>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	e00b      	b.n	8004f2e <HAL_TIM_IC_Start_IT+0x66>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b10      	cmp	r3, #16
 8004f1a:	d104      	bne.n	8004f26 <HAL_TIM_IC_Start_IT+0x5e>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	e003      	b.n	8004f2e <HAL_TIM_IC_Start_IT+0x66>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d104      	bne.n	8004f40 <HAL_TIM_IC_Start_IT+0x78>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	e013      	b.n	8004f68 <HAL_TIM_IC_Start_IT+0xa0>
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	d104      	bne.n	8004f50 <HAL_TIM_IC_Start_IT+0x88>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	e00b      	b.n	8004f68 <HAL_TIM_IC_Start_IT+0xa0>
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2b08      	cmp	r3, #8
 8004f54:	d104      	bne.n	8004f60 <HAL_TIM_IC_Start_IT+0x98>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	e003      	b.n	8004f68 <HAL_TIM_IC_Start_IT+0xa0>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f6a:	7bbb      	ldrb	r3, [r7, #14]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d102      	bne.n	8004f76 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f70:	7b7b      	ldrb	r3, [r7, #13]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d001      	beq.n	8004f7a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e0ce      	b.n	8005118 <HAL_TIM_IC_Start_IT+0x250>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d104      	bne.n	8004f8a <HAL_TIM_IC_Start_IT+0xc2>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2202      	movs	r2, #2
 8004f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f88:	e023      	b.n	8004fd2 <HAL_TIM_IC_Start_IT+0x10a>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b04      	cmp	r3, #4
 8004f8e:	d104      	bne.n	8004f9a <HAL_TIM_IC_Start_IT+0xd2>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f98:	e01b      	b.n	8004fd2 <HAL_TIM_IC_Start_IT+0x10a>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d104      	bne.n	8004faa <HAL_TIM_IC_Start_IT+0xe2>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fa8:	e013      	b.n	8004fd2 <HAL_TIM_IC_Start_IT+0x10a>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b0c      	cmp	r3, #12
 8004fae:	d104      	bne.n	8004fba <HAL_TIM_IC_Start_IT+0xf2>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fb8:	e00b      	b.n	8004fd2 <HAL_TIM_IC_Start_IT+0x10a>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b10      	cmp	r3, #16
 8004fbe:	d104      	bne.n	8004fca <HAL_TIM_IC_Start_IT+0x102>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fc8:	e003      	b.n	8004fd2 <HAL_TIM_IC_Start_IT+0x10a>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2202      	movs	r2, #2
 8004fce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d104      	bne.n	8004fe2 <HAL_TIM_IC_Start_IT+0x11a>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fe0:	e013      	b.n	800500a <HAL_TIM_IC_Start_IT+0x142>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b04      	cmp	r3, #4
 8004fe6:	d104      	bne.n	8004ff2 <HAL_TIM_IC_Start_IT+0x12a>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ff0:	e00b      	b.n	800500a <HAL_TIM_IC_Start_IT+0x142>
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d104      	bne.n	8005002 <HAL_TIM_IC_Start_IT+0x13a>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005000:	e003      	b.n	800500a <HAL_TIM_IC_Start_IT+0x142>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2202      	movs	r2, #2
 8005006:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b0c      	cmp	r3, #12
 800500e:	d841      	bhi.n	8005094 <HAL_TIM_IC_Start_IT+0x1cc>
 8005010:	a201      	add	r2, pc, #4	@ (adr r2, 8005018 <HAL_TIM_IC_Start_IT+0x150>)
 8005012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005016:	bf00      	nop
 8005018:	0800504d 	.word	0x0800504d
 800501c:	08005095 	.word	0x08005095
 8005020:	08005095 	.word	0x08005095
 8005024:	08005095 	.word	0x08005095
 8005028:	0800505f 	.word	0x0800505f
 800502c:	08005095 	.word	0x08005095
 8005030:	08005095 	.word	0x08005095
 8005034:	08005095 	.word	0x08005095
 8005038:	08005071 	.word	0x08005071
 800503c:	08005095 	.word	0x08005095
 8005040:	08005095 	.word	0x08005095
 8005044:	08005095 	.word	0x08005095
 8005048:	08005083 	.word	0x08005083
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68da      	ldr	r2, [r3, #12]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0202 	orr.w	r2, r2, #2
 800505a:	60da      	str	r2, [r3, #12]
      break;
 800505c:	e01d      	b.n	800509a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f042 0204 	orr.w	r2, r2, #4
 800506c:	60da      	str	r2, [r3, #12]
      break;
 800506e:	e014      	b.n	800509a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68da      	ldr	r2, [r3, #12]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0208 	orr.w	r2, r2, #8
 800507e:	60da      	str	r2, [r3, #12]
      break;
 8005080:	e00b      	b.n	800509a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68da      	ldr	r2, [r3, #12]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f042 0210 	orr.w	r2, r2, #16
 8005090:	60da      	str	r2, [r3, #12]
      break;
 8005092:	e002      	b.n	800509a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	73fb      	strb	r3, [r7, #15]
      break;
 8005098:	bf00      	nop
  }

  if (status == HAL_OK)
 800509a:	7bfb      	ldrb	r3, [r7, #15]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d13a      	bne.n	8005116 <HAL_TIM_IC_Start_IT+0x24e>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2201      	movs	r2, #1
 80050a6:	6839      	ldr	r1, [r7, #0]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f000 fb9d 	bl	80057e8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a1b      	ldr	r2, [pc, #108]	@ (8005120 <HAL_TIM_IC_Start_IT+0x258>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d00e      	beq.n	80050d6 <HAL_TIM_IC_Start_IT+0x20e>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050c0:	d009      	beq.n	80050d6 <HAL_TIM_IC_Start_IT+0x20e>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a17      	ldr	r2, [pc, #92]	@ (8005124 <HAL_TIM_IC_Start_IT+0x25c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d004      	beq.n	80050d6 <HAL_TIM_IC_Start_IT+0x20e>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a15      	ldr	r2, [pc, #84]	@ (8005128 <HAL_TIM_IC_Start_IT+0x260>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d115      	bne.n	8005102 <HAL_TIM_IC_Start_IT+0x23a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	4b13      	ldr	r3, [pc, #76]	@ (800512c <HAL_TIM_IC_Start_IT+0x264>)
 80050de:	4013      	ands	r3, r2
 80050e0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2b06      	cmp	r3, #6
 80050e6:	d015      	beq.n	8005114 <HAL_TIM_IC_Start_IT+0x24c>
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050ee:	d011      	beq.n	8005114 <HAL_TIM_IC_Start_IT+0x24c>
      {
        __HAL_TIM_ENABLE(htim);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0201 	orr.w	r2, r2, #1
 80050fe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005100:	e008      	b.n	8005114 <HAL_TIM_IC_Start_IT+0x24c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f042 0201 	orr.w	r2, r2, #1
 8005110:	601a      	str	r2, [r3, #0]
 8005112:	e000      	b.n	8005116 <HAL_TIM_IC_Start_IT+0x24e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005114:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005116:	7bfb      	ldrb	r3, [r7, #15]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	40012c00 	.word	0x40012c00
 8005124:	40000400 	.word	0x40000400
 8005128:	40014000 	.word	0x40014000
 800512c:	00010007 	.word	0x00010007

08005130 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d020      	beq.n	8005194 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d01b      	beq.n	8005194 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f06f 0202 	mvn.w	r2, #2
 8005164:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	f003 0303 	and.w	r3, r3, #3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f980 	bl	8005480 <HAL_TIM_IC_CaptureCallback>
 8005180:	e005      	b.n	800518e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f972 	bl	800546c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f983 	bl	8005494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f003 0304 	and.w	r3, r3, #4
 800519a:	2b00      	cmp	r3, #0
 800519c:	d020      	beq.n	80051e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d01b      	beq.n	80051e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f06f 0204 	mvn.w	r2, #4
 80051b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2202      	movs	r2, #2
 80051b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f95a 	bl	8005480 <HAL_TIM_IC_CaptureCallback>
 80051cc:	e005      	b.n	80051da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f94c 	bl	800546c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f95d 	bl	8005494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f003 0308 	and.w	r3, r3, #8
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d020      	beq.n	800522c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f003 0308 	and.w	r3, r3, #8
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d01b      	beq.n	800522c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f06f 0208 	mvn.w	r2, #8
 80051fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2204      	movs	r2, #4
 8005202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	f003 0303 	and.w	r3, r3, #3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f934 	bl	8005480 <HAL_TIM_IC_CaptureCallback>
 8005218:	e005      	b.n	8005226 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f926 	bl	800546c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f937 	bl	8005494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	f003 0310 	and.w	r3, r3, #16
 8005232:	2b00      	cmp	r3, #0
 8005234:	d020      	beq.n	8005278 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f003 0310 	and.w	r3, r3, #16
 800523c:	2b00      	cmp	r3, #0
 800523e:	d01b      	beq.n	8005278 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f06f 0210 	mvn.w	r2, #16
 8005248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2208      	movs	r2, #8
 800524e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f90e 	bl	8005480 <HAL_TIM_IC_CaptureCallback>
 8005264:	e005      	b.n	8005272 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f900 	bl	800546c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f911 	bl	8005494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00c      	beq.n	800529c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	d007      	beq.n	800529c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f06f 0201 	mvn.w	r2, #1
 8005294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7fb fac6 	bl	8000828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00c      	beq.n	80052c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d007      	beq.n	80052c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80052b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 fb32 	bl	8005924 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00c      	beq.n	80052e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d007      	beq.n	80052e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80052dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fb2a 	bl	8005938 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00c      	beq.n	8005308 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d007      	beq.n	8005308 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f8d0 	bl	80054a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f003 0320 	and.w	r3, r3, #32
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00c      	beq.n	800532c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f003 0320 	and.w	r3, r3, #32
 8005318:	2b00      	cmp	r3, #0
 800531a:	d007      	beq.n	800532c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f06f 0220 	mvn.w	r2, #32
 8005324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 faf2 	bl	8005910 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800532c:	bf00      	nop
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005340:	2300      	movs	r3, #0
 8005342:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800534a:	2b01      	cmp	r3, #1
 800534c:	d101      	bne.n	8005352 <HAL_TIM_IC_ConfigChannel+0x1e>
 800534e:	2302      	movs	r3, #2
 8005350:	e088      	b.n	8005464 <HAL_TIM_IC_ConfigChannel+0x130>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d11b      	bne.n	8005398 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005370:	f000 f928 	bl	80055c4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699a      	ldr	r2, [r3, #24]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 020c 	bic.w	r2, r2, #12
 8005382:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6999      	ldr	r1, [r3, #24]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	689a      	ldr	r2, [r3, #8]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	619a      	str	r2, [r3, #24]
 8005396:	e060      	b.n	800545a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b04      	cmp	r3, #4
 800539c:	d11c      	bne.n	80053d8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80053ae:	f000 f965 	bl	800567c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	699a      	ldr	r2, [r3, #24]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80053c0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6999      	ldr	r1, [r3, #24]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	021a      	lsls	r2, r3, #8
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	619a      	str	r2, [r3, #24]
 80053d6:	e040      	b.n	800545a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b08      	cmp	r3, #8
 80053dc:	d11b      	bne.n	8005416 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80053ee:	f000 f982 	bl	80056f6 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	69da      	ldr	r2, [r3, #28]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f022 020c 	bic.w	r2, r2, #12
 8005400:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69d9      	ldr	r1, [r3, #28]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	61da      	str	r2, [r3, #28]
 8005414:	e021      	b.n	800545a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b0c      	cmp	r3, #12
 800541a:	d11c      	bne.n	8005456 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800542c:	f000 f99f 	bl	800576e <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	69da      	ldr	r2, [r3, #28]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800543e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	69d9      	ldr	r1, [r3, #28]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	021a      	lsls	r2, r3, #8
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	61da      	str	r2, [r3, #28]
 8005454:	e001      	b.n	800545a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005462:	7dfb      	ldrb	r3, [r7, #23]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a38      	ldr	r2, [pc, #224]	@ (80055b0 <TIM_Base_SetConfig+0xf4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d007      	beq.n	80054e4 <TIM_Base_SetConfig+0x28>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054da:	d003      	beq.n	80054e4 <TIM_Base_SetConfig+0x28>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a35      	ldr	r2, [pc, #212]	@ (80055b4 <TIM_Base_SetConfig+0xf8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d108      	bne.n	80054f6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a2d      	ldr	r2, [pc, #180]	@ (80055b0 <TIM_Base_SetConfig+0xf4>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d013      	beq.n	8005526 <TIM_Base_SetConfig+0x6a>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005504:	d00f      	beq.n	8005526 <TIM_Base_SetConfig+0x6a>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a2a      	ldr	r2, [pc, #168]	@ (80055b4 <TIM_Base_SetConfig+0xf8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00b      	beq.n	8005526 <TIM_Base_SetConfig+0x6a>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a29      	ldr	r2, [pc, #164]	@ (80055b8 <TIM_Base_SetConfig+0xfc>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d007      	beq.n	8005526 <TIM_Base_SetConfig+0x6a>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a28      	ldr	r2, [pc, #160]	@ (80055bc <TIM_Base_SetConfig+0x100>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d003      	beq.n	8005526 <TIM_Base_SetConfig+0x6a>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a27      	ldr	r2, [pc, #156]	@ (80055c0 <TIM_Base_SetConfig+0x104>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d108      	bne.n	8005538 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800552c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	4313      	orrs	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a14      	ldr	r2, [pc, #80]	@ (80055b0 <TIM_Base_SetConfig+0xf4>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d00b      	beq.n	800557c <TIM_Base_SetConfig+0xc0>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a14      	ldr	r2, [pc, #80]	@ (80055b8 <TIM_Base_SetConfig+0xfc>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d007      	beq.n	800557c <TIM_Base_SetConfig+0xc0>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a13      	ldr	r2, [pc, #76]	@ (80055bc <TIM_Base_SetConfig+0x100>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d003      	beq.n	800557c <TIM_Base_SetConfig+0xc0>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a12      	ldr	r2, [pc, #72]	@ (80055c0 <TIM_Base_SetConfig+0x104>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d103      	bne.n	8005584 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	691a      	ldr	r2, [r3, #16]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b01      	cmp	r3, #1
 8005594:	d105      	bne.n	80055a2 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	f023 0201 	bic.w	r2, r3, #1
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	611a      	str	r2, [r3, #16]
  }
}
 80055a2:	bf00      	nop
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	40012c00 	.word	0x40012c00
 80055b4:	40000400 	.word	0x40000400
 80055b8:	40014000 	.word	0x40014000
 80055bc:	40014400 	.word	0x40014400
 80055c0:	40014800 	.word	0x40014800

080055c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
 80055d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	f023 0201 	bic.w	r2, r3, #1
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	4a20      	ldr	r2, [pc, #128]	@ (8005670 <TIM_TI1_SetConfig+0xac>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d00b      	beq.n	800560a <TIM_TI1_SetConfig+0x46>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f8:	d007      	beq.n	800560a <TIM_TI1_SetConfig+0x46>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005674 <TIM_TI1_SetConfig+0xb0>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d003      	beq.n	800560a <TIM_TI1_SetConfig+0x46>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4a1c      	ldr	r2, [pc, #112]	@ (8005678 <TIM_TI1_SetConfig+0xb4>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d101      	bne.n	800560e <TIM_TI1_SetConfig+0x4a>
 800560a:	2301      	movs	r3, #1
 800560c:	e000      	b.n	8005610 <TIM_TI1_SetConfig+0x4c>
 800560e:	2300      	movs	r3, #0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d008      	beq.n	8005626 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f023 0303 	bic.w	r3, r3, #3
 800561a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4313      	orrs	r3, r2
 8005622:	617b      	str	r3, [r7, #20]
 8005624:	e003      	b.n	800562e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f043 0301 	orr.w	r3, r3, #1
 800562c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005634:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	011b      	lsls	r3, r3, #4
 800563a:	b2db      	uxtb	r3, r3
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	4313      	orrs	r3, r2
 8005640:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f023 030a 	bic.w	r3, r3, #10
 8005648:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	f003 030a 	and.w	r3, r3, #10
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	4313      	orrs	r3, r2
 8005654:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	621a      	str	r2, [r3, #32]
}
 8005662:	bf00      	nop
 8005664:	371c      	adds	r7, #28
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	40012c00 	.word	0x40012c00
 8005674:	40000400 	.word	0x40000400
 8005678:	40014000 	.word	0x40014000

0800567c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
 8005688:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	f023 0210 	bic.w	r2, r3, #16
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	021b      	lsls	r3, r3, #8
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80056ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	031b      	lsls	r3, r3, #12
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80056ce:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	011b      	lsls	r3, r3, #4
 80056d4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	4313      	orrs	r3, r2
 80056dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	621a      	str	r2, [r3, #32]
}
 80056ea:	bf00      	nop
 80056ec:	371c      	adds	r7, #28
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b087      	sub	sp, #28
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	60f8      	str	r0, [r7, #12]
 80056fe:	60b9      	str	r1, [r7, #8]
 8005700:	607a      	str	r2, [r7, #4]
 8005702:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	f023 0303 	bic.w	r3, r3, #3
 8005722:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4313      	orrs	r3, r2
 800572a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005732:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	011b      	lsls	r3, r3, #4
 8005738:	b2db      	uxtb	r3, r3
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	4313      	orrs	r3, r2
 800573e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005746:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	021b      	lsls	r3, r3, #8
 800574c:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	4313      	orrs	r3, r2
 8005754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	621a      	str	r2, [r3, #32]
}
 8005762:	bf00      	nop
 8005764:	371c      	adds	r7, #28
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800576e:	b480      	push	{r7}
 8005770:	b087      	sub	sp, #28
 8005772:	af00      	add	r7, sp, #0
 8005774:	60f8      	str	r0, [r7, #12]
 8005776:	60b9      	str	r1, [r7, #8]
 8005778:	607a      	str	r2, [r7, #4]
 800577a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800579a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	021b      	lsls	r3, r3, #8
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057ac:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	031b      	lsls	r3, r3, #12
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80057c0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	031b      	lsls	r3, r3, #12
 80057c6:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	621a      	str	r2, [r3, #32]
}
 80057dc:	bf00      	nop
 80057de:	371c      	adds	r7, #28
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f003 031f 	and.w	r3, r3, #31
 80057fa:	2201      	movs	r2, #1
 80057fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005800:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6a1a      	ldr	r2, [r3, #32]
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	43db      	mvns	r3, r3
 800580a:	401a      	ands	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6a1a      	ldr	r2, [r3, #32]
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f003 031f 	and.w	r3, r3, #31
 800581a:	6879      	ldr	r1, [r7, #4]
 800581c:	fa01 f303 	lsl.w	r3, r1, r3
 8005820:	431a      	orrs	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	621a      	str	r2, [r3, #32]
}
 8005826:	bf00      	nop
 8005828:	371c      	adds	r7, #28
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
	...

08005834 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005844:	2b01      	cmp	r3, #1
 8005846:	d101      	bne.n	800584c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005848:	2302      	movs	r3, #2
 800584a:	e054      	b.n	80058f6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2202      	movs	r2, #2
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a24      	ldr	r2, [pc, #144]	@ (8005904 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d108      	bne.n	8005888 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800587c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	4313      	orrs	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800588e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a17      	ldr	r2, [pc, #92]	@ (8005904 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d00e      	beq.n	80058ca <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058b4:	d009      	beq.n	80058ca <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a13      	ldr	r2, [pc, #76]	@ (8005908 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d004      	beq.n	80058ca <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a11      	ldr	r2, [pc, #68]	@ (800590c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d10c      	bne.n	80058e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	4313      	orrs	r3, r2
 80058da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	40012c00 	.word	0x40012c00
 8005908:	40000400 	.word	0x40000400
 800590c:	40014000 	.word	0x40014000

08005910 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e040      	b.n	80059e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005962:	2b00      	cmp	r3, #0
 8005964:	d106      	bne.n	8005974 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7fb f83a 	bl	80009e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2224      	movs	r2, #36	@ 0x24
 8005978:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0201 	bic.w	r2, r2, #1
 8005988:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598e:	2b00      	cmp	r3, #0
 8005990:	d002      	beq.n	8005998 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f9e8 	bl	8005d68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f8af 	bl	8005afc <UART_SetConfig>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d101      	bne.n	80059a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e01b      	b.n	80059e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f042 0201 	orr.w	r2, r2, #1
 80059d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 fa67 	bl	8005eac <UART_CheckIdleState>
 80059de:	4603      	mov	r3, r0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08a      	sub	sp, #40	@ 0x28
 80059ec:	af02      	add	r7, sp, #8
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	603b      	str	r3, [r7, #0]
 80059f4:	4613      	mov	r3, r2
 80059f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059fc:	2b20      	cmp	r3, #32
 80059fe:	d177      	bne.n	8005af0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <HAL_UART_Transmit+0x24>
 8005a06:	88fb      	ldrh	r3, [r7, #6]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e070      	b.n	8005af2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2221      	movs	r2, #33	@ 0x21
 8005a1c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a1e:	f7fb f97f 	bl	8000d20 <HAL_GetTick>
 8005a22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	88fa      	ldrh	r2, [r7, #6]
 8005a28:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	88fa      	ldrh	r2, [r7, #6]
 8005a30:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a3c:	d108      	bne.n	8005a50 <HAL_UART_Transmit+0x68>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d104      	bne.n	8005a50 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005a46:	2300      	movs	r3, #0
 8005a48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	61bb      	str	r3, [r7, #24]
 8005a4e:	e003      	b.n	8005a58 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a54:	2300      	movs	r3, #0
 8005a56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a58:	e02f      	b.n	8005aba <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	2200      	movs	r2, #0
 8005a62:	2180      	movs	r1, #128	@ 0x80
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 fac9 	bl	8005ffc <UART_WaitOnFlagUntilTimeout>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d004      	beq.n	8005a7a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2220      	movs	r2, #32
 8005a74:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e03b      	b.n	8005af2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10b      	bne.n	8005a98 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	881a      	ldrh	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a8c:	b292      	uxth	r2, r2
 8005a8e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	3302      	adds	r3, #2
 8005a94:	61bb      	str	r3, [r7, #24]
 8005a96:	e007      	b.n	8005aa8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	781a      	ldrb	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1c9      	bne.n	8005a5a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2200      	movs	r2, #0
 8005ace:	2140      	movs	r1, #64	@ 0x40
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 fa93 	bl	8005ffc <UART_WaitOnFlagUntilTimeout>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d004      	beq.n	8005ae6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e005      	b.n	8005af2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2220      	movs	r2, #32
 8005aea:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005aec:	2300      	movs	r3, #0
 8005aee:	e000      	b.n	8005af2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005af0:	2302      	movs	r3, #2
  }
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3720      	adds	r7, #32
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
	...

08005afc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b088      	sub	sp, #32
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b04:	2300      	movs	r3, #0
 8005b06:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	431a      	orrs	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	431a      	orrs	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	4b8a      	ldr	r3, [pc, #552]	@ (8005d50 <UART_SetConfig+0x254>)
 8005b28:	4013      	ands	r3, r2
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	6812      	ldr	r2, [r2, #0]
 8005b2e:	6979      	ldr	r1, [r7, #20]
 8005b30:	430b      	orrs	r3, r1
 8005b32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a1b      	ldr	r3, [r3, #32]
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a78      	ldr	r2, [pc, #480]	@ (8005d54 <UART_SetConfig+0x258>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d120      	bne.n	8005bba <UART_SetConfig+0xbe>
 8005b78:	4b77      	ldr	r3, [pc, #476]	@ (8005d58 <UART_SetConfig+0x25c>)
 8005b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b7c:	f003 0303 	and.w	r3, r3, #3
 8005b80:	2b03      	cmp	r3, #3
 8005b82:	d817      	bhi.n	8005bb4 <UART_SetConfig+0xb8>
 8005b84:	a201      	add	r2, pc, #4	@ (adr r2, 8005b8c <UART_SetConfig+0x90>)
 8005b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8a:	bf00      	nop
 8005b8c:	08005b9d 	.word	0x08005b9d
 8005b90:	08005ba9 	.word	0x08005ba9
 8005b94:	08005baf 	.word	0x08005baf
 8005b98:	08005ba3 	.word	0x08005ba3
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	77fb      	strb	r3, [r7, #31]
 8005ba0:	e01d      	b.n	8005bde <UART_SetConfig+0xe2>
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	77fb      	strb	r3, [r7, #31]
 8005ba6:	e01a      	b.n	8005bde <UART_SetConfig+0xe2>
 8005ba8:	2304      	movs	r3, #4
 8005baa:	77fb      	strb	r3, [r7, #31]
 8005bac:	e017      	b.n	8005bde <UART_SetConfig+0xe2>
 8005bae:	2308      	movs	r3, #8
 8005bb0:	77fb      	strb	r3, [r7, #31]
 8005bb2:	e014      	b.n	8005bde <UART_SetConfig+0xe2>
 8005bb4:	2310      	movs	r3, #16
 8005bb6:	77fb      	strb	r3, [r7, #31]
 8005bb8:	e011      	b.n	8005bde <UART_SetConfig+0xe2>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a67      	ldr	r2, [pc, #412]	@ (8005d5c <UART_SetConfig+0x260>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d102      	bne.n	8005bca <UART_SetConfig+0xce>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	77fb      	strb	r3, [r7, #31]
 8005bc8:	e009      	b.n	8005bde <UART_SetConfig+0xe2>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a64      	ldr	r2, [pc, #400]	@ (8005d60 <UART_SetConfig+0x264>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d102      	bne.n	8005bda <UART_SetConfig+0xde>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	77fb      	strb	r3, [r7, #31]
 8005bd8:	e001      	b.n	8005bde <UART_SetConfig+0xe2>
 8005bda:	2310      	movs	r3, #16
 8005bdc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005be6:	d15a      	bne.n	8005c9e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005be8:	7ffb      	ldrb	r3, [r7, #31]
 8005bea:	2b08      	cmp	r3, #8
 8005bec:	d827      	bhi.n	8005c3e <UART_SetConfig+0x142>
 8005bee:	a201      	add	r2, pc, #4	@ (adr r2, 8005bf4 <UART_SetConfig+0xf8>)
 8005bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf4:	08005c19 	.word	0x08005c19
 8005bf8:	08005c21 	.word	0x08005c21
 8005bfc:	08005c29 	.word	0x08005c29
 8005c00:	08005c3f 	.word	0x08005c3f
 8005c04:	08005c2f 	.word	0x08005c2f
 8005c08:	08005c3f 	.word	0x08005c3f
 8005c0c:	08005c3f 	.word	0x08005c3f
 8005c10:	08005c3f 	.word	0x08005c3f
 8005c14:	08005c37 	.word	0x08005c37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c18:	f7fe fe94 	bl	8004944 <HAL_RCC_GetPCLK1Freq>
 8005c1c:	61b8      	str	r0, [r7, #24]
        break;
 8005c1e:	e013      	b.n	8005c48 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c20:	f7fe feb2 	bl	8004988 <HAL_RCC_GetPCLK2Freq>
 8005c24:	61b8      	str	r0, [r7, #24]
        break;
 8005c26:	e00f      	b.n	8005c48 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c28:	4b4e      	ldr	r3, [pc, #312]	@ (8005d64 <UART_SetConfig+0x268>)
 8005c2a:	61bb      	str	r3, [r7, #24]
        break;
 8005c2c:	e00c      	b.n	8005c48 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c2e:	f7fe fe29 	bl	8004884 <HAL_RCC_GetSysClockFreq>
 8005c32:	61b8      	str	r0, [r7, #24]
        break;
 8005c34:	e008      	b.n	8005c48 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c3a:	61bb      	str	r3, [r7, #24]
        break;
 8005c3c:	e004      	b.n	8005c48 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	77bb      	strb	r3, [r7, #30]
        break;
 8005c46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d074      	beq.n	8005d38 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	005a      	lsls	r2, r3, #1
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	085b      	lsrs	r3, r3, #1
 8005c58:	441a      	add	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	2b0f      	cmp	r3, #15
 8005c68:	d916      	bls.n	8005c98 <UART_SetConfig+0x19c>
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c70:	d212      	bcs.n	8005c98 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	f023 030f 	bic.w	r3, r3, #15
 8005c7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	085b      	lsrs	r3, r3, #1
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	89fb      	ldrh	r3, [r7, #14]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	89fa      	ldrh	r2, [r7, #14]
 8005c94:	60da      	str	r2, [r3, #12]
 8005c96:	e04f      	b.n	8005d38 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	77bb      	strb	r3, [r7, #30]
 8005c9c:	e04c      	b.n	8005d38 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c9e:	7ffb      	ldrb	r3, [r7, #31]
 8005ca0:	2b08      	cmp	r3, #8
 8005ca2:	d828      	bhi.n	8005cf6 <UART_SetConfig+0x1fa>
 8005ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8005cac <UART_SetConfig+0x1b0>)
 8005ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005caa:	bf00      	nop
 8005cac:	08005cd1 	.word	0x08005cd1
 8005cb0:	08005cd9 	.word	0x08005cd9
 8005cb4:	08005ce1 	.word	0x08005ce1
 8005cb8:	08005cf7 	.word	0x08005cf7
 8005cbc:	08005ce7 	.word	0x08005ce7
 8005cc0:	08005cf7 	.word	0x08005cf7
 8005cc4:	08005cf7 	.word	0x08005cf7
 8005cc8:	08005cf7 	.word	0x08005cf7
 8005ccc:	08005cef 	.word	0x08005cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cd0:	f7fe fe38 	bl	8004944 <HAL_RCC_GetPCLK1Freq>
 8005cd4:	61b8      	str	r0, [r7, #24]
        break;
 8005cd6:	e013      	b.n	8005d00 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cd8:	f7fe fe56 	bl	8004988 <HAL_RCC_GetPCLK2Freq>
 8005cdc:	61b8      	str	r0, [r7, #24]
        break;
 8005cde:	e00f      	b.n	8005d00 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ce0:	4b20      	ldr	r3, [pc, #128]	@ (8005d64 <UART_SetConfig+0x268>)
 8005ce2:	61bb      	str	r3, [r7, #24]
        break;
 8005ce4:	e00c      	b.n	8005d00 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ce6:	f7fe fdcd 	bl	8004884 <HAL_RCC_GetSysClockFreq>
 8005cea:	61b8      	str	r0, [r7, #24]
        break;
 8005cec:	e008      	b.n	8005d00 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cf2:	61bb      	str	r3, [r7, #24]
        break;
 8005cf4:	e004      	b.n	8005d00 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	77bb      	strb	r3, [r7, #30]
        break;
 8005cfe:	bf00      	nop
    }

    if (pclk != 0U)
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d018      	beq.n	8005d38 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	085a      	lsrs	r2, r3, #1
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	441a      	add	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	2b0f      	cmp	r3, #15
 8005d1e:	d909      	bls.n	8005d34 <UART_SetConfig+0x238>
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d26:	d205      	bcs.n	8005d34 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	60da      	str	r2, [r3, #12]
 8005d32:	e001      	b.n	8005d38 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005d44:	7fbb      	ldrb	r3, [r7, #30]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3720      	adds	r7, #32
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	efff69f3 	.word	0xefff69f3
 8005d54:	40013800 	.word	0x40013800
 8005d58:	40021000 	.word	0x40021000
 8005d5c:	40004400 	.word	0x40004400
 8005d60:	40004800 	.word	0x40004800
 8005d64:	007a1200 	.word	0x007a1200

08005d68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d74:	f003 0308 	and.w	r3, r3, #8
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00a      	beq.n	8005d92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00a      	beq.n	8005db4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db8:	f003 0302 	and.w	r3, r3, #2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00a      	beq.n	8005dd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dda:	f003 0304 	and.w	r3, r3, #4
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00a      	beq.n	8005df8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	430a      	orrs	r2, r1
 8005df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfc:	f003 0310 	and.w	r3, r3, #16
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00a      	beq.n	8005e1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e1e:	f003 0320 	and.w	r3, r3, #32
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00a      	beq.n	8005e3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d01a      	beq.n	8005e7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e66:	d10a      	bne.n	8005e7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00a      	beq.n	8005ea0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	605a      	str	r2, [r3, #4]
  }
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b098      	sub	sp, #96	@ 0x60
 8005eb0:	af02      	add	r7, sp, #8
 8005eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ebc:	f7fa ff30 	bl	8000d20 <HAL_GetTick>
 8005ec0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0308 	and.w	r3, r3, #8
 8005ecc:	2b08      	cmp	r3, #8
 8005ece:	d12e      	bne.n	8005f2e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ed0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ed4:	9300      	str	r3, [sp, #0]
 8005ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f88c 	bl	8005ffc <UART_WaitOnFlagUntilTimeout>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d021      	beq.n	8005f2e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef2:	e853 3f00 	ldrex	r3, [r3]
 8005ef6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005efa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005efe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	461a      	mov	r2, r3
 8005f06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f08:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f0a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f10:	e841 2300 	strex	r3, r2, [r1]
 8005f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1e6      	bne.n	8005eea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e062      	b.n	8005ff4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b04      	cmp	r3, #4
 8005f3a:	d149      	bne.n	8005fd0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f44:	2200      	movs	r2, #0
 8005f46:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f856 	bl	8005ffc <UART_WaitOnFlagUntilTimeout>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d03c      	beq.n	8005fd0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5e:	e853 3f00 	ldrex	r3, [r3]
 8005f62:	623b      	str	r3, [r7, #32]
   return(result);
 8005f64:	6a3b      	ldr	r3, [r7, #32]
 8005f66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	461a      	mov	r2, r3
 8005f72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f74:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f76:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f7c:	e841 2300 	strex	r3, r2, [r1]
 8005f80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1e6      	bne.n	8005f56 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3308      	adds	r3, #8
 8005f8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	e853 3f00 	ldrex	r3, [r3]
 8005f96:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 0301 	bic.w	r3, r3, #1
 8005f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3308      	adds	r3, #8
 8005fa6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fa8:	61fa      	str	r2, [r7, #28]
 8005faa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fac:	69b9      	ldr	r1, [r7, #24]
 8005fae:	69fa      	ldr	r2, [r7, #28]
 8005fb0:	e841 2300 	strex	r3, r2, [r1]
 8005fb4:	617b      	str	r3, [r7, #20]
   return(result);
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1e5      	bne.n	8005f88 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e011      	b.n	8005ff4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3758      	adds	r7, #88	@ 0x58
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	603b      	str	r3, [r7, #0]
 8006008:	4613      	mov	r3, r2
 800600a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800600c:	e04f      	b.n	80060ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006014:	d04b      	beq.n	80060ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006016:	f7fa fe83 	bl	8000d20 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	429a      	cmp	r2, r3
 8006024:	d302      	bcc.n	800602c <UART_WaitOnFlagUntilTimeout+0x30>
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d101      	bne.n	8006030 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e04e      	b.n	80060ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0304 	and.w	r3, r3, #4
 800603a:	2b00      	cmp	r3, #0
 800603c:	d037      	beq.n	80060ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2b80      	cmp	r3, #128	@ 0x80
 8006042:	d034      	beq.n	80060ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b40      	cmp	r3, #64	@ 0x40
 8006048:	d031      	beq.n	80060ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	f003 0308 	and.w	r3, r3, #8
 8006054:	2b08      	cmp	r3, #8
 8006056:	d110      	bne.n	800607a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2208      	movs	r2, #8
 800605e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f000 f838 	bl	80060d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2208      	movs	r2, #8
 800606a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e029      	b.n	80060ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006084:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006088:	d111      	bne.n	80060ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006092:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f000 f81e 	bl	80060d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2220      	movs	r2, #32
 800609e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e00f      	b.n	80060ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	69da      	ldr	r2, [r3, #28]
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	4013      	ands	r3, r2
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	bf0c      	ite	eq
 80060be:	2301      	moveq	r3, #1
 80060c0:	2300      	movne	r3, #0
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	461a      	mov	r2, r3
 80060c6:	79fb      	ldrb	r3, [r7, #7]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d0a0      	beq.n	800600e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b095      	sub	sp, #84	@ 0x54
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060e6:	e853 3f00 	ldrex	r3, [r3]
 80060ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	461a      	mov	r2, r3
 80060fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80060fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006100:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006102:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006104:	e841 2300 	strex	r3, r2, [r1]
 8006108:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800610a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1e6      	bne.n	80060de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3308      	adds	r3, #8
 8006116:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	e853 3f00 	ldrex	r3, [r3]
 800611e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	f023 0301 	bic.w	r3, r3, #1
 8006126:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3308      	adds	r3, #8
 800612e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006130:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006132:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006134:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006136:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006138:	e841 2300 	strex	r3, r2, [r1]
 800613c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800613e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e5      	bne.n	8006110 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006148:	2b01      	cmp	r3, #1
 800614a:	d118      	bne.n	800617e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	e853 3f00 	ldrex	r3, [r3]
 8006158:	60bb      	str	r3, [r7, #8]
   return(result);
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	f023 0310 	bic.w	r3, r3, #16
 8006160:	647b      	str	r3, [r7, #68]	@ 0x44
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	461a      	mov	r2, r3
 8006168:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800616a:	61bb      	str	r3, [r7, #24]
 800616c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616e:	6979      	ldr	r1, [r7, #20]
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	e841 2300 	strex	r3, r2, [r1]
 8006176:	613b      	str	r3, [r7, #16]
   return(result);
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1e6      	bne.n	800614c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2220      	movs	r2, #32
 8006182:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006192:	bf00      	nop
 8006194:	3754      	adds	r7, #84	@ 0x54
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
	...

080061a0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061a6:	f3ef 8305 	mrs	r3, IPSR
 80061aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80061ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10f      	bne.n	80061d2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061b2:	f3ef 8310 	mrs	r3, PRIMASK
 80061b6:	607b      	str	r3, [r7, #4]
  return(result);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d109      	bne.n	80061d2 <osKernelInitialize+0x32>
 80061be:	4b11      	ldr	r3, [pc, #68]	@ (8006204 <osKernelInitialize+0x64>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d109      	bne.n	80061da <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061c6:	f3ef 8311 	mrs	r3, BASEPRI
 80061ca:	603b      	str	r3, [r7, #0]
  return(result);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80061d2:	f06f 0305 	mvn.w	r3, #5
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	e00c      	b.n	80061f4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80061da:	4b0a      	ldr	r3, [pc, #40]	@ (8006204 <osKernelInitialize+0x64>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d105      	bne.n	80061ee <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80061e2:	4b08      	ldr	r3, [pc, #32]	@ (8006204 <osKernelInitialize+0x64>)
 80061e4:	2201      	movs	r2, #1
 80061e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80061e8:	2300      	movs	r3, #0
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	e002      	b.n	80061f4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80061ee:	f04f 33ff 	mov.w	r3, #4294967295
 80061f2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80061f4:	68fb      	ldr	r3, [r7, #12]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	20000218 	.word	0x20000218

08006208 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800620e:	f3ef 8305 	mrs	r3, IPSR
 8006212:	60bb      	str	r3, [r7, #8]
  return(result);
 8006214:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10f      	bne.n	800623a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800621a:	f3ef 8310 	mrs	r3, PRIMASK
 800621e:	607b      	str	r3, [r7, #4]
  return(result);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d109      	bne.n	800623a <osKernelStart+0x32>
 8006226:	4b11      	ldr	r3, [pc, #68]	@ (800626c <osKernelStart+0x64>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2b02      	cmp	r3, #2
 800622c:	d109      	bne.n	8006242 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800622e:	f3ef 8311 	mrs	r3, BASEPRI
 8006232:	603b      	str	r3, [r7, #0]
  return(result);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <osKernelStart+0x3a>
    stat = osErrorISR;
 800623a:	f06f 0305 	mvn.w	r3, #5
 800623e:	60fb      	str	r3, [r7, #12]
 8006240:	e00e      	b.n	8006260 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006242:	4b0a      	ldr	r3, [pc, #40]	@ (800626c <osKernelStart+0x64>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d107      	bne.n	800625a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800624a:	4b08      	ldr	r3, [pc, #32]	@ (800626c <osKernelStart+0x64>)
 800624c:	2202      	movs	r2, #2
 800624e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006250:	f001 fc18 	bl	8007a84 <vTaskStartScheduler>
      stat = osOK;
 8006254:	2300      	movs	r3, #0
 8006256:	60fb      	str	r3, [r7, #12]
 8006258:	e002      	b.n	8006260 <osKernelStart+0x58>
    } else {
      stat = osError;
 800625a:	f04f 33ff 	mov.w	r3, #4294967295
 800625e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006260:	68fb      	ldr	r3, [r7, #12]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	20000218 	.word	0x20000218

08006270 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006270:	b580      	push	{r7, lr}
 8006272:	b092      	sub	sp, #72	@ 0x48
 8006274:	af04      	add	r7, sp, #16
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800627c:	2300      	movs	r3, #0
 800627e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006280:	f3ef 8305 	mrs	r3, IPSR
 8006284:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006288:	2b00      	cmp	r3, #0
 800628a:	f040 8094 	bne.w	80063b6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800628e:	f3ef 8310 	mrs	r3, PRIMASK
 8006292:	623b      	str	r3, [r7, #32]
  return(result);
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	2b00      	cmp	r3, #0
 8006298:	f040 808d 	bne.w	80063b6 <osThreadNew+0x146>
 800629c:	4b48      	ldr	r3, [pc, #288]	@ (80063c0 <osThreadNew+0x150>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d106      	bne.n	80062b2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80062a4:	f3ef 8311 	mrs	r3, BASEPRI
 80062a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f040 8082 	bne.w	80063b6 <osThreadNew+0x146>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d07e      	beq.n	80063b6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80062b8:	2380      	movs	r3, #128	@ 0x80
 80062ba:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80062bc:	2318      	movs	r3, #24
 80062be:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 80062c0:	2300      	movs	r3, #0
 80062c2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80062c4:	f107 031b 	add.w	r3, r7, #27
 80062c8:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 80062ca:	f04f 33ff 	mov.w	r3, #4294967295
 80062ce:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d045      	beq.n	8006362 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d002      	beq.n	80062e4 <osThreadNew+0x74>
        name = attr->name;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80062f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d008      	beq.n	800630a <osThreadNew+0x9a>
 80062f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062fa:	2b38      	cmp	r3, #56	@ 0x38
 80062fc:	d805      	bhi.n	800630a <osThreadNew+0x9a>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <osThreadNew+0x9e>
        return (NULL);
 800630a:	2300      	movs	r3, #0
 800630c:	e054      	b.n	80063b8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	089b      	lsrs	r3, r3, #2
 800631c:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00e      	beq.n	8006344 <osThreadNew+0xd4>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	2ba7      	cmp	r3, #167	@ 0xa7
 800632c:	d90a      	bls.n	8006344 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006332:	2b00      	cmp	r3, #0
 8006334:	d006      	beq.n	8006344 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d002      	beq.n	8006344 <osThreadNew+0xd4>
        mem = 1;
 800633e:	2301      	movs	r3, #1
 8006340:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006342:	e010      	b.n	8006366 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10c      	bne.n	8006366 <osThreadNew+0xf6>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d108      	bne.n	8006366 <osThreadNew+0xf6>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d104      	bne.n	8006366 <osThreadNew+0xf6>
          mem = 0;
 800635c:	2300      	movs	r3, #0
 800635e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006360:	e001      	b.n	8006366 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006362:	2300      	movs	r3, #0
 8006364:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8006366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006368:	2b01      	cmp	r3, #1
 800636a:	d110      	bne.n	800638e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006374:	9202      	str	r2, [sp, #8]
 8006376:	9301      	str	r3, [sp, #4]
 8006378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006380:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f001 f994 	bl	80076b0 <xTaskCreateStatic>
 8006388:	4603      	mov	r3, r0
 800638a:	617b      	str	r3, [r7, #20]
 800638c:	e013      	b.n	80063b6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800638e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006390:	2b00      	cmp	r3, #0
 8006392:	d110      	bne.n	80063b6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006396:	b29a      	uxth	r2, r3
 8006398:	f107 0314 	add.w	r3, r7, #20
 800639c:	9301      	str	r3, [sp, #4]
 800639e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a0:	9300      	str	r3, [sp, #0]
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f001 f9e1 	bl	800776e <xTaskCreate>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d001      	beq.n	80063b6 <osThreadNew+0x146>
          hTask = NULL;
 80063b2:	2300      	movs	r3, #0
 80063b4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80063b6:	697b      	ldr	r3, [r7, #20]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3738      	adds	r7, #56	@ 0x38
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	20000218 	.word	0x20000218

080063c4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063cc:	f3ef 8305 	mrs	r3, IPSR
 80063d0:	613b      	str	r3, [r7, #16]
  return(result);
 80063d2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10f      	bne.n	80063f8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063d8:	f3ef 8310 	mrs	r3, PRIMASK
 80063dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d109      	bne.n	80063f8 <osDelay+0x34>
 80063e4:	4b0d      	ldr	r3, [pc, #52]	@ (800641c <osDelay+0x58>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d109      	bne.n	8006400 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063ec:	f3ef 8311 	mrs	r3, BASEPRI
 80063f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d003      	beq.n	8006400 <osDelay+0x3c>
    stat = osErrorISR;
 80063f8:	f06f 0305 	mvn.w	r3, #5
 80063fc:	617b      	str	r3, [r7, #20]
 80063fe:	e007      	b.n	8006410 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006400:	2300      	movs	r3, #0
 8006402:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <osDelay+0x4c>
      vTaskDelay(ticks);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f001 fb04 	bl	8007a18 <vTaskDelay>
    }
  }

  return (stat);
 8006410:	697b      	ldr	r3, [r7, #20]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3718      	adds	r7, #24
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	20000218 	.word	0x20000218

08006420 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006420:	b580      	push	{r7, lr}
 8006422:	b08a      	sub	sp, #40	@ 0x28
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006428:	2300      	movs	r3, #0
 800642a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800642c:	f3ef 8305 	mrs	r3, IPSR
 8006430:	613b      	str	r3, [r7, #16]
  return(result);
 8006432:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8006434:	2b00      	cmp	r3, #0
 8006436:	f040 8085 	bne.w	8006544 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800643a:	f3ef 8310 	mrs	r3, PRIMASK
 800643e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d17e      	bne.n	8006544 <osMutexNew+0x124>
 8006446:	4b42      	ldr	r3, [pc, #264]	@ (8006550 <osMutexNew+0x130>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b02      	cmp	r3, #2
 800644c:	d105      	bne.n	800645a <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800644e:	f3ef 8311 	mrs	r3, BASEPRI
 8006452:	60bb      	str	r3, [r7, #8]
  return(result);
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d174      	bne.n	8006544 <osMutexNew+0x124>
    if (attr != NULL) {
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d003      	beq.n	8006468 <osMutexNew+0x48>
      type = attr->attr_bits;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	623b      	str	r3, [r7, #32]
 8006466:	e001      	b.n	800646c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8006468:	2300      	movs	r3, #0
 800646a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	2b00      	cmp	r3, #0
 8006474:	d002      	beq.n	800647c <osMutexNew+0x5c>
      rmtx = 1U;
 8006476:	2301      	movs	r3, #1
 8006478:	61fb      	str	r3, [r7, #28]
 800647a:	e001      	b.n	8006480 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800647c:	2300      	movs	r3, #0
 800647e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006480:	6a3b      	ldr	r3, [r7, #32]
 8006482:	f003 0308 	and.w	r3, r3, #8
 8006486:	2b00      	cmp	r3, #0
 8006488:	d15c      	bne.n	8006544 <osMutexNew+0x124>
      mem = -1;
 800648a:	f04f 33ff 	mov.w	r3, #4294967295
 800648e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d015      	beq.n	80064c2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d006      	beq.n	80064ac <osMutexNew+0x8c>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	2b4f      	cmp	r3, #79	@ 0x4f
 80064a4:	d902      	bls.n	80064ac <osMutexNew+0x8c>
          mem = 1;
 80064a6:	2301      	movs	r3, #1
 80064a8:	61bb      	str	r3, [r7, #24]
 80064aa:	e00c      	b.n	80064c6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d108      	bne.n	80064c6 <osMutexNew+0xa6>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d104      	bne.n	80064c6 <osMutexNew+0xa6>
            mem = 0;
 80064bc:	2300      	movs	r3, #0
 80064be:	61bb      	str	r3, [r7, #24]
 80064c0:	e001      	b.n	80064c6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80064c2:	2300      	movs	r3, #0
 80064c4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d112      	bne.n	80064f2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d007      	beq.n	80064e2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	4619      	mov	r1, r3
 80064d8:	2004      	movs	r0, #4
 80064da:	f000 fb4b 	bl	8006b74 <xQueueCreateMutexStatic>
 80064de:	6278      	str	r0, [r7, #36]	@ 0x24
 80064e0:	e016      	b.n	8006510 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	4619      	mov	r1, r3
 80064e8:	2001      	movs	r0, #1
 80064ea:	f000 fb43 	bl	8006b74 <xQueueCreateMutexStatic>
 80064ee:	6278      	str	r0, [r7, #36]	@ 0x24
 80064f0:	e00e      	b.n	8006510 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10b      	bne.n	8006510 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d004      	beq.n	8006508 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80064fe:	2004      	movs	r0, #4
 8006500:	f000 fb20 	bl	8006b44 <xQueueCreateMutex>
 8006504:	6278      	str	r0, [r7, #36]	@ 0x24
 8006506:	e003      	b.n	8006510 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8006508:	2001      	movs	r0, #1
 800650a:	f000 fb1b 	bl	8006b44 <xQueueCreateMutex>
 800650e:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00c      	beq.n	8006530 <osMutexNew+0x110>
        if (attr != NULL) {
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d003      	beq.n	8006524 <osMutexNew+0x104>
          name = attr->name;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	617b      	str	r3, [r7, #20]
 8006522:	e001      	b.n	8006528 <osMutexNew+0x108>
        } else {
          name = NULL;
 8006524:	2300      	movs	r3, #0
 8006526:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8006528:	6979      	ldr	r1, [r7, #20]
 800652a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800652c:	f001 f862 	bl	80075f4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006532:	2b00      	cmp	r3, #0
 8006534:	d006      	beq.n	8006544 <osMutexNew+0x124>
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d003      	beq.n	8006544 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800653c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653e:	f043 0301 	orr.w	r3, r3, #1
 8006542:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006546:	4618      	mov	r0, r3
 8006548:	3728      	adds	r7, #40	@ 0x28
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	20000218 	.word	0x20000218

08006554 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006554:	b580      	push	{r7, lr}
 8006556:	b088      	sub	sp, #32
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f023 0301 	bic.w	r3, r3, #1
 8006564:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800656e:	2300      	movs	r3, #0
 8006570:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006572:	f3ef 8305 	mrs	r3, IPSR
 8006576:	613b      	str	r3, [r7, #16]
  return(result);
 8006578:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10f      	bne.n	800659e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800657e:	f3ef 8310 	mrs	r3, PRIMASK
 8006582:	60fb      	str	r3, [r7, #12]
  return(result);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d109      	bne.n	800659e <osMutexAcquire+0x4a>
 800658a:	4b20      	ldr	r3, [pc, #128]	@ (800660c <osMutexAcquire+0xb8>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2b02      	cmp	r3, #2
 8006590:	d109      	bne.n	80065a6 <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006592:	f3ef 8311 	mrs	r3, BASEPRI
 8006596:	60bb      	str	r3, [r7, #8]
  return(result);
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800659e:	f06f 0305 	mvn.w	r3, #5
 80065a2:	61fb      	str	r3, [r7, #28]
 80065a4:	e02c      	b.n	8006600 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d103      	bne.n	80065b4 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80065ac:	f06f 0303 	mvn.w	r3, #3
 80065b0:	61fb      	str	r3, [r7, #28]
 80065b2:	e025      	b.n	8006600 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d011      	beq.n	80065de <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80065ba:	6839      	ldr	r1, [r7, #0]
 80065bc:	69b8      	ldr	r0, [r7, #24]
 80065be:	f000 fb29 	bl	8006c14 <xQueueTakeMutexRecursive>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d01b      	beq.n	8006600 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80065ce:	f06f 0301 	mvn.w	r3, #1
 80065d2:	61fb      	str	r3, [r7, #28]
 80065d4:	e014      	b.n	8006600 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80065d6:	f06f 0302 	mvn.w	r3, #2
 80065da:	61fb      	str	r3, [r7, #28]
 80065dc:	e010      	b.n	8006600 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80065de:	6839      	ldr	r1, [r7, #0]
 80065e0:	69b8      	ldr	r0, [r7, #24]
 80065e2:	f000 fdcf 	bl	8007184 <xQueueSemaphoreTake>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d009      	beq.n	8006600 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80065f2:	f06f 0301 	mvn.w	r3, #1
 80065f6:	61fb      	str	r3, [r7, #28]
 80065f8:	e002      	b.n	8006600 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80065fa:	f06f 0302 	mvn.w	r3, #2
 80065fe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006600:	69fb      	ldr	r3, [r7, #28]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3720      	adds	r7, #32
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	20000218 	.word	0x20000218

08006610 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006610:	b580      	push	{r7, lr}
 8006612:	b088      	sub	sp, #32
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f023 0301 	bic.w	r3, r3, #1
 800661e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006628:	2300      	movs	r3, #0
 800662a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800662c:	f3ef 8305 	mrs	r3, IPSR
 8006630:	613b      	str	r3, [r7, #16]
  return(result);
 8006632:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10f      	bne.n	8006658 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006638:	f3ef 8310 	mrs	r3, PRIMASK
 800663c:	60fb      	str	r3, [r7, #12]
  return(result);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d109      	bne.n	8006658 <osMutexRelease+0x48>
 8006644:	4b19      	ldr	r3, [pc, #100]	@ (80066ac <osMutexRelease+0x9c>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2b02      	cmp	r3, #2
 800664a:	d109      	bne.n	8006660 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800664c:	f3ef 8311 	mrs	r3, BASEPRI
 8006650:	60bb      	str	r3, [r7, #8]
  return(result);
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d003      	beq.n	8006660 <osMutexRelease+0x50>
    stat = osErrorISR;
 8006658:	f06f 0305 	mvn.w	r3, #5
 800665c:	61fb      	str	r3, [r7, #28]
 800665e:	e01f      	b.n	80066a0 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d103      	bne.n	800666e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8006666:	f06f 0303 	mvn.w	r3, #3
 800666a:	61fb      	str	r3, [r7, #28]
 800666c:	e018      	b.n	80066a0 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d009      	beq.n	8006688 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006674:	69b8      	ldr	r0, [r7, #24]
 8006676:	f000 fa98 	bl	8006baa <xQueueGiveMutexRecursive>
 800667a:	4603      	mov	r3, r0
 800667c:	2b01      	cmp	r3, #1
 800667e:	d00f      	beq.n	80066a0 <osMutexRelease+0x90>
        stat = osErrorResource;
 8006680:	f06f 0302 	mvn.w	r3, #2
 8006684:	61fb      	str	r3, [r7, #28]
 8006686:	e00b      	b.n	80066a0 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006688:	2300      	movs	r3, #0
 800668a:	2200      	movs	r2, #0
 800668c:	2100      	movs	r1, #0
 800668e:	69b8      	ldr	r0, [r7, #24]
 8006690:	f000 faf8 	bl	8006c84 <xQueueGenericSend>
 8006694:	4603      	mov	r3, r0
 8006696:	2b01      	cmp	r3, #1
 8006698:	d002      	beq.n	80066a0 <osMutexRelease+0x90>
        stat = osErrorResource;
 800669a:	f06f 0302 	mvn.w	r3, #2
 800669e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80066a0:	69fb      	ldr	r3, [r7, #28]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3720      	adds	r7, #32
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	20000218 	.word	0x20000218

080066b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	4a07      	ldr	r2, [pc, #28]	@ (80066dc <vApplicationGetIdleTaskMemory+0x2c>)
 80066c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	4a06      	ldr	r2, [pc, #24]	@ (80066e0 <vApplicationGetIdleTaskMemory+0x30>)
 80066c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2280      	movs	r2, #128	@ 0x80
 80066cc:	601a      	str	r2, [r3, #0]
}
 80066ce:	bf00      	nop
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	2000021c 	.word	0x2000021c
 80066e0:	200002c4 	.word	0x200002c4

080066e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	4a07      	ldr	r2, [pc, #28]	@ (8006710 <vApplicationGetTimerTaskMemory+0x2c>)
 80066f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	4a06      	ldr	r2, [pc, #24]	@ (8006714 <vApplicationGetTimerTaskMemory+0x30>)
 80066fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006702:	601a      	str	r2, [r3, #0]
}
 8006704:	bf00      	nop
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	200004c4 	.word	0x200004c4
 8006714:	2000056c 	.word	0x2000056c

08006718 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f103 0208 	add.w	r2, r3, #8
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f04f 32ff 	mov.w	r2, #4294967295
 8006730:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f103 0208 	add.w	r2, r3, #8
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f103 0208 	add.w	r2, r3, #8
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006766:	bf00      	nop
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006772:	b480      	push	{r7}
 8006774:	b085      	sub	sp, #20
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	683a      	ldr	r2, [r7, #0]
 8006796:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	1c5a      	adds	r2, r3, #1
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	601a      	str	r2, [r3, #0]
}
 80067ae:	bf00      	nop
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067ba:	b480      	push	{r7}
 80067bc:	b085      	sub	sp, #20
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
 80067c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d0:	d103      	bne.n	80067da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	e00c      	b.n	80067f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	3308      	adds	r3, #8
 80067de:	60fb      	str	r3, [r7, #12]
 80067e0:	e002      	b.n	80067e8 <vListInsert+0x2e>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	60fb      	str	r3, [r7, #12]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d2f6      	bcs.n	80067e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	685a      	ldr	r2, [r3, #4]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	601a      	str	r2, [r3, #0]
}
 8006820:	bf00      	nop
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	6892      	ldr	r2, [r2, #8]
 8006842:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	6852      	ldr	r2, [r2, #4]
 800684c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	429a      	cmp	r2, r3
 8006856:	d103      	bne.n	8006860 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	1e5a      	subs	r2, r3, #1
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10b      	bne.n	80068ac <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006898:	f383 8811 	msr	BASEPRI, r3
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80068a6:	bf00      	nop
 80068a8:	bf00      	nop
 80068aa:	e7fd      	b.n	80068a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80068ac:	f002 fba4 	bl	8008ff8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068b8:	68f9      	ldr	r1, [r7, #12]
 80068ba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80068bc:	fb01 f303 	mul.w	r3, r1, r3
 80068c0:	441a      	add	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068dc:	3b01      	subs	r3, #1
 80068de:	68f9      	ldr	r1, [r7, #12]
 80068e0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80068e2:	fb01 f303 	mul.w	r3, r1, r3
 80068e6:	441a      	add	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	22ff      	movs	r2, #255	@ 0xff
 80068f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	22ff      	movs	r2, #255	@ 0xff
 80068f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d114      	bne.n	800692c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d01a      	beq.n	8006940 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	3310      	adds	r3, #16
 800690e:	4618      	mov	r0, r3
 8006910:	f001 fb5c 	bl	8007fcc <xTaskRemoveFromEventList>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d012      	beq.n	8006940 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800691a:	4b0d      	ldr	r3, [pc, #52]	@ (8006950 <xQueueGenericReset+0xd0>)
 800691c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006920:	601a      	str	r2, [r3, #0]
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	e009      	b.n	8006940 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	3310      	adds	r3, #16
 8006930:	4618      	mov	r0, r3
 8006932:	f7ff fef1 	bl	8006718 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	3324      	adds	r3, #36	@ 0x24
 800693a:	4618      	mov	r0, r3
 800693c:	f7ff feec 	bl	8006718 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006940:	f002 fb8c 	bl	800905c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006944:	2301      	movs	r3, #1
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	e000ed04 	.word	0xe000ed04

08006954 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006954:	b580      	push	{r7, lr}
 8006956:	b08e      	sub	sp, #56	@ 0x38
 8006958:	af02      	add	r7, sp, #8
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
 8006960:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10b      	bne.n	8006980 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800696c:	f383 8811 	msr	BASEPRI, r3
 8006970:	f3bf 8f6f 	isb	sy
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800697a:	bf00      	nop
 800697c:	bf00      	nop
 800697e:	e7fd      	b.n	800697c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10b      	bne.n	800699e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006998:	bf00      	nop
 800699a:	bf00      	nop
 800699c:	e7fd      	b.n	800699a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <xQueueGenericCreateStatic+0x56>
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <xQueueGenericCreateStatic+0x5a>
 80069aa:	2301      	movs	r3, #1
 80069ac:	e000      	b.n	80069b0 <xQueueGenericCreateStatic+0x5c>
 80069ae:	2300      	movs	r3, #0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10b      	bne.n	80069cc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80069b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	623b      	str	r3, [r7, #32]
}
 80069c6:	bf00      	nop
 80069c8:	bf00      	nop
 80069ca:	e7fd      	b.n	80069c8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d102      	bne.n	80069d8 <xQueueGenericCreateStatic+0x84>
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <xQueueGenericCreateStatic+0x88>
 80069d8:	2301      	movs	r3, #1
 80069da:	e000      	b.n	80069de <xQueueGenericCreateStatic+0x8a>
 80069dc:	2300      	movs	r3, #0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10b      	bne.n	80069fa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80069e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	61fb      	str	r3, [r7, #28]
}
 80069f4:	bf00      	nop
 80069f6:	bf00      	nop
 80069f8:	e7fd      	b.n	80069f6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80069fa:	2350      	movs	r3, #80	@ 0x50
 80069fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	2b50      	cmp	r3, #80	@ 0x50
 8006a02:	d00b      	beq.n	8006a1c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	61bb      	str	r3, [r7, #24]
}
 8006a16:	bf00      	nop
 8006a18:	bf00      	nop
 8006a1a:	e7fd      	b.n	8006a18 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00d      	beq.n	8006a42 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a2e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	4613      	mov	r3, r2
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	68b9      	ldr	r1, [r7, #8]
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 f844 	bl	8006aca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3730      	adds	r7, #48	@ 0x30
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b08a      	sub	sp, #40	@ 0x28
 8006a50:	af02      	add	r7, sp, #8
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	4613      	mov	r3, r2
 8006a58:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10b      	bne.n	8006a78 <xQueueGenericCreate+0x2c>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	613b      	str	r3, [r7, #16]
}
 8006a72:	bf00      	nop
 8006a74:	bf00      	nop
 8006a76:	e7fd      	b.n	8006a74 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d102      	bne.n	8006a84 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	61fb      	str	r3, [r7, #28]
 8006a82:	e004      	b.n	8006a8e <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	fb02 f303 	mul.w	r3, r2, r3
 8006a8c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	3350      	adds	r3, #80	@ 0x50
 8006a92:	4618      	mov	r0, r3
 8006a94:	f002 fbd2 	bl	800923c <pvPortMalloc>
 8006a98:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00f      	beq.n	8006ac0 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	3350      	adds	r3, #80	@ 0x50
 8006aa4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006aae:	79fa      	ldrb	r2, [r7, #7]
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	68b9      	ldr	r1, [r7, #8]
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f000 f805 	bl	8006aca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006ac0:	69bb      	ldr	r3, [r7, #24]
	}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3720      	adds	r7, #32
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b084      	sub	sp, #16
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	60f8      	str	r0, [r7, #12]
 8006ad2:	60b9      	str	r1, [r7, #8]
 8006ad4:	607a      	str	r2, [r7, #4]
 8006ad6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d103      	bne.n	8006ae6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	e002      	b.n	8006aec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006af8:	2101      	movs	r1, #1
 8006afa:	69b8      	ldr	r0, [r7, #24]
 8006afc:	f7ff fec0 	bl	8006880 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	78fa      	ldrb	r2, [r7, #3]
 8006b04:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b08:	bf00      	nop
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00e      	beq.n	8006b3c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006b30:	2300      	movs	r3, #0
 8006b32:	2200      	movs	r2, #0
 8006b34:	2100      	movs	r1, #0
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f8a4 	bl	8006c84 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006b3c:	bf00      	nop
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	617b      	str	r3, [r7, #20]
 8006b52:	2300      	movs	r3, #0
 8006b54:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006b56:	79fb      	ldrb	r3, [r7, #7]
 8006b58:	461a      	mov	r2, r3
 8006b5a:	6939      	ldr	r1, [r7, #16]
 8006b5c:	6978      	ldr	r0, [r7, #20]
 8006b5e:	f7ff ff75 	bl	8006a4c <xQueueGenericCreate>
 8006b62:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f7ff ffd3 	bl	8006b10 <prvInitialiseMutex>

		return pxNewQueue;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
	}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b088      	sub	sp, #32
 8006b78:	af02      	add	r7, sp, #8
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	6039      	str	r1, [r7, #0]
 8006b7e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006b80:	2301      	movs	r3, #1
 8006b82:	617b      	str	r3, [r7, #20]
 8006b84:	2300      	movs	r3, #0
 8006b86:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006b88:	79fb      	ldrb	r3, [r7, #7]
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	6939      	ldr	r1, [r7, #16]
 8006b92:	6978      	ldr	r0, [r7, #20]
 8006b94:	f7ff fede 	bl	8006954 <xQueueGenericCreateStatic>
 8006b98:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f7ff ffb8 	bl	8006b10 <prvInitialiseMutex>

		return pxNewQueue;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
	}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3718      	adds	r7, #24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006baa:	b590      	push	{r4, r7, lr}
 8006bac:	b087      	sub	sp, #28
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10b      	bne.n	8006bd4 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8006bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc0:	f383 8811 	msr	BASEPRI, r3
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	60fb      	str	r3, [r7, #12]
}
 8006bce:	bf00      	nop
 8006bd0:	bf00      	nop
 8006bd2:	e7fd      	b.n	8006bd0 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	685c      	ldr	r4, [r3, #4]
 8006bd8:	f001 fbc4 	bl	8008364 <xTaskGetCurrentTaskHandle>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	429c      	cmp	r4, r3
 8006be0:	d111      	bne.n	8006c06 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	1e5a      	subs	r2, r3, #1
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d105      	bne.n	8006c00 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	6938      	ldr	r0, [r7, #16]
 8006bfc:	f000 f842 	bl	8006c84 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006c00:	2301      	movs	r3, #1
 8006c02:	617b      	str	r3, [r7, #20]
 8006c04:	e001      	b.n	8006c0a <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006c06:	2300      	movs	r3, #0
 8006c08:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006c0a:	697b      	ldr	r3, [r7, #20]
	}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	371c      	adds	r7, #28
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd90      	pop	{r4, r7, pc}

08006c14 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006c14:	b590      	push	{r4, r7, lr}
 8006c16:	b087      	sub	sp, #28
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10b      	bne.n	8006c40 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8006c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c2c:	f383 8811 	msr	BASEPRI, r3
 8006c30:	f3bf 8f6f 	isb	sy
 8006c34:	f3bf 8f4f 	dsb	sy
 8006c38:	60fb      	str	r3, [r7, #12]
}
 8006c3a:	bf00      	nop
 8006c3c:	bf00      	nop
 8006c3e:	e7fd      	b.n	8006c3c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	685c      	ldr	r4, [r3, #4]
 8006c44:	f001 fb8e 	bl	8008364 <xTaskGetCurrentTaskHandle>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	429c      	cmp	r4, r3
 8006c4c:	d107      	bne.n	8006c5e <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	617b      	str	r3, [r7, #20]
 8006c5c:	e00c      	b.n	8006c78 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006c5e:	6839      	ldr	r1, [r7, #0]
 8006c60:	6938      	ldr	r0, [r7, #16]
 8006c62:	f000 fa8f 	bl	8007184 <xQueueSemaphoreTake>
 8006c66:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d004      	beq.n	8006c78 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	1c5a      	adds	r2, r3, #1
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006c78:	697b      	ldr	r3, [r7, #20]
	}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	371c      	adds	r7, #28
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd90      	pop	{r4, r7, pc}
	...

08006c84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b08e      	sub	sp, #56	@ 0x38
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
 8006c90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c92:	2300      	movs	r3, #0
 8006c94:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10b      	bne.n	8006cb8 <xQueueGenericSend+0x34>
	__asm volatile
 8006ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006cb2:	bf00      	nop
 8006cb4:	bf00      	nop
 8006cb6:	e7fd      	b.n	8006cb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d103      	bne.n	8006cc6 <xQueueGenericSend+0x42>
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d101      	bne.n	8006cca <xQueueGenericSend+0x46>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e000      	b.n	8006ccc <xQueueGenericSend+0x48>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10b      	bne.n	8006ce8 <xQueueGenericSend+0x64>
	__asm volatile
 8006cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cd4:	f383 8811 	msr	BASEPRI, r3
 8006cd8:	f3bf 8f6f 	isb	sy
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ce2:	bf00      	nop
 8006ce4:	bf00      	nop
 8006ce6:	e7fd      	b.n	8006ce4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d103      	bne.n	8006cf6 <xQueueGenericSend+0x72>
 8006cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d101      	bne.n	8006cfa <xQueueGenericSend+0x76>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e000      	b.n	8006cfc <xQueueGenericSend+0x78>
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10b      	bne.n	8006d18 <xQueueGenericSend+0x94>
	__asm volatile
 8006d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d04:	f383 8811 	msr	BASEPRI, r3
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	623b      	str	r3, [r7, #32]
}
 8006d12:	bf00      	nop
 8006d14:	bf00      	nop
 8006d16:	e7fd      	b.n	8006d14 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d18:	f001 fb34 	bl	8008384 <xTaskGetSchedulerState>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d102      	bne.n	8006d28 <xQueueGenericSend+0xa4>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <xQueueGenericSend+0xa8>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e000      	b.n	8006d2e <xQueueGenericSend+0xaa>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10b      	bne.n	8006d4a <xQueueGenericSend+0xc6>
	__asm volatile
 8006d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d36:	f383 8811 	msr	BASEPRI, r3
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	61fb      	str	r3, [r7, #28]
}
 8006d44:	bf00      	nop
 8006d46:	bf00      	nop
 8006d48:	e7fd      	b.n	8006d46 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d4a:	f002 f955 	bl	8008ff8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d302      	bcc.n	8006d60 <xQueueGenericSend+0xdc>
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d129      	bne.n	8006db4 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	68b9      	ldr	r1, [r7, #8]
 8006d64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d66:	f000 fb35 	bl	80073d4 <prvCopyDataToQueue>
 8006d6a:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d010      	beq.n	8006d96 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d76:	3324      	adds	r3, #36	@ 0x24
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f001 f927 	bl	8007fcc <xTaskRemoveFromEventList>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d013      	beq.n	8006dac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006d84:	4b3f      	ldr	r3, [pc, #252]	@ (8006e84 <xQueueGenericSend+0x200>)
 8006d86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	f3bf 8f6f 	isb	sy
 8006d94:	e00a      	b.n	8006dac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d007      	beq.n	8006dac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d9c:	4b39      	ldr	r3, [pc, #228]	@ (8006e84 <xQueueGenericSend+0x200>)
 8006d9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	f3bf 8f4f 	dsb	sy
 8006da8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006dac:	f002 f956 	bl	800905c <vPortExitCritical>
				return pdPASS;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e063      	b.n	8006e7c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d103      	bne.n	8006dc2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006dba:	f002 f94f 	bl	800905c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	e05c      	b.n	8006e7c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d106      	bne.n	8006dd6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006dc8:	f107 0314 	add.w	r3, r7, #20
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f001 f961 	bl	8008094 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006dd6:	f002 f941 	bl	800905c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006dda:	f000 fec3 	bl	8007b64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006dde:	f002 f90b 	bl	8008ff8 <vPortEnterCritical>
 8006de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006de8:	b25b      	sxtb	r3, r3
 8006dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dee:	d103      	bne.n	8006df8 <xQueueGenericSend+0x174>
 8006df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006dfe:	b25b      	sxtb	r3, r3
 8006e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e04:	d103      	bne.n	8006e0e <xQueueGenericSend+0x18a>
 8006e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e0e:	f002 f925 	bl	800905c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e12:	1d3a      	adds	r2, r7, #4
 8006e14:	f107 0314 	add.w	r3, r7, #20
 8006e18:	4611      	mov	r1, r2
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f001 f950 	bl	80080c0 <xTaskCheckForTimeOut>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d124      	bne.n	8006e70 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e28:	f000 fbcc 	bl	80075c4 <prvIsQueueFull>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d018      	beq.n	8006e64 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e34:	3310      	adds	r3, #16
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	4611      	mov	r1, r2
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f001 f874 	bl	8007f28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e42:	f000 fb57 	bl	80074f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e46:	f000 fe9b 	bl	8007b80 <xTaskResumeAll>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f47f af7c 	bne.w	8006d4a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006e52:	4b0c      	ldr	r3, [pc, #48]	@ (8006e84 <xQueueGenericSend+0x200>)
 8006e54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	e772      	b.n	8006d4a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006e64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e66:	f000 fb45 	bl	80074f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e6a:	f000 fe89 	bl	8007b80 <xTaskResumeAll>
 8006e6e:	e76c      	b.n	8006d4a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006e70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e72:	f000 fb3f 	bl	80074f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e76:	f000 fe83 	bl	8007b80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006e7a:	2300      	movs	r3, #0
		}
	}
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3738      	adds	r7, #56	@ 0x38
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	e000ed04 	.word	0xe000ed04

08006e88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b08e      	sub	sp, #56	@ 0x38
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
 8006e94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10b      	bne.n	8006eb8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006eb2:	bf00      	nop
 8006eb4:	bf00      	nop
 8006eb6:	e7fd      	b.n	8006eb4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d103      	bne.n	8006ec6 <xQueueGenericSendFromISR+0x3e>
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <xQueueGenericSendFromISR+0x42>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e000      	b.n	8006ecc <xQueueGenericSendFromISR+0x44>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10b      	bne.n	8006ee8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed4:	f383 8811 	msr	BASEPRI, r3
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	623b      	str	r3, [r7, #32]
}
 8006ee2:	bf00      	nop
 8006ee4:	bf00      	nop
 8006ee6:	e7fd      	b.n	8006ee4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d103      	bne.n	8006ef6 <xQueueGenericSendFromISR+0x6e>
 8006eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d101      	bne.n	8006efa <xQueueGenericSendFromISR+0x72>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e000      	b.n	8006efc <xQueueGenericSendFromISR+0x74>
 8006efa:	2300      	movs	r3, #0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10b      	bne.n	8006f18 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	61fb      	str	r3, [r7, #28]
}
 8006f12:	bf00      	nop
 8006f14:	bf00      	nop
 8006f16:	e7fd      	b.n	8006f14 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f18:	f002 f94e 	bl	80091b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f1c:	f3ef 8211 	mrs	r2, BASEPRI
 8006f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	61ba      	str	r2, [r7, #24]
 8006f32:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f34:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d302      	bcc.n	8006f4a <xQueueGenericSendFromISR+0xc2>
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d12c      	bne.n	8006fa4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f54:	683a      	ldr	r2, [r7, #0]
 8006f56:	68b9      	ldr	r1, [r7, #8]
 8006f58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f5a:	f000 fa3b 	bl	80073d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f5e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8006f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f66:	d112      	bne.n	8006f8e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d016      	beq.n	8006f9e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f72:	3324      	adds	r3, #36	@ 0x24
 8006f74:	4618      	mov	r0, r3
 8006f76:	f001 f829 	bl	8007fcc <xTaskRemoveFromEventList>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00e      	beq.n	8006f9e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00b      	beq.n	8006f9e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	601a      	str	r2, [r3, #0]
 8006f8c:	e007      	b.n	8006f9e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006f92:	3301      	adds	r3, #1
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	b25a      	sxtb	r2, r3
 8006f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8006fa2:	e001      	b.n	8006fa8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006faa:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006fb2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3738      	adds	r7, #56	@ 0x38
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
	...

08006fc0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b08c      	sub	sp, #48	@ 0x30
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10b      	bne.n	8006ff2 <xQueueReceive+0x32>
	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	623b      	str	r3, [r7, #32]
}
 8006fec:	bf00      	nop
 8006fee:	bf00      	nop
 8006ff0:	e7fd      	b.n	8006fee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d103      	bne.n	8007000 <xQueueReceive+0x40>
 8006ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <xQueueReceive+0x44>
 8007000:	2301      	movs	r3, #1
 8007002:	e000      	b.n	8007006 <xQueueReceive+0x46>
 8007004:	2300      	movs	r3, #0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10b      	bne.n	8007022 <xQueueReceive+0x62>
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	61fb      	str	r3, [r7, #28]
}
 800701c:	bf00      	nop
 800701e:	bf00      	nop
 8007020:	e7fd      	b.n	800701e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007022:	f001 f9af 	bl	8008384 <xTaskGetSchedulerState>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d102      	bne.n	8007032 <xQueueReceive+0x72>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d101      	bne.n	8007036 <xQueueReceive+0x76>
 8007032:	2301      	movs	r3, #1
 8007034:	e000      	b.n	8007038 <xQueueReceive+0x78>
 8007036:	2300      	movs	r3, #0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10b      	bne.n	8007054 <xQueueReceive+0x94>
	__asm volatile
 800703c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007040:	f383 8811 	msr	BASEPRI, r3
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	61bb      	str	r3, [r7, #24]
}
 800704e:	bf00      	nop
 8007050:	bf00      	nop
 8007052:	e7fd      	b.n	8007050 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007054:	f001 ffd0 	bl	8008ff8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800705c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800705e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007060:	2b00      	cmp	r3, #0
 8007062:	d01f      	beq.n	80070a4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007064:	68b9      	ldr	r1, [r7, #8]
 8007066:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007068:	f000 fa1e 	bl	80074a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800706c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706e:	1e5a      	subs	r2, r3, #1
 8007070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007072:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00f      	beq.n	800709c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800707c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800707e:	3310      	adds	r3, #16
 8007080:	4618      	mov	r0, r3
 8007082:	f000 ffa3 	bl	8007fcc <xTaskRemoveFromEventList>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d007      	beq.n	800709c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800708c:	4b3c      	ldr	r3, [pc, #240]	@ (8007180 <xQueueReceive+0x1c0>)
 800708e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007092:	601a      	str	r2, [r3, #0]
 8007094:	f3bf 8f4f 	dsb	sy
 8007098:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800709c:	f001 ffde 	bl	800905c <vPortExitCritical>
				return pdPASS;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e069      	b.n	8007178 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d103      	bne.n	80070b2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070aa:	f001 ffd7 	bl	800905c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80070ae:	2300      	movs	r3, #0
 80070b0:	e062      	b.n	8007178 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d106      	bne.n	80070c6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070b8:	f107 0310 	add.w	r3, r7, #16
 80070bc:	4618      	mov	r0, r3
 80070be:	f000 ffe9 	bl	8008094 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070c2:	2301      	movs	r3, #1
 80070c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070c6:	f001 ffc9 	bl	800905c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070ca:	f000 fd4b 	bl	8007b64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070ce:	f001 ff93 	bl	8008ff8 <vPortEnterCritical>
 80070d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070d8:	b25b      	sxtb	r3, r3
 80070da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070de:	d103      	bne.n	80070e8 <xQueueReceive+0x128>
 80070e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070ee:	b25b      	sxtb	r3, r3
 80070f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f4:	d103      	bne.n	80070fe <xQueueReceive+0x13e>
 80070f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070fe:	f001 ffad 	bl	800905c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007102:	1d3a      	adds	r2, r7, #4
 8007104:	f107 0310 	add.w	r3, r7, #16
 8007108:	4611      	mov	r1, r2
 800710a:	4618      	mov	r0, r3
 800710c:	f000 ffd8 	bl	80080c0 <xTaskCheckForTimeOut>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d123      	bne.n	800715e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007116:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007118:	f000 fa3e 	bl	8007598 <prvIsQueueEmpty>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d017      	beq.n	8007152 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007124:	3324      	adds	r3, #36	@ 0x24
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	4611      	mov	r1, r2
 800712a:	4618      	mov	r0, r3
 800712c:	f000 fefc 	bl	8007f28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007130:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007132:	f000 f9df 	bl	80074f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007136:	f000 fd23 	bl	8007b80 <xTaskResumeAll>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d189      	bne.n	8007054 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007140:	4b0f      	ldr	r3, [pc, #60]	@ (8007180 <xQueueReceive+0x1c0>)
 8007142:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007146:	601a      	str	r2, [r3, #0]
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	f3bf 8f6f 	isb	sy
 8007150:	e780      	b.n	8007054 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007152:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007154:	f000 f9ce 	bl	80074f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007158:	f000 fd12 	bl	8007b80 <xTaskResumeAll>
 800715c:	e77a      	b.n	8007054 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800715e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007160:	f000 f9c8 	bl	80074f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007164:	f000 fd0c 	bl	8007b80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007168:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800716a:	f000 fa15 	bl	8007598 <prvIsQueueEmpty>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	f43f af6f 	beq.w	8007054 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007176:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007178:	4618      	mov	r0, r3
 800717a:	3730      	adds	r7, #48	@ 0x30
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	e000ed04 	.word	0xe000ed04

08007184 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b08e      	sub	sp, #56	@ 0x38
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800718e:	2300      	movs	r3, #0
 8007190:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007196:	2300      	movs	r3, #0
 8007198:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800719a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10b      	bne.n	80071b8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80071a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	623b      	str	r3, [r7, #32]
}
 80071b2:	bf00      	nop
 80071b4:	bf00      	nop
 80071b6:	e7fd      	b.n	80071b4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80071b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00b      	beq.n	80071d8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80071c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c4:	f383 8811 	msr	BASEPRI, r3
 80071c8:	f3bf 8f6f 	isb	sy
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	61fb      	str	r3, [r7, #28]
}
 80071d2:	bf00      	nop
 80071d4:	bf00      	nop
 80071d6:	e7fd      	b.n	80071d4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071d8:	f001 f8d4 	bl	8008384 <xTaskGetSchedulerState>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d102      	bne.n	80071e8 <xQueueSemaphoreTake+0x64>
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <xQueueSemaphoreTake+0x68>
 80071e8:	2301      	movs	r3, #1
 80071ea:	e000      	b.n	80071ee <xQueueSemaphoreTake+0x6a>
 80071ec:	2300      	movs	r3, #0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10b      	bne.n	800720a <xQueueSemaphoreTake+0x86>
	__asm volatile
 80071f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f6:	f383 8811 	msr	BASEPRI, r3
 80071fa:	f3bf 8f6f 	isb	sy
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	61bb      	str	r3, [r7, #24]
}
 8007204:	bf00      	nop
 8007206:	bf00      	nop
 8007208:	e7fd      	b.n	8007206 <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800720a:	f001 fef5 	bl	8008ff8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800720e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007212:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007216:	2b00      	cmp	r3, #0
 8007218:	d024      	beq.n	8007264 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800721a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721c:	1e5a      	subs	r2, r3, #1
 800721e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007220:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d104      	bne.n	8007234 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800722a:	f001 fa2f 	bl	800868c <pvTaskIncrementMutexHeldCount>
 800722e:	4602      	mov	r2, r0
 8007230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007232:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00f      	beq.n	800725c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800723c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800723e:	3310      	adds	r3, #16
 8007240:	4618      	mov	r0, r3
 8007242:	f000 fec3 	bl	8007fcc <xTaskRemoveFromEventList>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d007      	beq.n	800725c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800724c:	4b54      	ldr	r3, [pc, #336]	@ (80073a0 <xQueueSemaphoreTake+0x21c>)
 800724e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800725c:	f001 fefe 	bl	800905c <vPortExitCritical>
				return pdPASS;
 8007260:	2301      	movs	r3, #1
 8007262:	e098      	b.n	8007396 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d112      	bne.n	8007290 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800726a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00b      	beq.n	8007288 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	617b      	str	r3, [r7, #20]
}
 8007282:	bf00      	nop
 8007284:	bf00      	nop
 8007286:	e7fd      	b.n	8007284 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007288:	f001 fee8 	bl	800905c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800728c:	2300      	movs	r3, #0
 800728e:	e082      	b.n	8007396 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007292:	2b00      	cmp	r3, #0
 8007294:	d106      	bne.n	80072a4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007296:	f107 030c 	add.w	r3, r7, #12
 800729a:	4618      	mov	r0, r3
 800729c:	f000 fefa 	bl	8008094 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072a0:	2301      	movs	r3, #1
 80072a2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072a4:	f001 feda 	bl	800905c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072a8:	f000 fc5c 	bl	8007b64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072ac:	f001 fea4 	bl	8008ff8 <vPortEnterCritical>
 80072b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072b6:	b25b      	sxtb	r3, r3
 80072b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072bc:	d103      	bne.n	80072c6 <xQueueSemaphoreTake+0x142>
 80072be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072cc:	b25b      	sxtb	r3, r3
 80072ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d2:	d103      	bne.n	80072dc <xQueueSemaphoreTake+0x158>
 80072d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072dc:	f001 febe 	bl	800905c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072e0:	463a      	mov	r2, r7
 80072e2:	f107 030c 	add.w	r3, r7, #12
 80072e6:	4611      	mov	r1, r2
 80072e8:	4618      	mov	r0, r3
 80072ea:	f000 fee9 	bl	80080c0 <xTaskCheckForTimeOut>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d132      	bne.n	800735a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80072f6:	f000 f94f 	bl	8007598 <prvIsQueueEmpty>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d026      	beq.n	800734e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d109      	bne.n	800731c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007308:	f001 fe76 	bl	8008ff8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800730c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	4618      	mov	r0, r3
 8007312:	f001 f855 	bl	80083c0 <xTaskPriorityInherit>
 8007316:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007318:	f001 fea0 	bl	800905c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800731c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800731e:	3324      	adds	r3, #36	@ 0x24
 8007320:	683a      	ldr	r2, [r7, #0]
 8007322:	4611      	mov	r1, r2
 8007324:	4618      	mov	r0, r3
 8007326:	f000 fdff 	bl	8007f28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800732a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800732c:	f000 f8e2 	bl	80074f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007330:	f000 fc26 	bl	8007b80 <xTaskResumeAll>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	f47f af67 	bne.w	800720a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800733c:	4b18      	ldr	r3, [pc, #96]	@ (80073a0 <xQueueSemaphoreTake+0x21c>)
 800733e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	e75d      	b.n	800720a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800734e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007350:	f000 f8d0 	bl	80074f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007354:	f000 fc14 	bl	8007b80 <xTaskResumeAll>
 8007358:	e757      	b.n	800720a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800735a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800735c:	f000 f8ca 	bl	80074f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007360:	f000 fc0e 	bl	8007b80 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007364:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007366:	f000 f917 	bl	8007598 <prvIsQueueEmpty>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	f43f af4c 	beq.w	800720a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00d      	beq.n	8007394 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007378:	f001 fe3e 	bl	8008ff8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800737c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800737e:	f000 f811 	bl	80073a4 <prvGetDisinheritPriorityAfterTimeout>
 8007382:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8007384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800738a:	4618      	mov	r0, r3
 800738c:	f001 f8f6 	bl	800857c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007390:	f001 fe64 	bl	800905c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007394:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007396:	4618      	mov	r0, r3
 8007398:	3738      	adds	r7, #56	@ 0x38
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	e000ed04 	.word	0xe000ed04

080073a4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d006      	beq.n	80073c2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80073be:	60fb      	str	r3, [r7, #12]
 80073c0:	e001      	b.n	80073c6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80073c2:	2300      	movs	r3, #0
 80073c4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80073c6:	68fb      	ldr	r3, [r7, #12]
	}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3714      	adds	r7, #20
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80073e0:	2300      	movs	r3, #0
 80073e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10d      	bne.n	800740e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d14d      	bne.n	8007496 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	4618      	mov	r0, r3
 8007400:	f001 f84c 	bl	800849c <xTaskPriorityDisinherit>
 8007404:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	605a      	str	r2, [r3, #4]
 800740c:	e043      	b.n	8007496 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d119      	bne.n	8007448 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6898      	ldr	r0, [r3, #8]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800741c:	461a      	mov	r2, r3
 800741e:	68b9      	ldr	r1, [r7, #8]
 8007420:	f002 f996 	bl	8009750 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	689a      	ldr	r2, [r3, #8]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800742c:	441a      	add	r2, r3
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	689a      	ldr	r2, [r3, #8]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	429a      	cmp	r2, r3
 800743c:	d32b      	bcc.n	8007496 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	609a      	str	r2, [r3, #8]
 8007446:	e026      	b.n	8007496 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	68d8      	ldr	r0, [r3, #12]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007450:	461a      	mov	r2, r3
 8007452:	68b9      	ldr	r1, [r7, #8]
 8007454:	f002 f97c 	bl	8009750 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	68da      	ldr	r2, [r3, #12]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007460:	425b      	negs	r3, r3
 8007462:	441a      	add	r2, r3
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	68da      	ldr	r2, [r3, #12]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	429a      	cmp	r2, r3
 8007472:	d207      	bcs.n	8007484 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800747c:	425b      	negs	r3, r3
 800747e:	441a      	add	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b02      	cmp	r3, #2
 8007488:	d105      	bne.n	8007496 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d002      	beq.n	8007496 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	3b01      	subs	r3, #1
 8007494:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	1c5a      	adds	r2, r3, #1
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800749e:	697b      	ldr	r3, [r7, #20]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3718      	adds	r7, #24
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d018      	beq.n	80074ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	68da      	ldr	r2, [r3, #12]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c2:	441a      	add	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	68da      	ldr	r2, [r3, #12]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d303      	bcc.n	80074dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68d9      	ldr	r1, [r3, #12]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e4:	461a      	mov	r2, r3
 80074e6:	6838      	ldr	r0, [r7, #0]
 80074e8:	f002 f932 	bl	8009750 <memcpy>
	}
}
 80074ec:	bf00      	nop
 80074ee:	3708      	adds	r7, #8
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80074fc:	f001 fd7c 	bl	8008ff8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007506:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007508:	e011      	b.n	800752e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800750e:	2b00      	cmp	r3, #0
 8007510:	d012      	beq.n	8007538 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	3324      	adds	r3, #36	@ 0x24
 8007516:	4618      	mov	r0, r3
 8007518:	f000 fd58 	bl	8007fcc <xTaskRemoveFromEventList>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d001      	beq.n	8007526 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007522:	f000 fe31 	bl	8008188 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007526:	7bfb      	ldrb	r3, [r7, #15]
 8007528:	3b01      	subs	r3, #1
 800752a:	b2db      	uxtb	r3, r3
 800752c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800752e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007532:	2b00      	cmp	r3, #0
 8007534:	dce9      	bgt.n	800750a <prvUnlockQueue+0x16>
 8007536:	e000      	b.n	800753a <prvUnlockQueue+0x46>
					break;
 8007538:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	22ff      	movs	r2, #255	@ 0xff
 800753e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007542:	f001 fd8b 	bl	800905c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007546:	f001 fd57 	bl	8008ff8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007550:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007552:	e011      	b.n	8007578 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d012      	beq.n	8007582 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	3310      	adds	r3, #16
 8007560:	4618      	mov	r0, r3
 8007562:	f000 fd33 	bl	8007fcc <xTaskRemoveFromEventList>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d001      	beq.n	8007570 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800756c:	f000 fe0c 	bl	8008188 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007570:	7bbb      	ldrb	r3, [r7, #14]
 8007572:	3b01      	subs	r3, #1
 8007574:	b2db      	uxtb	r3, r3
 8007576:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007578:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800757c:	2b00      	cmp	r3, #0
 800757e:	dce9      	bgt.n	8007554 <prvUnlockQueue+0x60>
 8007580:	e000      	b.n	8007584 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007582:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	22ff      	movs	r2, #255	@ 0xff
 8007588:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800758c:	f001 fd66 	bl	800905c <vPortExitCritical>
}
 8007590:	bf00      	nop
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075a0:	f001 fd2a 	bl	8008ff8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d102      	bne.n	80075b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80075ac:	2301      	movs	r3, #1
 80075ae:	60fb      	str	r3, [r7, #12]
 80075b0:	e001      	b.n	80075b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80075b2:	2300      	movs	r3, #0
 80075b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075b6:	f001 fd51 	bl	800905c <vPortExitCritical>

	return xReturn;
 80075ba:	68fb      	ldr	r3, [r7, #12]
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075cc:	f001 fd14 	bl	8008ff8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075d8:	429a      	cmp	r2, r3
 80075da:	d102      	bne.n	80075e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80075dc:	2301      	movs	r3, #1
 80075de:	60fb      	str	r3, [r7, #12]
 80075e0:	e001      	b.n	80075e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80075e2:	2300      	movs	r3, #0
 80075e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075e6:	f001 fd39 	bl	800905c <vPortExitCritical>

	return xReturn;
 80075ea:	68fb      	ldr	r3, [r7, #12]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075fe:	2300      	movs	r3, #0
 8007600:	60fb      	str	r3, [r7, #12]
 8007602:	e014      	b.n	800762e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007604:	4a0f      	ldr	r2, [pc, #60]	@ (8007644 <vQueueAddToRegistry+0x50>)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10b      	bne.n	8007628 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007610:	490c      	ldr	r1, [pc, #48]	@ (8007644 <vQueueAddToRegistry+0x50>)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800761a:	4a0a      	ldr	r2, [pc, #40]	@ (8007644 <vQueueAddToRegistry+0x50>)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	00db      	lsls	r3, r3, #3
 8007620:	4413      	add	r3, r2
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007626:	e006      	b.n	8007636 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	3301      	adds	r3, #1
 800762c:	60fb      	str	r3, [r7, #12]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2b07      	cmp	r3, #7
 8007632:	d9e7      	bls.n	8007604 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007634:	bf00      	nop
 8007636:	bf00      	nop
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	2000096c 	.word	0x2000096c

08007648 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007658:	f001 fcce 	bl	8008ff8 <vPortEnterCritical>
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007662:	b25b      	sxtb	r3, r3
 8007664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007668:	d103      	bne.n	8007672 <vQueueWaitForMessageRestricted+0x2a>
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007678:	b25b      	sxtb	r3, r3
 800767a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800767e:	d103      	bne.n	8007688 <vQueueWaitForMessageRestricted+0x40>
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007688:	f001 fce8 	bl	800905c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007690:	2b00      	cmp	r3, #0
 8007692:	d106      	bne.n	80076a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	3324      	adds	r3, #36	@ 0x24
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	68b9      	ldr	r1, [r7, #8]
 800769c:	4618      	mov	r0, r3
 800769e:	f000 fc69 	bl	8007f74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80076a2:	6978      	ldr	r0, [r7, #20]
 80076a4:	f7ff ff26 	bl	80074f4 <prvUnlockQueue>
	}
 80076a8:	bf00      	nop
 80076aa:	3718      	adds	r7, #24
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b08e      	sub	sp, #56	@ 0x38
 80076b4:	af04      	add	r7, sp, #16
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
 80076bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80076be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10b      	bne.n	80076dc <xTaskCreateStatic+0x2c>
	__asm volatile
 80076c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c8:	f383 8811 	msr	BASEPRI, r3
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	623b      	str	r3, [r7, #32]
}
 80076d6:	bf00      	nop
 80076d8:	bf00      	nop
 80076da:	e7fd      	b.n	80076d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80076dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d10b      	bne.n	80076fa <xTaskCreateStatic+0x4a>
	__asm volatile
 80076e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e6:	f383 8811 	msr	BASEPRI, r3
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	61fb      	str	r3, [r7, #28]
}
 80076f4:	bf00      	nop
 80076f6:	bf00      	nop
 80076f8:	e7fd      	b.n	80076f6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80076fa:	23a8      	movs	r3, #168	@ 0xa8
 80076fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	2ba8      	cmp	r3, #168	@ 0xa8
 8007702:	d00b      	beq.n	800771c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	61bb      	str	r3, [r7, #24]
}
 8007716:	bf00      	nop
 8007718:	bf00      	nop
 800771a:	e7fd      	b.n	8007718 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800771c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800771e:	2b00      	cmp	r3, #0
 8007720:	d01e      	beq.n	8007760 <xTaskCreateStatic+0xb0>
 8007722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007724:	2b00      	cmp	r3, #0
 8007726:	d01b      	beq.n	8007760 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800772a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800772c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007730:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007734:	2202      	movs	r2, #2
 8007736:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800773a:	2300      	movs	r3, #0
 800773c:	9303      	str	r3, [sp, #12]
 800773e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007740:	9302      	str	r3, [sp, #8]
 8007742:	f107 0314 	add.w	r3, r7, #20
 8007746:	9301      	str	r3, [sp, #4]
 8007748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	68b9      	ldr	r1, [r7, #8]
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f000 f850 	bl	80077f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007758:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800775a:	f000 f8ed 	bl	8007938 <prvAddNewTaskToReadyList>
 800775e:	e001      	b.n	8007764 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8007760:	2300      	movs	r3, #0
 8007762:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007764:	697b      	ldr	r3, [r7, #20]
	}
 8007766:	4618      	mov	r0, r3
 8007768:	3728      	adds	r7, #40	@ 0x28
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800776e:	b580      	push	{r7, lr}
 8007770:	b08c      	sub	sp, #48	@ 0x30
 8007772:	af04      	add	r7, sp, #16
 8007774:	60f8      	str	r0, [r7, #12]
 8007776:	60b9      	str	r1, [r7, #8]
 8007778:	603b      	str	r3, [r7, #0]
 800777a:	4613      	mov	r3, r2
 800777c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800777e:	88fb      	ldrh	r3, [r7, #6]
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4618      	mov	r0, r3
 8007784:	f001 fd5a 	bl	800923c <pvPortMalloc>
 8007788:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00e      	beq.n	80077ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007790:	20a8      	movs	r0, #168	@ 0xa8
 8007792:	f001 fd53 	bl	800923c <pvPortMalloc>
 8007796:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d003      	beq.n	80077a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	697a      	ldr	r2, [r7, #20]
 80077a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80077a4:	e005      	b.n	80077b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80077a6:	6978      	ldr	r0, [r7, #20]
 80077a8:	f001 fe10 	bl	80093cc <vPortFree>
 80077ac:	e001      	b.n	80077b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80077ae:	2300      	movs	r3, #0
 80077b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d017      	beq.n	80077e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80077c0:	88fa      	ldrh	r2, [r7, #6]
 80077c2:	2300      	movs	r3, #0
 80077c4:	9303      	str	r3, [sp, #12]
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	9302      	str	r3, [sp, #8]
 80077ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077cc:	9301      	str	r3, [sp, #4]
 80077ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	68b9      	ldr	r1, [r7, #8]
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f000 f80e 	bl	80077f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80077dc:	69f8      	ldr	r0, [r7, #28]
 80077de:	f000 f8ab 	bl	8007938 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80077e2:	2301      	movs	r3, #1
 80077e4:	61bb      	str	r3, [r7, #24]
 80077e6:	e002      	b.n	80077ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80077e8:	f04f 33ff 	mov.w	r3, #4294967295
 80077ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80077ee:	69bb      	ldr	r3, [r7, #24]
	}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3720      	adds	r7, #32
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b088      	sub	sp, #32
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
 8007804:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007808:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	461a      	mov	r2, r3
 8007810:	21a5      	movs	r1, #165	@ 0xa5
 8007812:	f001 ff13 	bl	800963c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007818:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007820:	3b01      	subs	r3, #1
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4413      	add	r3, r2
 8007826:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	f023 0307 	bic.w	r3, r3, #7
 800782e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	f003 0307 	and.w	r3, r3, #7
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00b      	beq.n	8007852 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800783a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	617b      	str	r3, [r7, #20]
}
 800784c:	bf00      	nop
 800784e:	bf00      	nop
 8007850:	e7fd      	b.n	800784e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007852:	2300      	movs	r3, #0
 8007854:	61fb      	str	r3, [r7, #28]
 8007856:	e012      	b.n	800787e <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	4413      	add	r3, r2
 800785e:	7819      	ldrb	r1, [r3, #0]
 8007860:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	4413      	add	r3, r2
 8007866:	3334      	adds	r3, #52	@ 0x34
 8007868:	460a      	mov	r2, r1
 800786a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	4413      	add	r3, r2
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d006      	beq.n	8007886 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	3301      	adds	r3, #1
 800787c:	61fb      	str	r3, [r7, #28]
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	2b0f      	cmp	r3, #15
 8007882:	d9e9      	bls.n	8007858 <prvInitialiseNewTask+0x60>
 8007884:	e000      	b.n	8007888 <prvInitialiseNewTask+0x90>
		{
			break;
 8007886:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788a:	2200      	movs	r2, #0
 800788c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007892:	2b37      	cmp	r3, #55	@ 0x37
 8007894:	d901      	bls.n	800789a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007896:	2337      	movs	r3, #55	@ 0x37
 8007898:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800789a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800789e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80078a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078a4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80078a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a8:	2200      	movs	r2, #0
 80078aa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80078ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ae:	3304      	adds	r3, #4
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7fe ff51 	bl	8006758 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80078b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b8:	3318      	adds	r3, #24
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fe ff4c 	bl	8006758 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80078c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80078cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80078d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078d4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80078d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d8:	2200      	movs	r2, #0
 80078da:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80078de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80078e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e8:	3354      	adds	r3, #84	@ 0x54
 80078ea:	224c      	movs	r2, #76	@ 0x4c
 80078ec:	2100      	movs	r1, #0
 80078ee:	4618      	mov	r0, r3
 80078f0:	f001 fea4 	bl	800963c <memset>
 80078f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f6:	4a0d      	ldr	r2, [pc, #52]	@ (800792c <prvInitialiseNewTask+0x134>)
 80078f8:	659a      	str	r2, [r3, #88]	@ 0x58
 80078fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fc:	4a0c      	ldr	r2, [pc, #48]	@ (8007930 <prvInitialiseNewTask+0x138>)
 80078fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007902:	4a0c      	ldr	r2, [pc, #48]	@ (8007934 <prvInitialiseNewTask+0x13c>)
 8007904:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007906:	683a      	ldr	r2, [r7, #0]
 8007908:	68f9      	ldr	r1, [r7, #12]
 800790a:	69b8      	ldr	r0, [r7, #24]
 800790c:	f001 fa46 	bl	8008d9c <pxPortInitialiseStack>
 8007910:	4602      	mov	r2, r0
 8007912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007914:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800791c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800791e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007920:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007922:	bf00      	nop
 8007924:	3720      	adds	r7, #32
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	20001bf8 	.word	0x20001bf8
 8007930:	20001c60 	.word	0x20001c60
 8007934:	20001cc8 	.word	0x20001cc8

08007938 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007940:	f001 fb5a 	bl	8008ff8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007944:	4b2d      	ldr	r3, [pc, #180]	@ (80079fc <prvAddNewTaskToReadyList+0xc4>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	3301      	adds	r3, #1
 800794a:	4a2c      	ldr	r2, [pc, #176]	@ (80079fc <prvAddNewTaskToReadyList+0xc4>)
 800794c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800794e:	4b2c      	ldr	r3, [pc, #176]	@ (8007a00 <prvAddNewTaskToReadyList+0xc8>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d109      	bne.n	800796a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007956:	4a2a      	ldr	r2, [pc, #168]	@ (8007a00 <prvAddNewTaskToReadyList+0xc8>)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800795c:	4b27      	ldr	r3, [pc, #156]	@ (80079fc <prvAddNewTaskToReadyList+0xc4>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d110      	bne.n	8007986 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007964:	f000 fc34 	bl	80081d0 <prvInitialiseTaskLists>
 8007968:	e00d      	b.n	8007986 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800796a:	4b26      	ldr	r3, [pc, #152]	@ (8007a04 <prvAddNewTaskToReadyList+0xcc>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d109      	bne.n	8007986 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007972:	4b23      	ldr	r3, [pc, #140]	@ (8007a00 <prvAddNewTaskToReadyList+0xc8>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800797c:	429a      	cmp	r2, r3
 800797e:	d802      	bhi.n	8007986 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007980:	4a1f      	ldr	r2, [pc, #124]	@ (8007a00 <prvAddNewTaskToReadyList+0xc8>)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007986:	4b20      	ldr	r3, [pc, #128]	@ (8007a08 <prvAddNewTaskToReadyList+0xd0>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3301      	adds	r3, #1
 800798c:	4a1e      	ldr	r2, [pc, #120]	@ (8007a08 <prvAddNewTaskToReadyList+0xd0>)
 800798e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007990:	4b1d      	ldr	r3, [pc, #116]	@ (8007a08 <prvAddNewTaskToReadyList+0xd0>)
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800799c:	4b1b      	ldr	r3, [pc, #108]	@ (8007a0c <prvAddNewTaskToReadyList+0xd4>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d903      	bls.n	80079ac <prvAddNewTaskToReadyList+0x74>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a8:	4a18      	ldr	r2, [pc, #96]	@ (8007a0c <prvAddNewTaskToReadyList+0xd4>)
 80079aa:	6013      	str	r3, [r2, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079b0:	4613      	mov	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4413      	add	r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4a15      	ldr	r2, [pc, #84]	@ (8007a10 <prvAddNewTaskToReadyList+0xd8>)
 80079ba:	441a      	add	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	3304      	adds	r3, #4
 80079c0:	4619      	mov	r1, r3
 80079c2:	4610      	mov	r0, r2
 80079c4:	f7fe fed5 	bl	8006772 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80079c8:	f001 fb48 	bl	800905c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80079cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007a04 <prvAddNewTaskToReadyList+0xcc>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00e      	beq.n	80079f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80079d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007a00 <prvAddNewTaskToReadyList+0xc8>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079de:	429a      	cmp	r2, r3
 80079e0:	d207      	bcs.n	80079f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80079e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007a14 <prvAddNewTaskToReadyList+0xdc>)
 80079e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079e8:	601a      	str	r2, [r3, #0]
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079f2:	bf00      	nop
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	20000e80 	.word	0x20000e80
 8007a00:	200009ac 	.word	0x200009ac
 8007a04:	20000e8c 	.word	0x20000e8c
 8007a08:	20000e9c 	.word	0x20000e9c
 8007a0c:	20000e88 	.word	0x20000e88
 8007a10:	200009b0 	.word	0x200009b0
 8007a14:	e000ed04 	.word	0xe000ed04

08007a18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007a20:	2300      	movs	r3, #0
 8007a22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d018      	beq.n	8007a5c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007a2a:	4b14      	ldr	r3, [pc, #80]	@ (8007a7c <vTaskDelay+0x64>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00b      	beq.n	8007a4a <vTaskDelay+0x32>
	__asm volatile
 8007a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a36:	f383 8811 	msr	BASEPRI, r3
 8007a3a:	f3bf 8f6f 	isb	sy
 8007a3e:	f3bf 8f4f 	dsb	sy
 8007a42:	60bb      	str	r3, [r7, #8]
}
 8007a44:	bf00      	nop
 8007a46:	bf00      	nop
 8007a48:	e7fd      	b.n	8007a46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007a4a:	f000 f88b 	bl	8007b64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007a4e:	2100      	movs	r1, #0
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fe2f 	bl	80086b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007a56:	f000 f893 	bl	8007b80 <xTaskResumeAll>
 8007a5a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d107      	bne.n	8007a72 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007a62:	4b07      	ldr	r3, [pc, #28]	@ (8007a80 <vTaskDelay+0x68>)
 8007a64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a68:	601a      	str	r2, [r3, #0]
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a72:	bf00      	nop
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	20000ea8 	.word	0x20000ea8
 8007a80:	e000ed04 	.word	0xe000ed04

08007a84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b08a      	sub	sp, #40	@ 0x28
 8007a88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a92:	463a      	mov	r2, r7
 8007a94:	1d39      	adds	r1, r7, #4
 8007a96:	f107 0308 	add.w	r3, r7, #8
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7fe fe08 	bl	80066b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	9202      	str	r2, [sp, #8]
 8007aa8:	9301      	str	r3, [sp, #4]
 8007aaa:	2300      	movs	r3, #0
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	2300      	movs	r3, #0
 8007ab0:	460a      	mov	r2, r1
 8007ab2:	4924      	ldr	r1, [pc, #144]	@ (8007b44 <vTaskStartScheduler+0xc0>)
 8007ab4:	4824      	ldr	r0, [pc, #144]	@ (8007b48 <vTaskStartScheduler+0xc4>)
 8007ab6:	f7ff fdfb 	bl	80076b0 <xTaskCreateStatic>
 8007aba:	4603      	mov	r3, r0
 8007abc:	4a23      	ldr	r2, [pc, #140]	@ (8007b4c <vTaskStartScheduler+0xc8>)
 8007abe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ac0:	4b22      	ldr	r3, [pc, #136]	@ (8007b4c <vTaskStartScheduler+0xc8>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d002      	beq.n	8007ace <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	617b      	str	r3, [r7, #20]
 8007acc:	e001      	b.n	8007ad2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d102      	bne.n	8007ade <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007ad8:	f000 fe40 	bl	800875c <xTimerCreateTimerTask>
 8007adc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d11b      	bne.n	8007b1c <vTaskStartScheduler+0x98>
	__asm volatile
 8007ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae8:	f383 8811 	msr	BASEPRI, r3
 8007aec:	f3bf 8f6f 	isb	sy
 8007af0:	f3bf 8f4f 	dsb	sy
 8007af4:	613b      	str	r3, [r7, #16]
}
 8007af6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007af8:	4b15      	ldr	r3, [pc, #84]	@ (8007b50 <vTaskStartScheduler+0xcc>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3354      	adds	r3, #84	@ 0x54
 8007afe:	4a15      	ldr	r2, [pc, #84]	@ (8007b54 <vTaskStartScheduler+0xd0>)
 8007b00:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007b02:	4b15      	ldr	r3, [pc, #84]	@ (8007b58 <vTaskStartScheduler+0xd4>)
 8007b04:	f04f 32ff 	mov.w	r2, #4294967295
 8007b08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007b0a:	4b14      	ldr	r3, [pc, #80]	@ (8007b5c <vTaskStartScheduler+0xd8>)
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007b10:	4b13      	ldr	r3, [pc, #76]	@ (8007b60 <vTaskStartScheduler+0xdc>)
 8007b12:	2200      	movs	r2, #0
 8007b14:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007b16:	f001 f9cb 	bl	8008eb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007b1a:	e00f      	b.n	8007b3c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b22:	d10b      	bne.n	8007b3c <vTaskStartScheduler+0xb8>
	__asm volatile
 8007b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b28:	f383 8811 	msr	BASEPRI, r3
 8007b2c:	f3bf 8f6f 	isb	sy
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	60fb      	str	r3, [r7, #12]
}
 8007b36:	bf00      	nop
 8007b38:	bf00      	nop
 8007b3a:	e7fd      	b.n	8007b38 <vTaskStartScheduler+0xb4>
}
 8007b3c:	bf00      	nop
 8007b3e:	3718      	adds	r7, #24
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	0800a06c 	.word	0x0800a06c
 8007b48:	080081a1 	.word	0x080081a1
 8007b4c:	20000ea4 	.word	0x20000ea4
 8007b50:	200009ac 	.word	0x200009ac
 8007b54:	20000010 	.word	0x20000010
 8007b58:	20000ea0 	.word	0x20000ea0
 8007b5c:	20000e8c 	.word	0x20000e8c
 8007b60:	20000e84 	.word	0x20000e84

08007b64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b64:	b480      	push	{r7}
 8007b66:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007b68:	4b04      	ldr	r3, [pc, #16]	@ (8007b7c <vTaskSuspendAll+0x18>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	4a03      	ldr	r2, [pc, #12]	@ (8007b7c <vTaskSuspendAll+0x18>)
 8007b70:	6013      	str	r3, [r2, #0]
}
 8007b72:	bf00      	nop
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr
 8007b7c:	20000ea8 	.word	0x20000ea8

08007b80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b86:	2300      	movs	r3, #0
 8007b88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b8e:	4b42      	ldr	r3, [pc, #264]	@ (8007c98 <xTaskResumeAll+0x118>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10b      	bne.n	8007bae <xTaskResumeAll+0x2e>
	__asm volatile
 8007b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b9a:	f383 8811 	msr	BASEPRI, r3
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	f3bf 8f4f 	dsb	sy
 8007ba6:	603b      	str	r3, [r7, #0]
}
 8007ba8:	bf00      	nop
 8007baa:	bf00      	nop
 8007bac:	e7fd      	b.n	8007baa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007bae:	f001 fa23 	bl	8008ff8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007bb2:	4b39      	ldr	r3, [pc, #228]	@ (8007c98 <xTaskResumeAll+0x118>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	4a37      	ldr	r2, [pc, #220]	@ (8007c98 <xTaskResumeAll+0x118>)
 8007bba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bbc:	4b36      	ldr	r3, [pc, #216]	@ (8007c98 <xTaskResumeAll+0x118>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d162      	bne.n	8007c8a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007bc4:	4b35      	ldr	r3, [pc, #212]	@ (8007c9c <xTaskResumeAll+0x11c>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d05e      	beq.n	8007c8a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bcc:	e02f      	b.n	8007c2e <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007bce:	4b34      	ldr	r3, [pc, #208]	@ (8007ca0 <xTaskResumeAll+0x120>)
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	3318      	adds	r3, #24
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fe fe26 	bl	800682c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	3304      	adds	r3, #4
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7fe fe21 	bl	800682c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bee:	4b2d      	ldr	r3, [pc, #180]	@ (8007ca4 <xTaskResumeAll+0x124>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d903      	bls.n	8007bfe <xTaskResumeAll+0x7e>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfa:	4a2a      	ldr	r2, [pc, #168]	@ (8007ca4 <xTaskResumeAll+0x124>)
 8007bfc:	6013      	str	r3, [r2, #0]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c02:	4613      	mov	r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4413      	add	r3, r2
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4a27      	ldr	r2, [pc, #156]	@ (8007ca8 <xTaskResumeAll+0x128>)
 8007c0c:	441a      	add	r2, r3
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	3304      	adds	r3, #4
 8007c12:	4619      	mov	r1, r3
 8007c14:	4610      	mov	r0, r2
 8007c16:	f7fe fdac 	bl	8006772 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c1e:	4b23      	ldr	r3, [pc, #140]	@ (8007cac <xTaskResumeAll+0x12c>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d302      	bcc.n	8007c2e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007c28:	4b21      	ldr	r3, [pc, #132]	@ (8007cb0 <xTaskResumeAll+0x130>)
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8007ca0 <xTaskResumeAll+0x120>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1cb      	bne.n	8007bce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d001      	beq.n	8007c40 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007c3c:	f000 fb6c 	bl	8008318 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007c40:	4b1c      	ldr	r3, [pc, #112]	@ (8007cb4 <xTaskResumeAll+0x134>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d010      	beq.n	8007c6e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007c4c:	f000 f846 	bl	8007cdc <xTaskIncrementTick>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d002      	beq.n	8007c5c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007c56:	4b16      	ldr	r3, [pc, #88]	@ (8007cb0 <xTaskResumeAll+0x130>)
 8007c58:	2201      	movs	r2, #1
 8007c5a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1f1      	bne.n	8007c4c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8007c68:	4b12      	ldr	r3, [pc, #72]	@ (8007cb4 <xTaskResumeAll+0x134>)
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007c6e:	4b10      	ldr	r3, [pc, #64]	@ (8007cb0 <xTaskResumeAll+0x130>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d009      	beq.n	8007c8a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c76:	2301      	movs	r3, #1
 8007c78:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8007cb8 <xTaskResumeAll+0x138>)
 8007c7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	f3bf 8f4f 	dsb	sy
 8007c86:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c8a:	f001 f9e7 	bl	800905c <vPortExitCritical>

	return xAlreadyYielded;
 8007c8e:	68bb      	ldr	r3, [r7, #8]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	20000ea8 	.word	0x20000ea8
 8007c9c:	20000e80 	.word	0x20000e80
 8007ca0:	20000e40 	.word	0x20000e40
 8007ca4:	20000e88 	.word	0x20000e88
 8007ca8:	200009b0 	.word	0x200009b0
 8007cac:	200009ac 	.word	0x200009ac
 8007cb0:	20000e94 	.word	0x20000e94
 8007cb4:	20000e90 	.word	0x20000e90
 8007cb8:	e000ed04 	.word	0xe000ed04

08007cbc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007cc2:	4b05      	ldr	r3, [pc, #20]	@ (8007cd8 <xTaskGetTickCount+0x1c>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007cc8:	687b      	ldr	r3, [r7, #4]
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	370c      	adds	r7, #12
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	20000e84 	.word	0x20000e84

08007cdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ce6:	4b52      	ldr	r3, [pc, #328]	@ (8007e30 <xTaskIncrementTick+0x154>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f040 808f 	bne.w	8007e0e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007cf0:	4b50      	ldr	r3, [pc, #320]	@ (8007e34 <xTaskIncrementTick+0x158>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007cf8:	4a4e      	ldr	r2, [pc, #312]	@ (8007e34 <xTaskIncrementTick+0x158>)
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d121      	bne.n	8007d48 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d04:	4b4c      	ldr	r3, [pc, #304]	@ (8007e38 <xTaskIncrementTick+0x15c>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00b      	beq.n	8007d26 <xTaskIncrementTick+0x4a>
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	603b      	str	r3, [r7, #0]
}
 8007d20:	bf00      	nop
 8007d22:	bf00      	nop
 8007d24:	e7fd      	b.n	8007d22 <xTaskIncrementTick+0x46>
 8007d26:	4b44      	ldr	r3, [pc, #272]	@ (8007e38 <xTaskIncrementTick+0x15c>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	60fb      	str	r3, [r7, #12]
 8007d2c:	4b43      	ldr	r3, [pc, #268]	@ (8007e3c <xTaskIncrementTick+0x160>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a41      	ldr	r2, [pc, #260]	@ (8007e38 <xTaskIncrementTick+0x15c>)
 8007d32:	6013      	str	r3, [r2, #0]
 8007d34:	4a41      	ldr	r2, [pc, #260]	@ (8007e3c <xTaskIncrementTick+0x160>)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6013      	str	r3, [r2, #0]
 8007d3a:	4b41      	ldr	r3, [pc, #260]	@ (8007e40 <xTaskIncrementTick+0x164>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	4a3f      	ldr	r2, [pc, #252]	@ (8007e40 <xTaskIncrementTick+0x164>)
 8007d42:	6013      	str	r3, [r2, #0]
 8007d44:	f000 fae8 	bl	8008318 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d48:	4b3e      	ldr	r3, [pc, #248]	@ (8007e44 <xTaskIncrementTick+0x168>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	693a      	ldr	r2, [r7, #16]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d34e      	bcc.n	8007df0 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d52:	4b39      	ldr	r3, [pc, #228]	@ (8007e38 <xTaskIncrementTick+0x15c>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d101      	bne.n	8007d60 <xTaskIncrementTick+0x84>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e000      	b.n	8007d62 <xTaskIncrementTick+0x86>
 8007d60:	2300      	movs	r3, #0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d004      	beq.n	8007d70 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d66:	4b37      	ldr	r3, [pc, #220]	@ (8007e44 <xTaskIncrementTick+0x168>)
 8007d68:	f04f 32ff 	mov.w	r2, #4294967295
 8007d6c:	601a      	str	r2, [r3, #0]
					break;
 8007d6e:	e03f      	b.n	8007df0 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007d70:	4b31      	ldr	r3, [pc, #196]	@ (8007e38 <xTaskIncrementTick+0x15c>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d203      	bcs.n	8007d90 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d88:	4a2e      	ldr	r2, [pc, #184]	@ (8007e44 <xTaskIncrementTick+0x168>)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6013      	str	r3, [r2, #0]
						break;
 8007d8e:	e02f      	b.n	8007df0 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	3304      	adds	r3, #4
 8007d94:	4618      	mov	r0, r3
 8007d96:	f7fe fd49 	bl	800682c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d004      	beq.n	8007dac <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	3318      	adds	r3, #24
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fe fd40 	bl	800682c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007db0:	4b25      	ldr	r3, [pc, #148]	@ (8007e48 <xTaskIncrementTick+0x16c>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d903      	bls.n	8007dc0 <xTaskIncrementTick+0xe4>
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dbc:	4a22      	ldr	r2, [pc, #136]	@ (8007e48 <xTaskIncrementTick+0x16c>)
 8007dbe:	6013      	str	r3, [r2, #0]
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	4413      	add	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	4a1f      	ldr	r2, [pc, #124]	@ (8007e4c <xTaskIncrementTick+0x170>)
 8007dce:	441a      	add	r2, r3
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	3304      	adds	r3, #4
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	4610      	mov	r0, r2
 8007dd8:	f7fe fccb 	bl	8006772 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007de0:	4b1b      	ldr	r3, [pc, #108]	@ (8007e50 <xTaskIncrementTick+0x174>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d3b3      	bcc.n	8007d52 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007dea:	2301      	movs	r3, #1
 8007dec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007dee:	e7b0      	b.n	8007d52 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007df0:	4b17      	ldr	r3, [pc, #92]	@ (8007e50 <xTaskIncrementTick+0x174>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007df6:	4915      	ldr	r1, [pc, #84]	@ (8007e4c <xTaskIncrementTick+0x170>)
 8007df8:	4613      	mov	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	440b      	add	r3, r1
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d907      	bls.n	8007e18 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	617b      	str	r3, [r7, #20]
 8007e0c:	e004      	b.n	8007e18 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007e0e:	4b11      	ldr	r3, [pc, #68]	@ (8007e54 <xTaskIncrementTick+0x178>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	3301      	adds	r3, #1
 8007e14:	4a0f      	ldr	r2, [pc, #60]	@ (8007e54 <xTaskIncrementTick+0x178>)
 8007e16:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007e18:	4b0f      	ldr	r3, [pc, #60]	@ (8007e58 <xTaskIncrementTick+0x17c>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d001      	beq.n	8007e24 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8007e20:	2301      	movs	r3, #1
 8007e22:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007e24:	697b      	ldr	r3, [r7, #20]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3718      	adds	r7, #24
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	20000ea8 	.word	0x20000ea8
 8007e34:	20000e84 	.word	0x20000e84
 8007e38:	20000e38 	.word	0x20000e38
 8007e3c:	20000e3c 	.word	0x20000e3c
 8007e40:	20000e98 	.word	0x20000e98
 8007e44:	20000ea0 	.word	0x20000ea0
 8007e48:	20000e88 	.word	0x20000e88
 8007e4c:	200009b0 	.word	0x200009b0
 8007e50:	200009ac 	.word	0x200009ac
 8007e54:	20000e90 	.word	0x20000e90
 8007e58:	20000e94 	.word	0x20000e94

08007e5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e62:	4b2b      	ldr	r3, [pc, #172]	@ (8007f10 <vTaskSwitchContext+0xb4>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d003      	beq.n	8007e72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007e6a:	4b2a      	ldr	r3, [pc, #168]	@ (8007f14 <vTaskSwitchContext+0xb8>)
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e70:	e047      	b.n	8007f02 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007e72:	4b28      	ldr	r3, [pc, #160]	@ (8007f14 <vTaskSwitchContext+0xb8>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007e78:	4b27      	ldr	r3, [pc, #156]	@ (8007f18 <vTaskSwitchContext+0xbc>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	60fb      	str	r3, [r7, #12]
 8007e7e:	e011      	b.n	8007ea4 <vTaskSwitchContext+0x48>
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d10b      	bne.n	8007e9e <vTaskSwitchContext+0x42>
	__asm volatile
 8007e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e8a:	f383 8811 	msr	BASEPRI, r3
 8007e8e:	f3bf 8f6f 	isb	sy
 8007e92:	f3bf 8f4f 	dsb	sy
 8007e96:	607b      	str	r3, [r7, #4]
}
 8007e98:	bf00      	nop
 8007e9a:	bf00      	nop
 8007e9c:	e7fd      	b.n	8007e9a <vTaskSwitchContext+0x3e>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	491d      	ldr	r1, [pc, #116]	@ (8007f1c <vTaskSwitchContext+0xc0>)
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	440b      	add	r3, r1
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d0e3      	beq.n	8007e80 <vTaskSwitchContext+0x24>
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	4413      	add	r3, r2
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4a16      	ldr	r2, [pc, #88]	@ (8007f1c <vTaskSwitchContext+0xc0>)
 8007ec4:	4413      	add	r3, r2
 8007ec6:	60bb      	str	r3, [r7, #8]
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	685a      	ldr	r2, [r3, #4]
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	605a      	str	r2, [r3, #4]
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	685a      	ldr	r2, [r3, #4]
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	3308      	adds	r3, #8
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d104      	bne.n	8007ee8 <vTaskSwitchContext+0x8c>
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	685a      	ldr	r2, [r3, #4]
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	605a      	str	r2, [r3, #4]
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	4a0c      	ldr	r2, [pc, #48]	@ (8007f20 <vTaskSwitchContext+0xc4>)
 8007ef0:	6013      	str	r3, [r2, #0]
 8007ef2:	4a09      	ldr	r2, [pc, #36]	@ (8007f18 <vTaskSwitchContext+0xbc>)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ef8:	4b09      	ldr	r3, [pc, #36]	@ (8007f20 <vTaskSwitchContext+0xc4>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	3354      	adds	r3, #84	@ 0x54
 8007efe:	4a09      	ldr	r2, [pc, #36]	@ (8007f24 <vTaskSwitchContext+0xc8>)
 8007f00:	6013      	str	r3, [r2, #0]
}
 8007f02:	bf00      	nop
 8007f04:	3714      	adds	r7, #20
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	20000ea8 	.word	0x20000ea8
 8007f14:	20000e94 	.word	0x20000e94
 8007f18:	20000e88 	.word	0x20000e88
 8007f1c:	200009b0 	.word	0x200009b0
 8007f20:	200009ac 	.word	0x200009ac
 8007f24:	20000010 	.word	0x20000010

08007f28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10b      	bne.n	8007f50 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f3c:	f383 8811 	msr	BASEPRI, r3
 8007f40:	f3bf 8f6f 	isb	sy
 8007f44:	f3bf 8f4f 	dsb	sy
 8007f48:	60fb      	str	r3, [r7, #12]
}
 8007f4a:	bf00      	nop
 8007f4c:	bf00      	nop
 8007f4e:	e7fd      	b.n	8007f4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f50:	4b07      	ldr	r3, [pc, #28]	@ (8007f70 <vTaskPlaceOnEventList+0x48>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	3318      	adds	r3, #24
 8007f56:	4619      	mov	r1, r3
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f7fe fc2e 	bl	80067ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f5e:	2101      	movs	r1, #1
 8007f60:	6838      	ldr	r0, [r7, #0]
 8007f62:	f000 fba7 	bl	80086b4 <prvAddCurrentTaskToDelayedList>
}
 8007f66:	bf00      	nop
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	200009ac 	.word	0x200009ac

08007f74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b086      	sub	sp, #24
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10b      	bne.n	8007f9e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8a:	f383 8811 	msr	BASEPRI, r3
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f3bf 8f4f 	dsb	sy
 8007f96:	617b      	str	r3, [r7, #20]
}
 8007f98:	bf00      	nop
 8007f9a:	bf00      	nop
 8007f9c:	e7fd      	b.n	8007f9a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8007fc8 <vTaskPlaceOnEventListRestricted+0x54>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3318      	adds	r3, #24
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f7fe fbe3 	bl	8006772 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d002      	beq.n	8007fb8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fb6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007fb8:	6879      	ldr	r1, [r7, #4]
 8007fba:	68b8      	ldr	r0, [r7, #8]
 8007fbc:	f000 fb7a 	bl	80086b4 <prvAddCurrentTaskToDelayedList>
	}
 8007fc0:	bf00      	nop
 8007fc2:	3718      	adds	r7, #24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	200009ac 	.word	0x200009ac

08007fcc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b086      	sub	sp, #24
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10b      	bne.n	8007ffa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe6:	f383 8811 	msr	BASEPRI, r3
 8007fea:	f3bf 8f6f 	isb	sy
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	60fb      	str	r3, [r7, #12]
}
 8007ff4:	bf00      	nop
 8007ff6:	bf00      	nop
 8007ff8:	e7fd      	b.n	8007ff6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	3318      	adds	r3, #24
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fe fc14 	bl	800682c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008004:	4b1d      	ldr	r3, [pc, #116]	@ (800807c <xTaskRemoveFromEventList+0xb0>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d11d      	bne.n	8008048 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	3304      	adds	r3, #4
 8008010:	4618      	mov	r0, r3
 8008012:	f7fe fc0b 	bl	800682c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800801a:	4b19      	ldr	r3, [pc, #100]	@ (8008080 <xTaskRemoveFromEventList+0xb4>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	429a      	cmp	r2, r3
 8008020:	d903      	bls.n	800802a <xTaskRemoveFromEventList+0x5e>
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008026:	4a16      	ldr	r2, [pc, #88]	@ (8008080 <xTaskRemoveFromEventList+0xb4>)
 8008028:	6013      	str	r3, [r2, #0]
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800802e:	4613      	mov	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	4413      	add	r3, r2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4a13      	ldr	r2, [pc, #76]	@ (8008084 <xTaskRemoveFromEventList+0xb8>)
 8008038:	441a      	add	r2, r3
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	3304      	adds	r3, #4
 800803e:	4619      	mov	r1, r3
 8008040:	4610      	mov	r0, r2
 8008042:	f7fe fb96 	bl	8006772 <vListInsertEnd>
 8008046:	e005      	b.n	8008054 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	3318      	adds	r3, #24
 800804c:	4619      	mov	r1, r3
 800804e:	480e      	ldr	r0, [pc, #56]	@ (8008088 <xTaskRemoveFromEventList+0xbc>)
 8008050:	f7fe fb8f 	bl	8006772 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008058:	4b0c      	ldr	r3, [pc, #48]	@ (800808c <xTaskRemoveFromEventList+0xc0>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800805e:	429a      	cmp	r2, r3
 8008060:	d905      	bls.n	800806e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008062:	2301      	movs	r3, #1
 8008064:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008066:	4b0a      	ldr	r3, [pc, #40]	@ (8008090 <xTaskRemoveFromEventList+0xc4>)
 8008068:	2201      	movs	r2, #1
 800806a:	601a      	str	r2, [r3, #0]
 800806c:	e001      	b.n	8008072 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800806e:	2300      	movs	r3, #0
 8008070:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008072:	697b      	ldr	r3, [r7, #20]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3718      	adds	r7, #24
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	20000ea8 	.word	0x20000ea8
 8008080:	20000e88 	.word	0x20000e88
 8008084:	200009b0 	.word	0x200009b0
 8008088:	20000e40 	.word	0x20000e40
 800808c:	200009ac 	.word	0x200009ac
 8008090:	20000e94 	.word	0x20000e94

08008094 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800809c:	4b06      	ldr	r3, [pc, #24]	@ (80080b8 <vTaskInternalSetTimeOutState+0x24>)
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80080a4:	4b05      	ldr	r3, [pc, #20]	@ (80080bc <vTaskInternalSetTimeOutState+0x28>)
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	605a      	str	r2, [r3, #4]
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr
 80080b8:	20000e98 	.word	0x20000e98
 80080bc:	20000e84 	.word	0x20000e84

080080c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b088      	sub	sp, #32
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10b      	bne.n	80080e8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80080d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	613b      	str	r3, [r7, #16]
}
 80080e2:	bf00      	nop
 80080e4:	bf00      	nop
 80080e6:	e7fd      	b.n	80080e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d10b      	bne.n	8008106 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80080ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f2:	f383 8811 	msr	BASEPRI, r3
 80080f6:	f3bf 8f6f 	isb	sy
 80080fa:	f3bf 8f4f 	dsb	sy
 80080fe:	60fb      	str	r3, [r7, #12]
}
 8008100:	bf00      	nop
 8008102:	bf00      	nop
 8008104:	e7fd      	b.n	8008102 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008106:	f000 ff77 	bl	8008ff8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800810a:	4b1d      	ldr	r3, [pc, #116]	@ (8008180 <xTaskCheckForTimeOut+0xc0>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	69ba      	ldr	r2, [r7, #24]
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008122:	d102      	bne.n	800812a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008124:	2300      	movs	r3, #0
 8008126:	61fb      	str	r3, [r7, #28]
 8008128:	e023      	b.n	8008172 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	4b15      	ldr	r3, [pc, #84]	@ (8008184 <xTaskCheckForTimeOut+0xc4>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	429a      	cmp	r2, r3
 8008134:	d007      	beq.n	8008146 <xTaskCheckForTimeOut+0x86>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	69ba      	ldr	r2, [r7, #24]
 800813c:	429a      	cmp	r2, r3
 800813e:	d302      	bcc.n	8008146 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008140:	2301      	movs	r3, #1
 8008142:	61fb      	str	r3, [r7, #28]
 8008144:	e015      	b.n	8008172 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	697a      	ldr	r2, [r7, #20]
 800814c:	429a      	cmp	r2, r3
 800814e:	d20b      	bcs.n	8008168 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	1ad2      	subs	r2, r2, r3
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f7ff ff99 	bl	8008094 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008162:	2300      	movs	r3, #0
 8008164:	61fb      	str	r3, [r7, #28]
 8008166:	e004      	b.n	8008172 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	2200      	movs	r2, #0
 800816c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800816e:	2301      	movs	r3, #1
 8008170:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008172:	f000 ff73 	bl	800905c <vPortExitCritical>

	return xReturn;
 8008176:	69fb      	ldr	r3, [r7, #28]
}
 8008178:	4618      	mov	r0, r3
 800817a:	3720      	adds	r7, #32
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	20000e84 	.word	0x20000e84
 8008184:	20000e98 	.word	0x20000e98

08008188 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008188:	b480      	push	{r7}
 800818a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800818c:	4b03      	ldr	r3, [pc, #12]	@ (800819c <vTaskMissedYield+0x14>)
 800818e:	2201      	movs	r2, #1
 8008190:	601a      	str	r2, [r3, #0]
}
 8008192:	bf00      	nop
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr
 800819c:	20000e94 	.word	0x20000e94

080081a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80081a8:	f000 f852 	bl	8008250 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80081ac:	4b06      	ldr	r3, [pc, #24]	@ (80081c8 <prvIdleTask+0x28>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d9f9      	bls.n	80081a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80081b4:	4b05      	ldr	r3, [pc, #20]	@ (80081cc <prvIdleTask+0x2c>)
 80081b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80081c4:	e7f0      	b.n	80081a8 <prvIdleTask+0x8>
 80081c6:	bf00      	nop
 80081c8:	200009b0 	.word	0x200009b0
 80081cc:	e000ed04 	.word	0xe000ed04

080081d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081d6:	2300      	movs	r3, #0
 80081d8:	607b      	str	r3, [r7, #4]
 80081da:	e00c      	b.n	80081f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	4613      	mov	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4a12      	ldr	r2, [pc, #72]	@ (8008230 <prvInitialiseTaskLists+0x60>)
 80081e8:	4413      	add	r3, r2
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7fe fa94 	bl	8006718 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	3301      	adds	r3, #1
 80081f4:	607b      	str	r3, [r7, #4]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2b37      	cmp	r3, #55	@ 0x37
 80081fa:	d9ef      	bls.n	80081dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80081fc:	480d      	ldr	r0, [pc, #52]	@ (8008234 <prvInitialiseTaskLists+0x64>)
 80081fe:	f7fe fa8b 	bl	8006718 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008202:	480d      	ldr	r0, [pc, #52]	@ (8008238 <prvInitialiseTaskLists+0x68>)
 8008204:	f7fe fa88 	bl	8006718 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008208:	480c      	ldr	r0, [pc, #48]	@ (800823c <prvInitialiseTaskLists+0x6c>)
 800820a:	f7fe fa85 	bl	8006718 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800820e:	480c      	ldr	r0, [pc, #48]	@ (8008240 <prvInitialiseTaskLists+0x70>)
 8008210:	f7fe fa82 	bl	8006718 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008214:	480b      	ldr	r0, [pc, #44]	@ (8008244 <prvInitialiseTaskLists+0x74>)
 8008216:	f7fe fa7f 	bl	8006718 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800821a:	4b0b      	ldr	r3, [pc, #44]	@ (8008248 <prvInitialiseTaskLists+0x78>)
 800821c:	4a05      	ldr	r2, [pc, #20]	@ (8008234 <prvInitialiseTaskLists+0x64>)
 800821e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008220:	4b0a      	ldr	r3, [pc, #40]	@ (800824c <prvInitialiseTaskLists+0x7c>)
 8008222:	4a05      	ldr	r2, [pc, #20]	@ (8008238 <prvInitialiseTaskLists+0x68>)
 8008224:	601a      	str	r2, [r3, #0]
}
 8008226:	bf00      	nop
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	200009b0 	.word	0x200009b0
 8008234:	20000e10 	.word	0x20000e10
 8008238:	20000e24 	.word	0x20000e24
 800823c:	20000e40 	.word	0x20000e40
 8008240:	20000e54 	.word	0x20000e54
 8008244:	20000e6c 	.word	0x20000e6c
 8008248:	20000e38 	.word	0x20000e38
 800824c:	20000e3c 	.word	0x20000e3c

08008250 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008256:	e019      	b.n	800828c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008258:	f000 fece 	bl	8008ff8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800825c:	4b10      	ldr	r3, [pc, #64]	@ (80082a0 <prvCheckTasksWaitingTermination+0x50>)
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	3304      	adds	r3, #4
 8008268:	4618      	mov	r0, r3
 800826a:	f7fe fadf 	bl	800682c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800826e:	4b0d      	ldr	r3, [pc, #52]	@ (80082a4 <prvCheckTasksWaitingTermination+0x54>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	3b01      	subs	r3, #1
 8008274:	4a0b      	ldr	r2, [pc, #44]	@ (80082a4 <prvCheckTasksWaitingTermination+0x54>)
 8008276:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008278:	4b0b      	ldr	r3, [pc, #44]	@ (80082a8 <prvCheckTasksWaitingTermination+0x58>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	3b01      	subs	r3, #1
 800827e:	4a0a      	ldr	r2, [pc, #40]	@ (80082a8 <prvCheckTasksWaitingTermination+0x58>)
 8008280:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008282:	f000 feeb 	bl	800905c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f810 	bl	80082ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800828c:	4b06      	ldr	r3, [pc, #24]	@ (80082a8 <prvCheckTasksWaitingTermination+0x58>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1e1      	bne.n	8008258 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008294:	bf00      	nop
 8008296:	bf00      	nop
 8008298:	3708      	adds	r7, #8
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	20000e54 	.word	0x20000e54
 80082a4:	20000e80 	.word	0x20000e80
 80082a8:	20000e68 	.word	0x20000e68

080082ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	3354      	adds	r3, #84	@ 0x54
 80082b8:	4618      	mov	r0, r3
 80082ba:	f001 f9c7 	bl	800964c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d108      	bne.n	80082da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082cc:	4618      	mov	r0, r3
 80082ce:	f001 f87d 	bl	80093cc <vPortFree>
				vPortFree( pxTCB );
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f001 f87a 	bl	80093cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80082d8:	e019      	b.n	800830e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d103      	bne.n	80082ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f001 f871 	bl	80093cc <vPortFree>
	}
 80082ea:	e010      	b.n	800830e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d00b      	beq.n	800830e <prvDeleteTCB+0x62>
	__asm volatile
 80082f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082fa:	f383 8811 	msr	BASEPRI, r3
 80082fe:	f3bf 8f6f 	isb	sy
 8008302:	f3bf 8f4f 	dsb	sy
 8008306:	60fb      	str	r3, [r7, #12]
}
 8008308:	bf00      	nop
 800830a:	bf00      	nop
 800830c:	e7fd      	b.n	800830a <prvDeleteTCB+0x5e>
	}
 800830e:	bf00      	nop
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
	...

08008318 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800831e:	4b0f      	ldr	r3, [pc, #60]	@ (800835c <prvResetNextTaskUnblockTime+0x44>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d101      	bne.n	800832c <prvResetNextTaskUnblockTime+0x14>
 8008328:	2301      	movs	r3, #1
 800832a:	e000      	b.n	800832e <prvResetNextTaskUnblockTime+0x16>
 800832c:	2300      	movs	r3, #0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d004      	beq.n	800833c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008332:	4b0b      	ldr	r3, [pc, #44]	@ (8008360 <prvResetNextTaskUnblockTime+0x48>)
 8008334:	f04f 32ff 	mov.w	r2, #4294967295
 8008338:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800833a:	e008      	b.n	800834e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800833c:	4b07      	ldr	r3, [pc, #28]	@ (800835c <prvResetNextTaskUnblockTime+0x44>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	4a05      	ldr	r2, [pc, #20]	@ (8008360 <prvResetNextTaskUnblockTime+0x48>)
 800834c:	6013      	str	r3, [r2, #0]
}
 800834e:	bf00      	nop
 8008350:	370c      	adds	r7, #12
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	20000e38 	.word	0x20000e38
 8008360:	20000ea0 	.word	0x20000ea0

08008364 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800836a:	4b05      	ldr	r3, [pc, #20]	@ (8008380 <xTaskGetCurrentTaskHandle+0x1c>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008370:	687b      	ldr	r3, [r7, #4]
	}
 8008372:	4618      	mov	r0, r3
 8008374:	370c      	adds	r7, #12
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	200009ac 	.word	0x200009ac

08008384 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800838a:	4b0b      	ldr	r3, [pc, #44]	@ (80083b8 <xTaskGetSchedulerState+0x34>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d102      	bne.n	8008398 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008392:	2301      	movs	r3, #1
 8008394:	607b      	str	r3, [r7, #4]
 8008396:	e008      	b.n	80083aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008398:	4b08      	ldr	r3, [pc, #32]	@ (80083bc <xTaskGetSchedulerState+0x38>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d102      	bne.n	80083a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80083a0:	2302      	movs	r3, #2
 80083a2:	607b      	str	r3, [r7, #4]
 80083a4:	e001      	b.n	80083aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80083a6:	2300      	movs	r3, #0
 80083a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80083aa:	687b      	ldr	r3, [r7, #4]
	}
 80083ac:	4618      	mov	r0, r3
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	20000e8c 	.word	0x20000e8c
 80083bc:	20000ea8 	.word	0x20000ea8

080083c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80083cc:	2300      	movs	r3, #0
 80083ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d056      	beq.n	8008484 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083da:	4b2d      	ldr	r3, [pc, #180]	@ (8008490 <xTaskPriorityInherit+0xd0>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d246      	bcs.n	8008472 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	db06      	blt.n	80083fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083ec:	4b28      	ldr	r3, [pc, #160]	@ (8008490 <xTaskPriorityInherit+0xd0>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	6959      	ldr	r1, [r3, #20]
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008402:	4613      	mov	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4a22      	ldr	r2, [pc, #136]	@ (8008494 <xTaskPriorityInherit+0xd4>)
 800840c:	4413      	add	r3, r2
 800840e:	4299      	cmp	r1, r3
 8008410:	d101      	bne.n	8008416 <xTaskPriorityInherit+0x56>
 8008412:	2301      	movs	r3, #1
 8008414:	e000      	b.n	8008418 <xTaskPriorityInherit+0x58>
 8008416:	2300      	movs	r3, #0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d022      	beq.n	8008462 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	3304      	adds	r3, #4
 8008420:	4618      	mov	r0, r3
 8008422:	f7fe fa03 	bl	800682c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008426:	4b1a      	ldr	r3, [pc, #104]	@ (8008490 <xTaskPriorityInherit+0xd0>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008434:	4b18      	ldr	r3, [pc, #96]	@ (8008498 <xTaskPriorityInherit+0xd8>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	429a      	cmp	r2, r3
 800843a:	d903      	bls.n	8008444 <xTaskPriorityInherit+0x84>
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008440:	4a15      	ldr	r2, [pc, #84]	@ (8008498 <xTaskPriorityInherit+0xd8>)
 8008442:	6013      	str	r3, [r2, #0]
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008448:	4613      	mov	r3, r2
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	4413      	add	r3, r2
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	4a10      	ldr	r2, [pc, #64]	@ (8008494 <xTaskPriorityInherit+0xd4>)
 8008452:	441a      	add	r2, r3
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	3304      	adds	r3, #4
 8008458:	4619      	mov	r1, r3
 800845a:	4610      	mov	r0, r2
 800845c:	f7fe f989 	bl	8006772 <vListInsertEnd>
 8008460:	e004      	b.n	800846c <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008462:	4b0b      	ldr	r3, [pc, #44]	@ (8008490 <xTaskPriorityInherit+0xd0>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800846c:	2301      	movs	r3, #1
 800846e:	60fb      	str	r3, [r7, #12]
 8008470:	e008      	b.n	8008484 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008476:	4b06      	ldr	r3, [pc, #24]	@ (8008490 <xTaskPriorityInherit+0xd0>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800847c:	429a      	cmp	r2, r3
 800847e:	d201      	bcs.n	8008484 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008480:	2301      	movs	r3, #1
 8008482:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008484:	68fb      	ldr	r3, [r7, #12]
	}
 8008486:	4618      	mov	r0, r3
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	200009ac 	.word	0x200009ac
 8008494:	200009b0 	.word	0x200009b0
 8008498:	20000e88 	.word	0x20000e88

0800849c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800849c:	b580      	push	{r7, lr}
 800849e:	b086      	sub	sp, #24
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80084a8:	2300      	movs	r3, #0
 80084aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d058      	beq.n	8008564 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80084b2:	4b2f      	ldr	r3, [pc, #188]	@ (8008570 <xTaskPriorityDisinherit+0xd4>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	693a      	ldr	r2, [r7, #16]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d00b      	beq.n	80084d4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80084bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c0:	f383 8811 	msr	BASEPRI, r3
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	60fb      	str	r3, [r7, #12]
}
 80084ce:	bf00      	nop
 80084d0:	bf00      	nop
 80084d2:	e7fd      	b.n	80084d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10b      	bne.n	80084f4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80084dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	60bb      	str	r3, [r7, #8]
}
 80084ee:	bf00      	nop
 80084f0:	bf00      	nop
 80084f2:	e7fd      	b.n	80084f0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084f8:	1e5a      	subs	r2, r3, #1
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008506:	429a      	cmp	r2, r3
 8008508:	d02c      	beq.n	8008564 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800850e:	2b00      	cmp	r3, #0
 8008510:	d128      	bne.n	8008564 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	3304      	adds	r3, #4
 8008516:	4618      	mov	r0, r3
 8008518:	f7fe f988 	bl	800682c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008528:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008534:	4b0f      	ldr	r3, [pc, #60]	@ (8008574 <xTaskPriorityDisinherit+0xd8>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	429a      	cmp	r2, r3
 800853a:	d903      	bls.n	8008544 <xTaskPriorityDisinherit+0xa8>
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008540:	4a0c      	ldr	r2, [pc, #48]	@ (8008574 <xTaskPriorityDisinherit+0xd8>)
 8008542:	6013      	str	r3, [r2, #0]
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008548:	4613      	mov	r3, r2
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	4413      	add	r3, r2
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	4a09      	ldr	r2, [pc, #36]	@ (8008578 <xTaskPriorityDisinherit+0xdc>)
 8008552:	441a      	add	r2, r3
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	3304      	adds	r3, #4
 8008558:	4619      	mov	r1, r3
 800855a:	4610      	mov	r0, r2
 800855c:	f7fe f909 	bl	8006772 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008560:	2301      	movs	r3, #1
 8008562:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008564:	697b      	ldr	r3, [r7, #20]
	}
 8008566:	4618      	mov	r0, r3
 8008568:	3718      	adds	r7, #24
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	200009ac 	.word	0x200009ac
 8008574:	20000e88 	.word	0x20000e88
 8008578:	200009b0 	.word	0x200009b0

0800857c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800857c:	b580      	push	{r7, lr}
 800857e:	b088      	sub	sp, #32
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800858a:	2301      	movs	r3, #1
 800858c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d071      	beq.n	8008678 <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008598:	2b00      	cmp	r3, #0
 800859a:	d10b      	bne.n	80085b4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800859c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a0:	f383 8811 	msr	BASEPRI, r3
 80085a4:	f3bf 8f6f 	isb	sy
 80085a8:	f3bf 8f4f 	dsb	sy
 80085ac:	60fb      	str	r3, [r7, #12]
}
 80085ae:	bf00      	nop
 80085b0:	bf00      	nop
 80085b2:	e7fd      	b.n	80085b0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085b8:	683a      	ldr	r2, [r7, #0]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d902      	bls.n	80085c4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	61fb      	str	r3, [r7, #28]
 80085c2:	e002      	b.n	80085ca <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085c8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ce:	69fa      	ldr	r2, [r7, #28]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d051      	beq.n	8008678 <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80085d4:	69bb      	ldr	r3, [r7, #24]
 80085d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085d8:	697a      	ldr	r2, [r7, #20]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d14c      	bne.n	8008678 <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80085de:	4b28      	ldr	r3, [pc, #160]	@ (8008680 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	69ba      	ldr	r2, [r7, #24]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d10b      	bne.n	8008600 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80085e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ec:	f383 8811 	msr	BASEPRI, r3
 80085f0:	f3bf 8f6f 	isb	sy
 80085f4:	f3bf 8f4f 	dsb	sy
 80085f8:	60bb      	str	r3, [r7, #8]
}
 80085fa:	bf00      	nop
 80085fc:	bf00      	nop
 80085fe:	e7fd      	b.n	80085fc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008604:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	69fa      	ldr	r2, [r7, #28]
 800860a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	699b      	ldr	r3, [r3, #24]
 8008610:	2b00      	cmp	r3, #0
 8008612:	db04      	blt.n	800861e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	6959      	ldr	r1, [r3, #20]
 8008622:	693a      	ldr	r2, [r7, #16]
 8008624:	4613      	mov	r3, r2
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	4413      	add	r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	4a15      	ldr	r2, [pc, #84]	@ (8008684 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800862e:	4413      	add	r3, r2
 8008630:	4299      	cmp	r1, r3
 8008632:	d101      	bne.n	8008638 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8008634:	2301      	movs	r3, #1
 8008636:	e000      	b.n	800863a <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8008638:	2300      	movs	r3, #0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d01c      	beq.n	8008678 <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	3304      	adds	r3, #4
 8008642:	4618      	mov	r0, r3
 8008644:	f7fe f8f2 	bl	800682c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800864c:	4b0e      	ldr	r3, [pc, #56]	@ (8008688 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	429a      	cmp	r2, r3
 8008652:	d903      	bls.n	800865c <vTaskPriorityDisinheritAfterTimeout+0xe0>
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008658:	4a0b      	ldr	r2, [pc, #44]	@ (8008688 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800865a:	6013      	str	r3, [r2, #0]
 800865c:	69bb      	ldr	r3, [r7, #24]
 800865e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008660:	4613      	mov	r3, r2
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	4413      	add	r3, r2
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	4a06      	ldr	r2, [pc, #24]	@ (8008684 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800866a:	441a      	add	r2, r3
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	3304      	adds	r3, #4
 8008670:	4619      	mov	r1, r3
 8008672:	4610      	mov	r0, r2
 8008674:	f7fe f87d 	bl	8006772 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008678:	bf00      	nop
 800867a:	3720      	adds	r7, #32
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}
 8008680:	200009ac 	.word	0x200009ac
 8008684:	200009b0 	.word	0x200009b0
 8008688:	20000e88 	.word	0x20000e88

0800868c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800868c:	b480      	push	{r7}
 800868e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008690:	4b07      	ldr	r3, [pc, #28]	@ (80086b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d004      	beq.n	80086a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008698:	4b05      	ldr	r3, [pc, #20]	@ (80086b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800869e:	3201      	adds	r2, #1
 80086a0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80086a2:	4b03      	ldr	r3, [pc, #12]	@ (80086b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80086a4:	681b      	ldr	r3, [r3, #0]
	}
 80086a6:	4618      	mov	r0, r3
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr
 80086b0:	200009ac 	.word	0x200009ac

080086b4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80086be:	4b21      	ldr	r3, [pc, #132]	@ (8008744 <prvAddCurrentTaskToDelayedList+0x90>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086c4:	4b20      	ldr	r3, [pc, #128]	@ (8008748 <prvAddCurrentTaskToDelayedList+0x94>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	3304      	adds	r3, #4
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7fe f8ae 	bl	800682c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d6:	d10a      	bne.n	80086ee <prvAddCurrentTaskToDelayedList+0x3a>
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d007      	beq.n	80086ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086de:	4b1a      	ldr	r3, [pc, #104]	@ (8008748 <prvAddCurrentTaskToDelayedList+0x94>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	3304      	adds	r3, #4
 80086e4:	4619      	mov	r1, r3
 80086e6:	4819      	ldr	r0, [pc, #100]	@ (800874c <prvAddCurrentTaskToDelayedList+0x98>)
 80086e8:	f7fe f843 	bl	8006772 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80086ec:	e026      	b.n	800873c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80086ee:	68fa      	ldr	r2, [r7, #12]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	4413      	add	r3, r2
 80086f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80086f6:	4b14      	ldr	r3, [pc, #80]	@ (8008748 <prvAddCurrentTaskToDelayedList+0x94>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	429a      	cmp	r2, r3
 8008704:	d209      	bcs.n	800871a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008706:	4b12      	ldr	r3, [pc, #72]	@ (8008750 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	4b0f      	ldr	r3, [pc, #60]	@ (8008748 <prvAddCurrentTaskToDelayedList+0x94>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	3304      	adds	r3, #4
 8008710:	4619      	mov	r1, r3
 8008712:	4610      	mov	r0, r2
 8008714:	f7fe f851 	bl	80067ba <vListInsert>
}
 8008718:	e010      	b.n	800873c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800871a:	4b0e      	ldr	r3, [pc, #56]	@ (8008754 <prvAddCurrentTaskToDelayedList+0xa0>)
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	4b0a      	ldr	r3, [pc, #40]	@ (8008748 <prvAddCurrentTaskToDelayedList+0x94>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	3304      	adds	r3, #4
 8008724:	4619      	mov	r1, r3
 8008726:	4610      	mov	r0, r2
 8008728:	f7fe f847 	bl	80067ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800872c:	4b0a      	ldr	r3, [pc, #40]	@ (8008758 <prvAddCurrentTaskToDelayedList+0xa4>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68ba      	ldr	r2, [r7, #8]
 8008732:	429a      	cmp	r2, r3
 8008734:	d202      	bcs.n	800873c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008736:	4a08      	ldr	r2, [pc, #32]	@ (8008758 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	6013      	str	r3, [r2, #0]
}
 800873c:	bf00      	nop
 800873e:	3710      	adds	r7, #16
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	20000e84 	.word	0x20000e84
 8008748:	200009ac 	.word	0x200009ac
 800874c:	20000e6c 	.word	0x20000e6c
 8008750:	20000e3c 	.word	0x20000e3c
 8008754:	20000e38 	.word	0x20000e38
 8008758:	20000ea0 	.word	0x20000ea0

0800875c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b08a      	sub	sp, #40	@ 0x28
 8008760:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008762:	2300      	movs	r3, #0
 8008764:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008766:	f000 fad9 	bl	8008d1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800876a:	4b1d      	ldr	r3, [pc, #116]	@ (80087e0 <xTimerCreateTimerTask+0x84>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d021      	beq.n	80087b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008772:	2300      	movs	r3, #0
 8008774:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008776:	2300      	movs	r3, #0
 8008778:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800877a:	1d3a      	adds	r2, r7, #4
 800877c:	f107 0108 	add.w	r1, r7, #8
 8008780:	f107 030c 	add.w	r3, r7, #12
 8008784:	4618      	mov	r0, r3
 8008786:	f7fd ffad 	bl	80066e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800878a:	6879      	ldr	r1, [r7, #4]
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	9202      	str	r2, [sp, #8]
 8008792:	9301      	str	r3, [sp, #4]
 8008794:	2302      	movs	r3, #2
 8008796:	9300      	str	r3, [sp, #0]
 8008798:	2300      	movs	r3, #0
 800879a:	460a      	mov	r2, r1
 800879c:	4911      	ldr	r1, [pc, #68]	@ (80087e4 <xTimerCreateTimerTask+0x88>)
 800879e:	4812      	ldr	r0, [pc, #72]	@ (80087e8 <xTimerCreateTimerTask+0x8c>)
 80087a0:	f7fe ff86 	bl	80076b0 <xTaskCreateStatic>
 80087a4:	4603      	mov	r3, r0
 80087a6:	4a11      	ldr	r2, [pc, #68]	@ (80087ec <xTimerCreateTimerTask+0x90>)
 80087a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80087aa:	4b10      	ldr	r3, [pc, #64]	@ (80087ec <xTimerCreateTimerTask+0x90>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d001      	beq.n	80087b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80087b2:	2301      	movs	r3, #1
 80087b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d10b      	bne.n	80087d4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80087bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c0:	f383 8811 	msr	BASEPRI, r3
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	613b      	str	r3, [r7, #16]
}
 80087ce:	bf00      	nop
 80087d0:	bf00      	nop
 80087d2:	e7fd      	b.n	80087d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80087d4:	697b      	ldr	r3, [r7, #20]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3718      	adds	r7, #24
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	20000edc 	.word	0x20000edc
 80087e4:	0800a074 	.word	0x0800a074
 80087e8:	08008911 	.word	0x08008911
 80087ec:	20000ee0 	.word	0x20000ee0

080087f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b08a      	sub	sp, #40	@ 0x28
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
 80087fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80087fe:	2300      	movs	r3, #0
 8008800:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d10b      	bne.n	8008820 <xTimerGenericCommand+0x30>
	__asm volatile
 8008808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800880c:	f383 8811 	msr	BASEPRI, r3
 8008810:	f3bf 8f6f 	isb	sy
 8008814:	f3bf 8f4f 	dsb	sy
 8008818:	623b      	str	r3, [r7, #32]
}
 800881a:	bf00      	nop
 800881c:	bf00      	nop
 800881e:	e7fd      	b.n	800881c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008820:	4b19      	ldr	r3, [pc, #100]	@ (8008888 <xTimerGenericCommand+0x98>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d02a      	beq.n	800887e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	2b05      	cmp	r3, #5
 8008838:	dc18      	bgt.n	800886c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800883a:	f7ff fda3 	bl	8008384 <xTaskGetSchedulerState>
 800883e:	4603      	mov	r3, r0
 8008840:	2b02      	cmp	r3, #2
 8008842:	d109      	bne.n	8008858 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008844:	4b10      	ldr	r3, [pc, #64]	@ (8008888 <xTimerGenericCommand+0x98>)
 8008846:	6818      	ldr	r0, [r3, #0]
 8008848:	f107 0110 	add.w	r1, r7, #16
 800884c:	2300      	movs	r3, #0
 800884e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008850:	f7fe fa18 	bl	8006c84 <xQueueGenericSend>
 8008854:	6278      	str	r0, [r7, #36]	@ 0x24
 8008856:	e012      	b.n	800887e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008858:	4b0b      	ldr	r3, [pc, #44]	@ (8008888 <xTimerGenericCommand+0x98>)
 800885a:	6818      	ldr	r0, [r3, #0]
 800885c:	f107 0110 	add.w	r1, r7, #16
 8008860:	2300      	movs	r3, #0
 8008862:	2200      	movs	r2, #0
 8008864:	f7fe fa0e 	bl	8006c84 <xQueueGenericSend>
 8008868:	6278      	str	r0, [r7, #36]	@ 0x24
 800886a:	e008      	b.n	800887e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800886c:	4b06      	ldr	r3, [pc, #24]	@ (8008888 <xTimerGenericCommand+0x98>)
 800886e:	6818      	ldr	r0, [r3, #0]
 8008870:	f107 0110 	add.w	r1, r7, #16
 8008874:	2300      	movs	r3, #0
 8008876:	683a      	ldr	r2, [r7, #0]
 8008878:	f7fe fb06 	bl	8006e88 <xQueueGenericSendFromISR>
 800887c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800887e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008880:	4618      	mov	r0, r3
 8008882:	3728      	adds	r7, #40	@ 0x28
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	20000edc 	.word	0x20000edc

0800888c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b088      	sub	sp, #32
 8008890:	af02      	add	r7, sp, #8
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008896:	4b1d      	ldr	r3, [pc, #116]	@ (800890c <prvProcessExpiredTimer+0x80>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	3304      	adds	r3, #4
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7fd ffc1 	bl	800682c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	69db      	ldr	r3, [r3, #28]
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d123      	bne.n	80088fa <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	699a      	ldr	r2, [r3, #24]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	18d1      	adds	r1, r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	683a      	ldr	r2, [r7, #0]
 80088be:	6978      	ldr	r0, [r7, #20]
 80088c0:	f000 f8cc 	bl	8008a5c <prvInsertTimerInActiveList>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d017      	beq.n	80088fa <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088ca:	2300      	movs	r3, #0
 80088cc:	9300      	str	r3, [sp, #0]
 80088ce:	2300      	movs	r3, #0
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	2100      	movs	r1, #0
 80088d4:	6978      	ldr	r0, [r7, #20]
 80088d6:	f7ff ff8b 	bl	80087f0 <xTimerGenericCommand>
 80088da:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d10b      	bne.n	80088fa <prvProcessExpiredTimer+0x6e>
	__asm volatile
 80088e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e6:	f383 8811 	msr	BASEPRI, r3
 80088ea:	f3bf 8f6f 	isb	sy
 80088ee:	f3bf 8f4f 	dsb	sy
 80088f2:	60fb      	str	r3, [r7, #12]
}
 80088f4:	bf00      	nop
 80088f6:	bf00      	nop
 80088f8:	e7fd      	b.n	80088f6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088fe:	6978      	ldr	r0, [r7, #20]
 8008900:	4798      	blx	r3
}
 8008902:	bf00      	nop
 8008904:	3718      	adds	r7, #24
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	20000ed4 	.word	0x20000ed4

08008910 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008918:	f107 0308 	add.w	r3, r7, #8
 800891c:	4618      	mov	r0, r3
 800891e:	f000 f859 	bl	80089d4 <prvGetNextExpireTime>
 8008922:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	4619      	mov	r1, r3
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f000 f805 	bl	8008938 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800892e:	f000 f8d7 	bl	8008ae0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008932:	bf00      	nop
 8008934:	e7f0      	b.n	8008918 <prvTimerTask+0x8>
	...

08008938 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008942:	f7ff f90f 	bl	8007b64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008946:	f107 0308 	add.w	r3, r7, #8
 800894a:	4618      	mov	r0, r3
 800894c:	f000 f866 	bl	8008a1c <prvSampleTimeNow>
 8008950:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d130      	bne.n	80089ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d10a      	bne.n	8008974 <prvProcessTimerOrBlockTask+0x3c>
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	429a      	cmp	r2, r3
 8008964:	d806      	bhi.n	8008974 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008966:	f7ff f90b 	bl	8007b80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800896a:	68f9      	ldr	r1, [r7, #12]
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f7ff ff8d 	bl	800888c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008972:	e024      	b.n	80089be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d008      	beq.n	800898c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800897a:	4b13      	ldr	r3, [pc, #76]	@ (80089c8 <prvProcessTimerOrBlockTask+0x90>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	bf0c      	ite	eq
 8008984:	2301      	moveq	r3, #1
 8008986:	2300      	movne	r3, #0
 8008988:	b2db      	uxtb	r3, r3
 800898a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800898c:	4b0f      	ldr	r3, [pc, #60]	@ (80089cc <prvProcessTimerOrBlockTask+0x94>)
 800898e:	6818      	ldr	r0, [r3, #0]
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	1ad3      	subs	r3, r2, r3
 8008996:	683a      	ldr	r2, [r7, #0]
 8008998:	4619      	mov	r1, r3
 800899a:	f7fe fe55 	bl	8007648 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800899e:	f7ff f8ef 	bl	8007b80 <xTaskResumeAll>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d10a      	bne.n	80089be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80089a8:	4b09      	ldr	r3, [pc, #36]	@ (80089d0 <prvProcessTimerOrBlockTask+0x98>)
 80089aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089ae:	601a      	str	r2, [r3, #0]
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	f3bf 8f6f 	isb	sy
}
 80089b8:	e001      	b.n	80089be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80089ba:	f7ff f8e1 	bl	8007b80 <xTaskResumeAll>
}
 80089be:	bf00      	nop
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	20000ed8 	.word	0x20000ed8
 80089cc:	20000edc 	.word	0x20000edc
 80089d0:	e000ed04 	.word	0xe000ed04

080089d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80089dc:	4b0e      	ldr	r3, [pc, #56]	@ (8008a18 <prvGetNextExpireTime+0x44>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	bf0c      	ite	eq
 80089e6:	2301      	moveq	r3, #1
 80089e8:	2300      	movne	r3, #0
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	461a      	mov	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d105      	bne.n	8008a06 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089fa:	4b07      	ldr	r3, [pc, #28]	@ (8008a18 <prvGetNextExpireTime+0x44>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	60fb      	str	r3, [r7, #12]
 8008a04:	e001      	b.n	8008a0a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008a06:	2300      	movs	r3, #0
 8008a08:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3714      	adds	r7, #20
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr
 8008a18:	20000ed4 	.word	0x20000ed4

08008a1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008a24:	f7ff f94a 	bl	8007cbc <xTaskGetTickCount>
 8008a28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8008a58 <prvSampleTimeNow+0x3c>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d205      	bcs.n	8008a40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008a34:	f000 f910 	bl	8008c58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	601a      	str	r2, [r3, #0]
 8008a3e:	e002      	b.n	8008a46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008a46:	4a04      	ldr	r2, [pc, #16]	@ (8008a58 <prvSampleTimeNow+0x3c>)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	20000ee4 	.word	0x20000ee4

08008a5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
 8008a68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	68ba      	ldr	r2, [r7, #8]
 8008a72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008a7a:	68ba      	ldr	r2, [r7, #8]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d812      	bhi.n	8008aa8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	1ad2      	subs	r2, r2, r3
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d302      	bcc.n	8008a96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008a90:	2301      	movs	r3, #1
 8008a92:	617b      	str	r3, [r7, #20]
 8008a94:	e01b      	b.n	8008ace <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008a96:	4b10      	ldr	r3, [pc, #64]	@ (8008ad8 <prvInsertTimerInActiveList+0x7c>)
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	4610      	mov	r0, r2
 8008aa2:	f7fd fe8a 	bl	80067ba <vListInsert>
 8008aa6:	e012      	b.n	8008ace <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d206      	bcs.n	8008abe <prvInsertTimerInActiveList+0x62>
 8008ab0:	68ba      	ldr	r2, [r7, #8]
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d302      	bcc.n	8008abe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	617b      	str	r3, [r7, #20]
 8008abc:	e007      	b.n	8008ace <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008abe:	4b07      	ldr	r3, [pc, #28]	@ (8008adc <prvInsertTimerInActiveList+0x80>)
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	3304      	adds	r3, #4
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	4610      	mov	r0, r2
 8008aca:	f7fd fe76 	bl	80067ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008ace:	697b      	ldr	r3, [r7, #20]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3718      	adds	r7, #24
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	20000ed8 	.word	0x20000ed8
 8008adc:	20000ed4 	.word	0x20000ed4

08008ae0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b08e      	sub	sp, #56	@ 0x38
 8008ae4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ae6:	e0a5      	b.n	8008c34 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	da19      	bge.n	8008b22 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008aee:	1d3b      	adds	r3, r7, #4
 8008af0:	3304      	adds	r3, #4
 8008af2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10b      	bne.n	8008b12 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008afe:	f383 8811 	msr	BASEPRI, r3
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	61fb      	str	r3, [r7, #28]
}
 8008b0c:	bf00      	nop
 8008b0e:	bf00      	nop
 8008b10:	e7fd      	b.n	8008b0e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b18:	6850      	ldr	r0, [r2, #4]
 8008b1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b1c:	6892      	ldr	r2, [r2, #8]
 8008b1e:	4611      	mov	r1, r2
 8008b20:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f2c0 8085 	blt.w	8008c34 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b30:	695b      	ldr	r3, [r3, #20]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d004      	beq.n	8008b40 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b38:	3304      	adds	r3, #4
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fd fe76 	bl	800682c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b40:	463b      	mov	r3, r7
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7ff ff6a 	bl	8008a1c <prvSampleTimeNow>
 8008b48:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2b09      	cmp	r3, #9
 8008b4e:	d86c      	bhi.n	8008c2a <prvProcessReceivedCommands+0x14a>
 8008b50:	a201      	add	r2, pc, #4	@ (adr r2, 8008b58 <prvProcessReceivedCommands+0x78>)
 8008b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b56:	bf00      	nop
 8008b58:	08008b81 	.word	0x08008b81
 8008b5c:	08008b81 	.word	0x08008b81
 8008b60:	08008b81 	.word	0x08008b81
 8008b64:	08008c2b 	.word	0x08008c2b
 8008b68:	08008bdf 	.word	0x08008bdf
 8008b6c:	08008c19 	.word	0x08008c19
 8008b70:	08008b81 	.word	0x08008b81
 8008b74:	08008b81 	.word	0x08008b81
 8008b78:	08008c2b 	.word	0x08008c2b
 8008b7c:	08008bdf 	.word	0x08008bdf
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b80:	68ba      	ldr	r2, [r7, #8]
 8008b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b84:	699b      	ldr	r3, [r3, #24]
 8008b86:	18d1      	adds	r1, r2, r3
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b8e:	f7ff ff65 	bl	8008a5c <prvInsertTimerInActiveList>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d04a      	beq.n	8008c2e <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b9e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba2:	69db      	ldr	r3, [r3, #28]
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d142      	bne.n	8008c2e <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bac:	699b      	ldr	r3, [r3, #24]
 8008bae:	441a      	add	r2, r3
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	9300      	str	r3, [sp, #0]
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	2100      	movs	r1, #0
 8008bb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bba:	f7ff fe19 	bl	80087f0 <xTimerGenericCommand>
 8008bbe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008bc0:	6a3b      	ldr	r3, [r7, #32]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d133      	bne.n	8008c2e <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8008bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bca:	f383 8811 	msr	BASEPRI, r3
 8008bce:	f3bf 8f6f 	isb	sy
 8008bd2:	f3bf 8f4f 	dsb	sy
 8008bd6:	61bb      	str	r3, [r7, #24]
}
 8008bd8:	bf00      	nop
 8008bda:	bf00      	nop
 8008bdc:	e7fd      	b.n	8008bda <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be6:	699b      	ldr	r3, [r3, #24]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d10b      	bne.n	8008c04 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8008bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf0:	f383 8811 	msr	BASEPRI, r3
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	617b      	str	r3, [r7, #20]
}
 8008bfe:	bf00      	nop
 8008c00:	bf00      	nop
 8008c02:	e7fd      	b.n	8008c00 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c06:	699a      	ldr	r2, [r3, #24]
 8008c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c0a:	18d1      	adds	r1, r2, r3
 8008c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c12:	f7ff ff23 	bl	8008a5c <prvInsertTimerInActiveList>
					break;
 8008c16:	e00d      	b.n	8008c34 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c1a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d107      	bne.n	8008c32 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8008c22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c24:	f000 fbd2 	bl	80093cc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008c28:	e003      	b.n	8008c32 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8008c2a:	bf00      	nop
 8008c2c:	e002      	b.n	8008c34 <prvProcessReceivedCommands+0x154>
					break;
 8008c2e:	bf00      	nop
 8008c30:	e000      	b.n	8008c34 <prvProcessReceivedCommands+0x154>
					break;
 8008c32:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c34:	4b07      	ldr	r3, [pc, #28]	@ (8008c54 <prvProcessReceivedCommands+0x174>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	1d39      	adds	r1, r7, #4
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7fe f9bf 	bl	8006fc0 <xQueueReceive>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f47f af4f 	bne.w	8008ae8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008c4a:	bf00      	nop
 8008c4c:	bf00      	nop
 8008c4e:	3730      	adds	r7, #48	@ 0x30
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	20000edc 	.word	0x20000edc

08008c58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b088      	sub	sp, #32
 8008c5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c5e:	e046      	b.n	8008cee <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c60:	4b2c      	ldr	r3, [pc, #176]	@ (8008d14 <prvSwitchTimerLists+0xbc>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8008d14 <prvSwitchTimerLists+0xbc>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	3304      	adds	r3, #4
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7fd fdd7 	bl	800682c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	69db      	ldr	r3, [r3, #28]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d12f      	bne.n	8008cee <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	699b      	ldr	r3, [r3, #24]
 8008c92:	693a      	ldr	r2, [r7, #16]
 8008c94:	4413      	add	r3, r2
 8008c96:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d90e      	bls.n	8008cbe <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cac:	4b19      	ldr	r3, [pc, #100]	@ (8008d14 <prvSwitchTimerLists+0xbc>)
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	3304      	adds	r3, #4
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	4610      	mov	r0, r2
 8008cb8:	f7fd fd7f 	bl	80067ba <vListInsert>
 8008cbc:	e017      	b.n	8008cee <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	9300      	str	r3, [sp, #0]
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	693a      	ldr	r2, [r7, #16]
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	68f8      	ldr	r0, [r7, #12]
 8008cca:	f7ff fd91 	bl	80087f0 <xTimerGenericCommand>
 8008cce:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d10b      	bne.n	8008cee <prvSwitchTimerLists+0x96>
	__asm volatile
 8008cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cda:	f383 8811 	msr	BASEPRI, r3
 8008cde:	f3bf 8f6f 	isb	sy
 8008ce2:	f3bf 8f4f 	dsb	sy
 8008ce6:	603b      	str	r3, [r7, #0]
}
 8008ce8:	bf00      	nop
 8008cea:	bf00      	nop
 8008cec:	e7fd      	b.n	8008cea <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008cee:	4b09      	ldr	r3, [pc, #36]	@ (8008d14 <prvSwitchTimerLists+0xbc>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d1b3      	bne.n	8008c60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008cf8:	4b06      	ldr	r3, [pc, #24]	@ (8008d14 <prvSwitchTimerLists+0xbc>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008cfe:	4b06      	ldr	r3, [pc, #24]	@ (8008d18 <prvSwitchTimerLists+0xc0>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a04      	ldr	r2, [pc, #16]	@ (8008d14 <prvSwitchTimerLists+0xbc>)
 8008d04:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008d06:	4a04      	ldr	r2, [pc, #16]	@ (8008d18 <prvSwitchTimerLists+0xc0>)
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	6013      	str	r3, [r2, #0]
}
 8008d0c:	bf00      	nop
 8008d0e:	3718      	adds	r7, #24
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	20000ed4 	.word	0x20000ed4
 8008d18:	20000ed8 	.word	0x20000ed8

08008d1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008d22:	f000 f969 	bl	8008ff8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008d26:	4b15      	ldr	r3, [pc, #84]	@ (8008d7c <prvCheckForValidListAndQueue+0x60>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d120      	bne.n	8008d70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008d2e:	4814      	ldr	r0, [pc, #80]	@ (8008d80 <prvCheckForValidListAndQueue+0x64>)
 8008d30:	f7fd fcf2 	bl	8006718 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d34:	4813      	ldr	r0, [pc, #76]	@ (8008d84 <prvCheckForValidListAndQueue+0x68>)
 8008d36:	f7fd fcef 	bl	8006718 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d3a:	4b13      	ldr	r3, [pc, #76]	@ (8008d88 <prvCheckForValidListAndQueue+0x6c>)
 8008d3c:	4a10      	ldr	r2, [pc, #64]	@ (8008d80 <prvCheckForValidListAndQueue+0x64>)
 8008d3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008d40:	4b12      	ldr	r3, [pc, #72]	@ (8008d8c <prvCheckForValidListAndQueue+0x70>)
 8008d42:	4a10      	ldr	r2, [pc, #64]	@ (8008d84 <prvCheckForValidListAndQueue+0x68>)
 8008d44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d46:	2300      	movs	r3, #0
 8008d48:	9300      	str	r3, [sp, #0]
 8008d4a:	4b11      	ldr	r3, [pc, #68]	@ (8008d90 <prvCheckForValidListAndQueue+0x74>)
 8008d4c:	4a11      	ldr	r2, [pc, #68]	@ (8008d94 <prvCheckForValidListAndQueue+0x78>)
 8008d4e:	2110      	movs	r1, #16
 8008d50:	200a      	movs	r0, #10
 8008d52:	f7fd fdff 	bl	8006954 <xQueueGenericCreateStatic>
 8008d56:	4603      	mov	r3, r0
 8008d58:	4a08      	ldr	r2, [pc, #32]	@ (8008d7c <prvCheckForValidListAndQueue+0x60>)
 8008d5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008d5c:	4b07      	ldr	r3, [pc, #28]	@ (8008d7c <prvCheckForValidListAndQueue+0x60>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d005      	beq.n	8008d70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008d64:	4b05      	ldr	r3, [pc, #20]	@ (8008d7c <prvCheckForValidListAndQueue+0x60>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	490b      	ldr	r1, [pc, #44]	@ (8008d98 <prvCheckForValidListAndQueue+0x7c>)
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7fe fc42 	bl	80075f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d70:	f000 f974 	bl	800905c <vPortExitCritical>
}
 8008d74:	bf00      	nop
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	20000edc 	.word	0x20000edc
 8008d80:	20000eac 	.word	0x20000eac
 8008d84:	20000ec0 	.word	0x20000ec0
 8008d88:	20000ed4 	.word	0x20000ed4
 8008d8c:	20000ed8 	.word	0x20000ed8
 8008d90:	20000f88 	.word	0x20000f88
 8008d94:	20000ee8 	.word	0x20000ee8
 8008d98:	0800a07c 	.word	0x0800a07c

08008d9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	3b04      	subs	r3, #4
 8008dac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008db4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	3b04      	subs	r3, #4
 8008dba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	f023 0201 	bic.w	r2, r3, #1
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	3b04      	subs	r3, #4
 8008dca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008dcc:	4a0c      	ldr	r2, [pc, #48]	@ (8008e00 <pxPortInitialiseStack+0x64>)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	3b14      	subs	r3, #20
 8008dd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	3b04      	subs	r3, #4
 8008de2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f06f 0202 	mvn.w	r2, #2
 8008dea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	3b20      	subs	r3, #32
 8008df0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008df2:	68fb      	ldr	r3, [r7, #12]
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3714      	adds	r7, #20
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr
 8008e00:	08008e05 	.word	0x08008e05

08008e04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e0e:	4b13      	ldr	r3, [pc, #76]	@ (8008e5c <prvTaskExitError+0x58>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e16:	d00b      	beq.n	8008e30 <prvTaskExitError+0x2c>
	__asm volatile
 8008e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e1c:	f383 8811 	msr	BASEPRI, r3
 8008e20:	f3bf 8f6f 	isb	sy
 8008e24:	f3bf 8f4f 	dsb	sy
 8008e28:	60fb      	str	r3, [r7, #12]
}
 8008e2a:	bf00      	nop
 8008e2c:	bf00      	nop
 8008e2e:	e7fd      	b.n	8008e2c <prvTaskExitError+0x28>
	__asm volatile
 8008e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e34:	f383 8811 	msr	BASEPRI, r3
 8008e38:	f3bf 8f6f 	isb	sy
 8008e3c:	f3bf 8f4f 	dsb	sy
 8008e40:	60bb      	str	r3, [r7, #8]
}
 8008e42:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e44:	bf00      	nop
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d0fc      	beq.n	8008e46 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e4c:	bf00      	nop
 8008e4e:	bf00      	nop
 8008e50:	3714      	adds	r7, #20
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr
 8008e5a:	bf00      	nop
 8008e5c:	2000000c 	.word	0x2000000c

08008e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008e60:	4b07      	ldr	r3, [pc, #28]	@ (8008e80 <pxCurrentTCBConst2>)
 8008e62:	6819      	ldr	r1, [r3, #0]
 8008e64:	6808      	ldr	r0, [r1, #0]
 8008e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e6a:	f380 8809 	msr	PSP, r0
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f04f 0000 	mov.w	r0, #0
 8008e76:	f380 8811 	msr	BASEPRI, r0
 8008e7a:	4770      	bx	lr
 8008e7c:	f3af 8000 	nop.w

08008e80 <pxCurrentTCBConst2>:
 8008e80:	200009ac 	.word	0x200009ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008e84:	bf00      	nop
 8008e86:	bf00      	nop

08008e88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008e88:	4808      	ldr	r0, [pc, #32]	@ (8008eac <prvPortStartFirstTask+0x24>)
 8008e8a:	6800      	ldr	r0, [r0, #0]
 8008e8c:	6800      	ldr	r0, [r0, #0]
 8008e8e:	f380 8808 	msr	MSP, r0
 8008e92:	f04f 0000 	mov.w	r0, #0
 8008e96:	f380 8814 	msr	CONTROL, r0
 8008e9a:	b662      	cpsie	i
 8008e9c:	b661      	cpsie	f
 8008e9e:	f3bf 8f4f 	dsb	sy
 8008ea2:	f3bf 8f6f 	isb	sy
 8008ea6:	df00      	svc	0
 8008ea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008eaa:	bf00      	nop
 8008eac:	e000ed08 	.word	0xe000ed08

08008eb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008eb6:	4b47      	ldr	r3, [pc, #284]	@ (8008fd4 <xPortStartScheduler+0x124>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a47      	ldr	r2, [pc, #284]	@ (8008fd8 <xPortStartScheduler+0x128>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d10b      	bne.n	8008ed8 <xPortStartScheduler+0x28>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	613b      	str	r3, [r7, #16]
}
 8008ed2:	bf00      	nop
 8008ed4:	bf00      	nop
 8008ed6:	e7fd      	b.n	8008ed4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ed8:	4b3e      	ldr	r3, [pc, #248]	@ (8008fd4 <xPortStartScheduler+0x124>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a3f      	ldr	r2, [pc, #252]	@ (8008fdc <xPortStartScheduler+0x12c>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d10b      	bne.n	8008efa <xPortStartScheduler+0x4a>
	__asm volatile
 8008ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee6:	f383 8811 	msr	BASEPRI, r3
 8008eea:	f3bf 8f6f 	isb	sy
 8008eee:	f3bf 8f4f 	dsb	sy
 8008ef2:	60fb      	str	r3, [r7, #12]
}
 8008ef4:	bf00      	nop
 8008ef6:	bf00      	nop
 8008ef8:	e7fd      	b.n	8008ef6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008efa:	4b39      	ldr	r3, [pc, #228]	@ (8008fe0 <xPortStartScheduler+0x130>)
 8008efc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	22ff      	movs	r2, #255	@ 0xff
 8008f0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f14:	78fb      	ldrb	r3, [r7, #3]
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008f1c:	b2da      	uxtb	r2, r3
 8008f1e:	4b31      	ldr	r3, [pc, #196]	@ (8008fe4 <xPortStartScheduler+0x134>)
 8008f20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f22:	4b31      	ldr	r3, [pc, #196]	@ (8008fe8 <xPortStartScheduler+0x138>)
 8008f24:	2207      	movs	r2, #7
 8008f26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f28:	e009      	b.n	8008f3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8008fe8 <xPortStartScheduler+0x138>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	4a2d      	ldr	r2, [pc, #180]	@ (8008fe8 <xPortStartScheduler+0x138>)
 8008f32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f34:	78fb      	ldrb	r3, [r7, #3]
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	005b      	lsls	r3, r3, #1
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f3e:	78fb      	ldrb	r3, [r7, #3]
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f46:	2b80      	cmp	r3, #128	@ 0x80
 8008f48:	d0ef      	beq.n	8008f2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f4a:	4b27      	ldr	r3, [pc, #156]	@ (8008fe8 <xPortStartScheduler+0x138>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f1c3 0307 	rsb	r3, r3, #7
 8008f52:	2b04      	cmp	r3, #4
 8008f54:	d00b      	beq.n	8008f6e <xPortStartScheduler+0xbe>
	__asm volatile
 8008f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f5a:	f383 8811 	msr	BASEPRI, r3
 8008f5e:	f3bf 8f6f 	isb	sy
 8008f62:	f3bf 8f4f 	dsb	sy
 8008f66:	60bb      	str	r3, [r7, #8]
}
 8008f68:	bf00      	nop
 8008f6a:	bf00      	nop
 8008f6c:	e7fd      	b.n	8008f6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8008fe8 <xPortStartScheduler+0x138>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	021b      	lsls	r3, r3, #8
 8008f74:	4a1c      	ldr	r2, [pc, #112]	@ (8008fe8 <xPortStartScheduler+0x138>)
 8008f76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f78:	4b1b      	ldr	r3, [pc, #108]	@ (8008fe8 <xPortStartScheduler+0x138>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008f80:	4a19      	ldr	r2, [pc, #100]	@ (8008fe8 <xPortStartScheduler+0x138>)
 8008f82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	b2da      	uxtb	r2, r3
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f8c:	4b17      	ldr	r3, [pc, #92]	@ (8008fec <xPortStartScheduler+0x13c>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a16      	ldr	r2, [pc, #88]	@ (8008fec <xPortStartScheduler+0x13c>)
 8008f92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008f96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f98:	4b14      	ldr	r3, [pc, #80]	@ (8008fec <xPortStartScheduler+0x13c>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a13      	ldr	r2, [pc, #76]	@ (8008fec <xPortStartScheduler+0x13c>)
 8008f9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008fa2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008fa4:	f000 f8da 	bl	800915c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008fa8:	4b11      	ldr	r3, [pc, #68]	@ (8008ff0 <xPortStartScheduler+0x140>)
 8008faa:	2200      	movs	r2, #0
 8008fac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008fae:	f000 f8f9 	bl	80091a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008fb2:	4b10      	ldr	r3, [pc, #64]	@ (8008ff4 <xPortStartScheduler+0x144>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8008ff4 <xPortStartScheduler+0x144>)
 8008fb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008fbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008fbe:	f7ff ff63 	bl	8008e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008fc2:	f7fe ff4b 	bl	8007e5c <vTaskSwitchContext>
	prvTaskExitError();
 8008fc6:	f7ff ff1d 	bl	8008e04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3718      	adds	r7, #24
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	e000ed00 	.word	0xe000ed00
 8008fd8:	410fc271 	.word	0x410fc271
 8008fdc:	410fc270 	.word	0x410fc270
 8008fe0:	e000e400 	.word	0xe000e400
 8008fe4:	20000fd8 	.word	0x20000fd8
 8008fe8:	20000fdc 	.word	0x20000fdc
 8008fec:	e000ed20 	.word	0xe000ed20
 8008ff0:	2000000c 	.word	0x2000000c
 8008ff4:	e000ef34 	.word	0xe000ef34

08008ff8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8008ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009002:	f383 8811 	msr	BASEPRI, r3
 8009006:	f3bf 8f6f 	isb	sy
 800900a:	f3bf 8f4f 	dsb	sy
 800900e:	607b      	str	r3, [r7, #4]
}
 8009010:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009012:	4b10      	ldr	r3, [pc, #64]	@ (8009054 <vPortEnterCritical+0x5c>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	3301      	adds	r3, #1
 8009018:	4a0e      	ldr	r2, [pc, #56]	@ (8009054 <vPortEnterCritical+0x5c>)
 800901a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800901c:	4b0d      	ldr	r3, [pc, #52]	@ (8009054 <vPortEnterCritical+0x5c>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d110      	bne.n	8009046 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009024:	4b0c      	ldr	r3, [pc, #48]	@ (8009058 <vPortEnterCritical+0x60>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	b2db      	uxtb	r3, r3
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00b      	beq.n	8009046 <vPortEnterCritical+0x4e>
	__asm volatile
 800902e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	603b      	str	r3, [r7, #0]
}
 8009040:	bf00      	nop
 8009042:	bf00      	nop
 8009044:	e7fd      	b.n	8009042 <vPortEnterCritical+0x4a>
	}
}
 8009046:	bf00      	nop
 8009048:	370c      	adds	r7, #12
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop
 8009054:	2000000c 	.word	0x2000000c
 8009058:	e000ed04 	.word	0xe000ed04

0800905c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009062:	4b12      	ldr	r3, [pc, #72]	@ (80090ac <vPortExitCritical+0x50>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d10b      	bne.n	8009082 <vPortExitCritical+0x26>
	__asm volatile
 800906a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800906e:	f383 8811 	msr	BASEPRI, r3
 8009072:	f3bf 8f6f 	isb	sy
 8009076:	f3bf 8f4f 	dsb	sy
 800907a:	607b      	str	r3, [r7, #4]
}
 800907c:	bf00      	nop
 800907e:	bf00      	nop
 8009080:	e7fd      	b.n	800907e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009082:	4b0a      	ldr	r3, [pc, #40]	@ (80090ac <vPortExitCritical+0x50>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	3b01      	subs	r3, #1
 8009088:	4a08      	ldr	r2, [pc, #32]	@ (80090ac <vPortExitCritical+0x50>)
 800908a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800908c:	4b07      	ldr	r3, [pc, #28]	@ (80090ac <vPortExitCritical+0x50>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d105      	bne.n	80090a0 <vPortExitCritical+0x44>
 8009094:	2300      	movs	r3, #0
 8009096:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	f383 8811 	msr	BASEPRI, r3
}
 800909e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr
 80090ac:	2000000c 	.word	0x2000000c

080090b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80090b0:	f3ef 8009 	mrs	r0, PSP
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	4b15      	ldr	r3, [pc, #84]	@ (8009110 <pxCurrentTCBConst>)
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	f01e 0f10 	tst.w	lr, #16
 80090c0:	bf08      	it	eq
 80090c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80090c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ca:	6010      	str	r0, [r2, #0]
 80090cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80090d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80090d4:	f380 8811 	msr	BASEPRI, r0
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	f7fe febc 	bl	8007e5c <vTaskSwitchContext>
 80090e4:	f04f 0000 	mov.w	r0, #0
 80090e8:	f380 8811 	msr	BASEPRI, r0
 80090ec:	bc09      	pop	{r0, r3}
 80090ee:	6819      	ldr	r1, [r3, #0]
 80090f0:	6808      	ldr	r0, [r1, #0]
 80090f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f6:	f01e 0f10 	tst.w	lr, #16
 80090fa:	bf08      	it	eq
 80090fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009100:	f380 8809 	msr	PSP, r0
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop
 800910c:	f3af 8000 	nop.w

08009110 <pxCurrentTCBConst>:
 8009110:	200009ac 	.word	0x200009ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop

08009118 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
	__asm volatile
 800911e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	607b      	str	r3, [r7, #4]
}
 8009130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009132:	f7fe fdd3 	bl	8007cdc <xTaskIncrementTick>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d003      	beq.n	8009144 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800913c:	4b06      	ldr	r3, [pc, #24]	@ (8009158 <SysTick_Handler+0x40>)
 800913e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	2300      	movs	r3, #0
 8009146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	f383 8811 	msr	BASEPRI, r3
}
 800914e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009150:	bf00      	nop
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	e000ed04 	.word	0xe000ed04

0800915c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800915c:	b480      	push	{r7}
 800915e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009160:	4b0b      	ldr	r3, [pc, #44]	@ (8009190 <vPortSetupTimerInterrupt+0x34>)
 8009162:	2200      	movs	r2, #0
 8009164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009166:	4b0b      	ldr	r3, [pc, #44]	@ (8009194 <vPortSetupTimerInterrupt+0x38>)
 8009168:	2200      	movs	r2, #0
 800916a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800916c:	4b0a      	ldr	r3, [pc, #40]	@ (8009198 <vPortSetupTimerInterrupt+0x3c>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a0a      	ldr	r2, [pc, #40]	@ (800919c <vPortSetupTimerInterrupt+0x40>)
 8009172:	fba2 2303 	umull	r2, r3, r2, r3
 8009176:	099b      	lsrs	r3, r3, #6
 8009178:	4a09      	ldr	r2, [pc, #36]	@ (80091a0 <vPortSetupTimerInterrupt+0x44>)
 800917a:	3b01      	subs	r3, #1
 800917c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800917e:	4b04      	ldr	r3, [pc, #16]	@ (8009190 <vPortSetupTimerInterrupt+0x34>)
 8009180:	2207      	movs	r2, #7
 8009182:	601a      	str	r2, [r3, #0]
}
 8009184:	bf00      	nop
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop
 8009190:	e000e010 	.word	0xe000e010
 8009194:	e000e018 	.word	0xe000e018
 8009198:	20000000 	.word	0x20000000
 800919c:	10624dd3 	.word	0x10624dd3
 80091a0:	e000e014 	.word	0xe000e014

080091a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80091a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80091b4 <vPortEnableVFP+0x10>
 80091a8:	6801      	ldr	r1, [r0, #0]
 80091aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80091ae:	6001      	str	r1, [r0, #0]
 80091b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80091b2:	bf00      	nop
 80091b4:	e000ed88 	.word	0xe000ed88

080091b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80091be:	f3ef 8305 	mrs	r3, IPSR
 80091c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2b0f      	cmp	r3, #15
 80091c8:	d915      	bls.n	80091f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80091ca:	4a18      	ldr	r2, [pc, #96]	@ (800922c <vPortValidateInterruptPriority+0x74>)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	4413      	add	r3, r2
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80091d4:	4b16      	ldr	r3, [pc, #88]	@ (8009230 <vPortValidateInterruptPriority+0x78>)
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	7afa      	ldrb	r2, [r7, #11]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d20b      	bcs.n	80091f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80091de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e2:	f383 8811 	msr	BASEPRI, r3
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	607b      	str	r3, [r7, #4]
}
 80091f0:	bf00      	nop
 80091f2:	bf00      	nop
 80091f4:	e7fd      	b.n	80091f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80091f6:	4b0f      	ldr	r3, [pc, #60]	@ (8009234 <vPortValidateInterruptPriority+0x7c>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80091fe:	4b0e      	ldr	r3, [pc, #56]	@ (8009238 <vPortValidateInterruptPriority+0x80>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	429a      	cmp	r2, r3
 8009204:	d90b      	bls.n	800921e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800920a:	f383 8811 	msr	BASEPRI, r3
 800920e:	f3bf 8f6f 	isb	sy
 8009212:	f3bf 8f4f 	dsb	sy
 8009216:	603b      	str	r3, [r7, #0]
}
 8009218:	bf00      	nop
 800921a:	bf00      	nop
 800921c:	e7fd      	b.n	800921a <vPortValidateInterruptPriority+0x62>
	}
 800921e:	bf00      	nop
 8009220:	3714      	adds	r7, #20
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop
 800922c:	e000e3f0 	.word	0xe000e3f0
 8009230:	20000fd8 	.word	0x20000fd8
 8009234:	e000ed0c 	.word	0xe000ed0c
 8009238:	20000fdc 	.word	0x20000fdc

0800923c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b08a      	sub	sp, #40	@ 0x28
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009244:	2300      	movs	r3, #0
 8009246:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009248:	f7fe fc8c 	bl	8007b64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800924c:	4b5a      	ldr	r3, [pc, #360]	@ (80093b8 <pvPortMalloc+0x17c>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d101      	bne.n	8009258 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009254:	f000 f916 	bl	8009484 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009258:	4b58      	ldr	r3, [pc, #352]	@ (80093bc <pvPortMalloc+0x180>)
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	4013      	ands	r3, r2
 8009260:	2b00      	cmp	r3, #0
 8009262:	f040 8090 	bne.w	8009386 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d01e      	beq.n	80092aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800926c:	2208      	movs	r2, #8
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4413      	add	r3, r2
 8009272:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f003 0307 	and.w	r3, r3, #7
 800927a:	2b00      	cmp	r3, #0
 800927c:	d015      	beq.n	80092aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f023 0307 	bic.w	r3, r3, #7
 8009284:	3308      	adds	r3, #8
 8009286:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f003 0307 	and.w	r3, r3, #7
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00b      	beq.n	80092aa <pvPortMalloc+0x6e>
	__asm volatile
 8009292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009296:	f383 8811 	msr	BASEPRI, r3
 800929a:	f3bf 8f6f 	isb	sy
 800929e:	f3bf 8f4f 	dsb	sy
 80092a2:	617b      	str	r3, [r7, #20]
}
 80092a4:	bf00      	nop
 80092a6:	bf00      	nop
 80092a8:	e7fd      	b.n	80092a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d06a      	beq.n	8009386 <pvPortMalloc+0x14a>
 80092b0:	4b43      	ldr	r3, [pc, #268]	@ (80093c0 <pvPortMalloc+0x184>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d865      	bhi.n	8009386 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80092ba:	4b42      	ldr	r3, [pc, #264]	@ (80093c4 <pvPortMalloc+0x188>)
 80092bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80092be:	4b41      	ldr	r3, [pc, #260]	@ (80093c4 <pvPortMalloc+0x188>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092c4:	e004      	b.n	80092d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80092c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80092ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d903      	bls.n	80092e2 <pvPortMalloc+0xa6>
 80092da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d1f1      	bne.n	80092c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80092e2:	4b35      	ldr	r3, [pc, #212]	@ (80093b8 <pvPortMalloc+0x17c>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d04c      	beq.n	8009386 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80092ec:	6a3b      	ldr	r3, [r7, #32]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2208      	movs	r2, #8
 80092f2:	4413      	add	r3, r2
 80092f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80092f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	6a3b      	ldr	r3, [r7, #32]
 80092fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80092fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009300:	685a      	ldr	r2, [r3, #4]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	1ad2      	subs	r2, r2, r3
 8009306:	2308      	movs	r3, #8
 8009308:	005b      	lsls	r3, r3, #1
 800930a:	429a      	cmp	r2, r3
 800930c:	d920      	bls.n	8009350 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800930e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	4413      	add	r3, r2
 8009314:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	f003 0307 	and.w	r3, r3, #7
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00b      	beq.n	8009338 <pvPortMalloc+0xfc>
	__asm volatile
 8009320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009324:	f383 8811 	msr	BASEPRI, r3
 8009328:	f3bf 8f6f 	isb	sy
 800932c:	f3bf 8f4f 	dsb	sy
 8009330:	613b      	str	r3, [r7, #16]
}
 8009332:	bf00      	nop
 8009334:	bf00      	nop
 8009336:	e7fd      	b.n	8009334 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800933a:	685a      	ldr	r2, [r3, #4]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	1ad2      	subs	r2, r2, r3
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800934a:	69b8      	ldr	r0, [r7, #24]
 800934c:	f000 f8fc 	bl	8009548 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009350:	4b1b      	ldr	r3, [pc, #108]	@ (80093c0 <pvPortMalloc+0x184>)
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	1ad3      	subs	r3, r2, r3
 800935a:	4a19      	ldr	r2, [pc, #100]	@ (80093c0 <pvPortMalloc+0x184>)
 800935c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800935e:	4b18      	ldr	r3, [pc, #96]	@ (80093c0 <pvPortMalloc+0x184>)
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	4b19      	ldr	r3, [pc, #100]	@ (80093c8 <pvPortMalloc+0x18c>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	429a      	cmp	r2, r3
 8009368:	d203      	bcs.n	8009372 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800936a:	4b15      	ldr	r3, [pc, #84]	@ (80093c0 <pvPortMalloc+0x184>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a16      	ldr	r2, [pc, #88]	@ (80093c8 <pvPortMalloc+0x18c>)
 8009370:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009374:	685a      	ldr	r2, [r3, #4]
 8009376:	4b11      	ldr	r3, [pc, #68]	@ (80093bc <pvPortMalloc+0x180>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	431a      	orrs	r2, r3
 800937c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800937e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009382:	2200      	movs	r2, #0
 8009384:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009386:	f7fe fbfb 	bl	8007b80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800938a:	69fb      	ldr	r3, [r7, #28]
 800938c:	f003 0307 	and.w	r3, r3, #7
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00b      	beq.n	80093ac <pvPortMalloc+0x170>
	__asm volatile
 8009394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009398:	f383 8811 	msr	BASEPRI, r3
 800939c:	f3bf 8f6f 	isb	sy
 80093a0:	f3bf 8f4f 	dsb	sy
 80093a4:	60fb      	str	r3, [r7, #12]
}
 80093a6:	bf00      	nop
 80093a8:	bf00      	nop
 80093aa:	e7fd      	b.n	80093a8 <pvPortMalloc+0x16c>
	return pvReturn;
 80093ac:	69fb      	ldr	r3, [r7, #28]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3728      	adds	r7, #40	@ 0x28
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	20001be8 	.word	0x20001be8
 80093bc:	20001bf4 	.word	0x20001bf4
 80093c0:	20001bec 	.word	0x20001bec
 80093c4:	20001be0 	.word	0x20001be0
 80093c8:	20001bf0 	.word	0x20001bf0

080093cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b086      	sub	sp, #24
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d04a      	beq.n	8009474 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80093de:	2308      	movs	r3, #8
 80093e0:	425b      	negs	r3, r3
 80093e2:	697a      	ldr	r2, [r7, #20]
 80093e4:	4413      	add	r3, r2
 80093e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	685a      	ldr	r2, [r3, #4]
 80093f0:	4b22      	ldr	r3, [pc, #136]	@ (800947c <vPortFree+0xb0>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4013      	ands	r3, r2
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d10b      	bne.n	8009412 <vPortFree+0x46>
	__asm volatile
 80093fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093fe:	f383 8811 	msr	BASEPRI, r3
 8009402:	f3bf 8f6f 	isb	sy
 8009406:	f3bf 8f4f 	dsb	sy
 800940a:	60fb      	str	r3, [r7, #12]
}
 800940c:	bf00      	nop
 800940e:	bf00      	nop
 8009410:	e7fd      	b.n	800940e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00b      	beq.n	8009432 <vPortFree+0x66>
	__asm volatile
 800941a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800941e:	f383 8811 	msr	BASEPRI, r3
 8009422:	f3bf 8f6f 	isb	sy
 8009426:	f3bf 8f4f 	dsb	sy
 800942a:	60bb      	str	r3, [r7, #8]
}
 800942c:	bf00      	nop
 800942e:	bf00      	nop
 8009430:	e7fd      	b.n	800942e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	685a      	ldr	r2, [r3, #4]
 8009436:	4b11      	ldr	r3, [pc, #68]	@ (800947c <vPortFree+0xb0>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4013      	ands	r3, r2
 800943c:	2b00      	cmp	r3, #0
 800943e:	d019      	beq.n	8009474 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d115      	bne.n	8009474 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	685a      	ldr	r2, [r3, #4]
 800944c:	4b0b      	ldr	r3, [pc, #44]	@ (800947c <vPortFree+0xb0>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	43db      	mvns	r3, r3
 8009452:	401a      	ands	r2, r3
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009458:	f7fe fb84 	bl	8007b64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	685a      	ldr	r2, [r3, #4]
 8009460:	4b07      	ldr	r3, [pc, #28]	@ (8009480 <vPortFree+0xb4>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4413      	add	r3, r2
 8009466:	4a06      	ldr	r2, [pc, #24]	@ (8009480 <vPortFree+0xb4>)
 8009468:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800946a:	6938      	ldr	r0, [r7, #16]
 800946c:	f000 f86c 	bl	8009548 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009470:	f7fe fb86 	bl	8007b80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009474:	bf00      	nop
 8009476:	3718      	adds	r7, #24
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}
 800947c:	20001bf4 	.word	0x20001bf4
 8009480:	20001bec 	.word	0x20001bec

08009484 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800948a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800948e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009490:	4b27      	ldr	r3, [pc, #156]	@ (8009530 <prvHeapInit+0xac>)
 8009492:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f003 0307 	and.w	r3, r3, #7
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00c      	beq.n	80094b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	3307      	adds	r3, #7
 80094a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f023 0307 	bic.w	r3, r3, #7
 80094aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80094ac:	68ba      	ldr	r2, [r7, #8]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	4a1f      	ldr	r2, [pc, #124]	@ (8009530 <prvHeapInit+0xac>)
 80094b4:	4413      	add	r3, r2
 80094b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80094bc:	4a1d      	ldr	r2, [pc, #116]	@ (8009534 <prvHeapInit+0xb0>)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80094c2:	4b1c      	ldr	r3, [pc, #112]	@ (8009534 <prvHeapInit+0xb0>)
 80094c4:	2200      	movs	r2, #0
 80094c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	68ba      	ldr	r2, [r7, #8]
 80094cc:	4413      	add	r3, r2
 80094ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80094d0:	2208      	movs	r2, #8
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	1a9b      	subs	r3, r3, r2
 80094d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f023 0307 	bic.w	r3, r3, #7
 80094de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	4a15      	ldr	r2, [pc, #84]	@ (8009538 <prvHeapInit+0xb4>)
 80094e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80094e6:	4b14      	ldr	r3, [pc, #80]	@ (8009538 <prvHeapInit+0xb4>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2200      	movs	r2, #0
 80094ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80094ee:	4b12      	ldr	r3, [pc, #72]	@ (8009538 <prvHeapInit+0xb4>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2200      	movs	r2, #0
 80094f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	1ad2      	subs	r2, r2, r3
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009504:	4b0c      	ldr	r3, [pc, #48]	@ (8009538 <prvHeapInit+0xb4>)
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	4a0a      	ldr	r2, [pc, #40]	@ (800953c <prvHeapInit+0xb8>)
 8009512:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	4a09      	ldr	r2, [pc, #36]	@ (8009540 <prvHeapInit+0xbc>)
 800951a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800951c:	4b09      	ldr	r3, [pc, #36]	@ (8009544 <prvHeapInit+0xc0>)
 800951e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009522:	601a      	str	r2, [r3, #0]
}
 8009524:	bf00      	nop
 8009526:	3714      	adds	r7, #20
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr
 8009530:	20000fe0 	.word	0x20000fe0
 8009534:	20001be0 	.word	0x20001be0
 8009538:	20001be8 	.word	0x20001be8
 800953c:	20001bf0 	.word	0x20001bf0
 8009540:	20001bec 	.word	0x20001bec
 8009544:	20001bf4 	.word	0x20001bf4

08009548 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009548:	b480      	push	{r7}
 800954a:	b085      	sub	sp, #20
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009550:	4b28      	ldr	r3, [pc, #160]	@ (80095f4 <prvInsertBlockIntoFreeList+0xac>)
 8009552:	60fb      	str	r3, [r7, #12]
 8009554:	e002      	b.n	800955c <prvInsertBlockIntoFreeList+0x14>
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	60fb      	str	r3, [r7, #12]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	429a      	cmp	r2, r3
 8009564:	d8f7      	bhi.n	8009556 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	68ba      	ldr	r2, [r7, #8]
 8009570:	4413      	add	r3, r2
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	429a      	cmp	r2, r3
 8009576:	d108      	bne.n	800958a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	685a      	ldr	r2, [r3, #4]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	441a      	add	r2, r3
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	68ba      	ldr	r2, [r7, #8]
 8009594:	441a      	add	r2, r3
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	429a      	cmp	r2, r3
 800959c:	d118      	bne.n	80095d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	4b15      	ldr	r3, [pc, #84]	@ (80095f8 <prvInsertBlockIntoFreeList+0xb0>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d00d      	beq.n	80095c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	685a      	ldr	r2, [r3, #4]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	441a      	add	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	601a      	str	r2, [r3, #0]
 80095c4:	e008      	b.n	80095d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80095c6:	4b0c      	ldr	r3, [pc, #48]	@ (80095f8 <prvInsertBlockIntoFreeList+0xb0>)
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	601a      	str	r2, [r3, #0]
 80095ce:	e003      	b.n	80095d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80095d8:	68fa      	ldr	r2, [r7, #12]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d002      	beq.n	80095e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095e6:	bf00      	nop
 80095e8:	3714      	adds	r7, #20
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop
 80095f4:	20001be0 	.word	0x20001be0
 80095f8:	20001be8 	.word	0x20001be8

080095fc <siprintf>:
 80095fc:	b40e      	push	{r1, r2, r3}
 80095fe:	b500      	push	{lr}
 8009600:	b09c      	sub	sp, #112	@ 0x70
 8009602:	ab1d      	add	r3, sp, #116	@ 0x74
 8009604:	9002      	str	r0, [sp, #8]
 8009606:	9006      	str	r0, [sp, #24]
 8009608:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800960c:	4809      	ldr	r0, [pc, #36]	@ (8009634 <siprintf+0x38>)
 800960e:	9107      	str	r1, [sp, #28]
 8009610:	9104      	str	r1, [sp, #16]
 8009612:	4909      	ldr	r1, [pc, #36]	@ (8009638 <siprintf+0x3c>)
 8009614:	f853 2b04 	ldr.w	r2, [r3], #4
 8009618:	9105      	str	r1, [sp, #20]
 800961a:	6800      	ldr	r0, [r0, #0]
 800961c:	9301      	str	r3, [sp, #4]
 800961e:	a902      	add	r1, sp, #8
 8009620:	f000 f9f8 	bl	8009a14 <_svfiprintf_r>
 8009624:	9b02      	ldr	r3, [sp, #8]
 8009626:	2200      	movs	r2, #0
 8009628:	701a      	strb	r2, [r3, #0]
 800962a:	b01c      	add	sp, #112	@ 0x70
 800962c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009630:	b003      	add	sp, #12
 8009632:	4770      	bx	lr
 8009634:	20000010 	.word	0x20000010
 8009638:	ffff0208 	.word	0xffff0208

0800963c <memset>:
 800963c:	4402      	add	r2, r0
 800963e:	4603      	mov	r3, r0
 8009640:	4293      	cmp	r3, r2
 8009642:	d100      	bne.n	8009646 <memset+0xa>
 8009644:	4770      	bx	lr
 8009646:	f803 1b01 	strb.w	r1, [r3], #1
 800964a:	e7f9      	b.n	8009640 <memset+0x4>

0800964c <_reclaim_reent>:
 800964c:	4b29      	ldr	r3, [pc, #164]	@ (80096f4 <_reclaim_reent+0xa8>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4283      	cmp	r3, r0
 8009652:	b570      	push	{r4, r5, r6, lr}
 8009654:	4604      	mov	r4, r0
 8009656:	d04b      	beq.n	80096f0 <_reclaim_reent+0xa4>
 8009658:	69c3      	ldr	r3, [r0, #28]
 800965a:	b1ab      	cbz	r3, 8009688 <_reclaim_reent+0x3c>
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	b16b      	cbz	r3, 800967c <_reclaim_reent+0x30>
 8009660:	2500      	movs	r5, #0
 8009662:	69e3      	ldr	r3, [r4, #28]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	5959      	ldr	r1, [r3, r5]
 8009668:	2900      	cmp	r1, #0
 800966a:	d13b      	bne.n	80096e4 <_reclaim_reent+0x98>
 800966c:	3504      	adds	r5, #4
 800966e:	2d80      	cmp	r5, #128	@ 0x80
 8009670:	d1f7      	bne.n	8009662 <_reclaim_reent+0x16>
 8009672:	69e3      	ldr	r3, [r4, #28]
 8009674:	4620      	mov	r0, r4
 8009676:	68d9      	ldr	r1, [r3, #12]
 8009678:	f000 f878 	bl	800976c <_free_r>
 800967c:	69e3      	ldr	r3, [r4, #28]
 800967e:	6819      	ldr	r1, [r3, #0]
 8009680:	b111      	cbz	r1, 8009688 <_reclaim_reent+0x3c>
 8009682:	4620      	mov	r0, r4
 8009684:	f000 f872 	bl	800976c <_free_r>
 8009688:	6961      	ldr	r1, [r4, #20]
 800968a:	b111      	cbz	r1, 8009692 <_reclaim_reent+0x46>
 800968c:	4620      	mov	r0, r4
 800968e:	f000 f86d 	bl	800976c <_free_r>
 8009692:	69e1      	ldr	r1, [r4, #28]
 8009694:	b111      	cbz	r1, 800969c <_reclaim_reent+0x50>
 8009696:	4620      	mov	r0, r4
 8009698:	f000 f868 	bl	800976c <_free_r>
 800969c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800969e:	b111      	cbz	r1, 80096a6 <_reclaim_reent+0x5a>
 80096a0:	4620      	mov	r0, r4
 80096a2:	f000 f863 	bl	800976c <_free_r>
 80096a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80096a8:	b111      	cbz	r1, 80096b0 <_reclaim_reent+0x64>
 80096aa:	4620      	mov	r0, r4
 80096ac:	f000 f85e 	bl	800976c <_free_r>
 80096b0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80096b2:	b111      	cbz	r1, 80096ba <_reclaim_reent+0x6e>
 80096b4:	4620      	mov	r0, r4
 80096b6:	f000 f859 	bl	800976c <_free_r>
 80096ba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80096bc:	b111      	cbz	r1, 80096c4 <_reclaim_reent+0x78>
 80096be:	4620      	mov	r0, r4
 80096c0:	f000 f854 	bl	800976c <_free_r>
 80096c4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80096c6:	b111      	cbz	r1, 80096ce <_reclaim_reent+0x82>
 80096c8:	4620      	mov	r0, r4
 80096ca:	f000 f84f 	bl	800976c <_free_r>
 80096ce:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80096d0:	b111      	cbz	r1, 80096d8 <_reclaim_reent+0x8c>
 80096d2:	4620      	mov	r0, r4
 80096d4:	f000 f84a 	bl	800976c <_free_r>
 80096d8:	6a23      	ldr	r3, [r4, #32]
 80096da:	b14b      	cbz	r3, 80096f0 <_reclaim_reent+0xa4>
 80096dc:	4620      	mov	r0, r4
 80096de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80096e2:	4718      	bx	r3
 80096e4:	680e      	ldr	r6, [r1, #0]
 80096e6:	4620      	mov	r0, r4
 80096e8:	f000 f840 	bl	800976c <_free_r>
 80096ec:	4631      	mov	r1, r6
 80096ee:	e7bb      	b.n	8009668 <_reclaim_reent+0x1c>
 80096f0:	bd70      	pop	{r4, r5, r6, pc}
 80096f2:	bf00      	nop
 80096f4:	20000010 	.word	0x20000010

080096f8 <__errno>:
 80096f8:	4b01      	ldr	r3, [pc, #4]	@ (8009700 <__errno+0x8>)
 80096fa:	6818      	ldr	r0, [r3, #0]
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	20000010 	.word	0x20000010

08009704 <__libc_init_array>:
 8009704:	b570      	push	{r4, r5, r6, lr}
 8009706:	4d0d      	ldr	r5, [pc, #52]	@ (800973c <__libc_init_array+0x38>)
 8009708:	4c0d      	ldr	r4, [pc, #52]	@ (8009740 <__libc_init_array+0x3c>)
 800970a:	1b64      	subs	r4, r4, r5
 800970c:	10a4      	asrs	r4, r4, #2
 800970e:	2600      	movs	r6, #0
 8009710:	42a6      	cmp	r6, r4
 8009712:	d109      	bne.n	8009728 <__libc_init_array+0x24>
 8009714:	4d0b      	ldr	r5, [pc, #44]	@ (8009744 <__libc_init_array+0x40>)
 8009716:	4c0c      	ldr	r4, [pc, #48]	@ (8009748 <__libc_init_array+0x44>)
 8009718:	f000 fc66 	bl	8009fe8 <_init>
 800971c:	1b64      	subs	r4, r4, r5
 800971e:	10a4      	asrs	r4, r4, #2
 8009720:	2600      	movs	r6, #0
 8009722:	42a6      	cmp	r6, r4
 8009724:	d105      	bne.n	8009732 <__libc_init_array+0x2e>
 8009726:	bd70      	pop	{r4, r5, r6, pc}
 8009728:	f855 3b04 	ldr.w	r3, [r5], #4
 800972c:	4798      	blx	r3
 800972e:	3601      	adds	r6, #1
 8009730:	e7ee      	b.n	8009710 <__libc_init_array+0xc>
 8009732:	f855 3b04 	ldr.w	r3, [r5], #4
 8009736:	4798      	blx	r3
 8009738:	3601      	adds	r6, #1
 800973a:	e7f2      	b.n	8009722 <__libc_init_array+0x1e>
 800973c:	0800a194 	.word	0x0800a194
 8009740:	0800a194 	.word	0x0800a194
 8009744:	0800a194 	.word	0x0800a194
 8009748:	0800a198 	.word	0x0800a198

0800974c <__retarget_lock_acquire_recursive>:
 800974c:	4770      	bx	lr

0800974e <__retarget_lock_release_recursive>:
 800974e:	4770      	bx	lr

08009750 <memcpy>:
 8009750:	440a      	add	r2, r1
 8009752:	4291      	cmp	r1, r2
 8009754:	f100 33ff 	add.w	r3, r0, #4294967295
 8009758:	d100      	bne.n	800975c <memcpy+0xc>
 800975a:	4770      	bx	lr
 800975c:	b510      	push	{r4, lr}
 800975e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009762:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009766:	4291      	cmp	r1, r2
 8009768:	d1f9      	bne.n	800975e <memcpy+0xe>
 800976a:	bd10      	pop	{r4, pc}

0800976c <_free_r>:
 800976c:	b538      	push	{r3, r4, r5, lr}
 800976e:	4605      	mov	r5, r0
 8009770:	2900      	cmp	r1, #0
 8009772:	d041      	beq.n	80097f8 <_free_r+0x8c>
 8009774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009778:	1f0c      	subs	r4, r1, #4
 800977a:	2b00      	cmp	r3, #0
 800977c:	bfb8      	it	lt
 800977e:	18e4      	addlt	r4, r4, r3
 8009780:	f000 f8e0 	bl	8009944 <__malloc_lock>
 8009784:	4a1d      	ldr	r2, [pc, #116]	@ (80097fc <_free_r+0x90>)
 8009786:	6813      	ldr	r3, [r2, #0]
 8009788:	b933      	cbnz	r3, 8009798 <_free_r+0x2c>
 800978a:	6063      	str	r3, [r4, #4]
 800978c:	6014      	str	r4, [r2, #0]
 800978e:	4628      	mov	r0, r5
 8009790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009794:	f000 b8dc 	b.w	8009950 <__malloc_unlock>
 8009798:	42a3      	cmp	r3, r4
 800979a:	d908      	bls.n	80097ae <_free_r+0x42>
 800979c:	6820      	ldr	r0, [r4, #0]
 800979e:	1821      	adds	r1, r4, r0
 80097a0:	428b      	cmp	r3, r1
 80097a2:	bf01      	itttt	eq
 80097a4:	6819      	ldreq	r1, [r3, #0]
 80097a6:	685b      	ldreq	r3, [r3, #4]
 80097a8:	1809      	addeq	r1, r1, r0
 80097aa:	6021      	streq	r1, [r4, #0]
 80097ac:	e7ed      	b.n	800978a <_free_r+0x1e>
 80097ae:	461a      	mov	r2, r3
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	b10b      	cbz	r3, 80097b8 <_free_r+0x4c>
 80097b4:	42a3      	cmp	r3, r4
 80097b6:	d9fa      	bls.n	80097ae <_free_r+0x42>
 80097b8:	6811      	ldr	r1, [r2, #0]
 80097ba:	1850      	adds	r0, r2, r1
 80097bc:	42a0      	cmp	r0, r4
 80097be:	d10b      	bne.n	80097d8 <_free_r+0x6c>
 80097c0:	6820      	ldr	r0, [r4, #0]
 80097c2:	4401      	add	r1, r0
 80097c4:	1850      	adds	r0, r2, r1
 80097c6:	4283      	cmp	r3, r0
 80097c8:	6011      	str	r1, [r2, #0]
 80097ca:	d1e0      	bne.n	800978e <_free_r+0x22>
 80097cc:	6818      	ldr	r0, [r3, #0]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	6053      	str	r3, [r2, #4]
 80097d2:	4408      	add	r0, r1
 80097d4:	6010      	str	r0, [r2, #0]
 80097d6:	e7da      	b.n	800978e <_free_r+0x22>
 80097d8:	d902      	bls.n	80097e0 <_free_r+0x74>
 80097da:	230c      	movs	r3, #12
 80097dc:	602b      	str	r3, [r5, #0]
 80097de:	e7d6      	b.n	800978e <_free_r+0x22>
 80097e0:	6820      	ldr	r0, [r4, #0]
 80097e2:	1821      	adds	r1, r4, r0
 80097e4:	428b      	cmp	r3, r1
 80097e6:	bf04      	itt	eq
 80097e8:	6819      	ldreq	r1, [r3, #0]
 80097ea:	685b      	ldreq	r3, [r3, #4]
 80097ec:	6063      	str	r3, [r4, #4]
 80097ee:	bf04      	itt	eq
 80097f0:	1809      	addeq	r1, r1, r0
 80097f2:	6021      	streq	r1, [r4, #0]
 80097f4:	6054      	str	r4, [r2, #4]
 80097f6:	e7ca      	b.n	800978e <_free_r+0x22>
 80097f8:	bd38      	pop	{r3, r4, r5, pc}
 80097fa:	bf00      	nop
 80097fc:	20001d3c 	.word	0x20001d3c

08009800 <sbrk_aligned>:
 8009800:	b570      	push	{r4, r5, r6, lr}
 8009802:	4e0f      	ldr	r6, [pc, #60]	@ (8009840 <sbrk_aligned+0x40>)
 8009804:	460c      	mov	r4, r1
 8009806:	6831      	ldr	r1, [r6, #0]
 8009808:	4605      	mov	r5, r0
 800980a:	b911      	cbnz	r1, 8009812 <sbrk_aligned+0x12>
 800980c:	f000 fba6 	bl	8009f5c <_sbrk_r>
 8009810:	6030      	str	r0, [r6, #0]
 8009812:	4621      	mov	r1, r4
 8009814:	4628      	mov	r0, r5
 8009816:	f000 fba1 	bl	8009f5c <_sbrk_r>
 800981a:	1c43      	adds	r3, r0, #1
 800981c:	d103      	bne.n	8009826 <sbrk_aligned+0x26>
 800981e:	f04f 34ff 	mov.w	r4, #4294967295
 8009822:	4620      	mov	r0, r4
 8009824:	bd70      	pop	{r4, r5, r6, pc}
 8009826:	1cc4      	adds	r4, r0, #3
 8009828:	f024 0403 	bic.w	r4, r4, #3
 800982c:	42a0      	cmp	r0, r4
 800982e:	d0f8      	beq.n	8009822 <sbrk_aligned+0x22>
 8009830:	1a21      	subs	r1, r4, r0
 8009832:	4628      	mov	r0, r5
 8009834:	f000 fb92 	bl	8009f5c <_sbrk_r>
 8009838:	3001      	adds	r0, #1
 800983a:	d1f2      	bne.n	8009822 <sbrk_aligned+0x22>
 800983c:	e7ef      	b.n	800981e <sbrk_aligned+0x1e>
 800983e:	bf00      	nop
 8009840:	20001d38 	.word	0x20001d38

08009844 <_malloc_r>:
 8009844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009848:	1ccd      	adds	r5, r1, #3
 800984a:	f025 0503 	bic.w	r5, r5, #3
 800984e:	3508      	adds	r5, #8
 8009850:	2d0c      	cmp	r5, #12
 8009852:	bf38      	it	cc
 8009854:	250c      	movcc	r5, #12
 8009856:	2d00      	cmp	r5, #0
 8009858:	4606      	mov	r6, r0
 800985a:	db01      	blt.n	8009860 <_malloc_r+0x1c>
 800985c:	42a9      	cmp	r1, r5
 800985e:	d904      	bls.n	800986a <_malloc_r+0x26>
 8009860:	230c      	movs	r3, #12
 8009862:	6033      	str	r3, [r6, #0]
 8009864:	2000      	movs	r0, #0
 8009866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800986a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009940 <_malloc_r+0xfc>
 800986e:	f000 f869 	bl	8009944 <__malloc_lock>
 8009872:	f8d8 3000 	ldr.w	r3, [r8]
 8009876:	461c      	mov	r4, r3
 8009878:	bb44      	cbnz	r4, 80098cc <_malloc_r+0x88>
 800987a:	4629      	mov	r1, r5
 800987c:	4630      	mov	r0, r6
 800987e:	f7ff ffbf 	bl	8009800 <sbrk_aligned>
 8009882:	1c43      	adds	r3, r0, #1
 8009884:	4604      	mov	r4, r0
 8009886:	d158      	bne.n	800993a <_malloc_r+0xf6>
 8009888:	f8d8 4000 	ldr.w	r4, [r8]
 800988c:	4627      	mov	r7, r4
 800988e:	2f00      	cmp	r7, #0
 8009890:	d143      	bne.n	800991a <_malloc_r+0xd6>
 8009892:	2c00      	cmp	r4, #0
 8009894:	d04b      	beq.n	800992e <_malloc_r+0xea>
 8009896:	6823      	ldr	r3, [r4, #0]
 8009898:	4639      	mov	r1, r7
 800989a:	4630      	mov	r0, r6
 800989c:	eb04 0903 	add.w	r9, r4, r3
 80098a0:	f000 fb5c 	bl	8009f5c <_sbrk_r>
 80098a4:	4581      	cmp	r9, r0
 80098a6:	d142      	bne.n	800992e <_malloc_r+0xea>
 80098a8:	6821      	ldr	r1, [r4, #0]
 80098aa:	1a6d      	subs	r5, r5, r1
 80098ac:	4629      	mov	r1, r5
 80098ae:	4630      	mov	r0, r6
 80098b0:	f7ff ffa6 	bl	8009800 <sbrk_aligned>
 80098b4:	3001      	adds	r0, #1
 80098b6:	d03a      	beq.n	800992e <_malloc_r+0xea>
 80098b8:	6823      	ldr	r3, [r4, #0]
 80098ba:	442b      	add	r3, r5
 80098bc:	6023      	str	r3, [r4, #0]
 80098be:	f8d8 3000 	ldr.w	r3, [r8]
 80098c2:	685a      	ldr	r2, [r3, #4]
 80098c4:	bb62      	cbnz	r2, 8009920 <_malloc_r+0xdc>
 80098c6:	f8c8 7000 	str.w	r7, [r8]
 80098ca:	e00f      	b.n	80098ec <_malloc_r+0xa8>
 80098cc:	6822      	ldr	r2, [r4, #0]
 80098ce:	1b52      	subs	r2, r2, r5
 80098d0:	d420      	bmi.n	8009914 <_malloc_r+0xd0>
 80098d2:	2a0b      	cmp	r2, #11
 80098d4:	d917      	bls.n	8009906 <_malloc_r+0xc2>
 80098d6:	1961      	adds	r1, r4, r5
 80098d8:	42a3      	cmp	r3, r4
 80098da:	6025      	str	r5, [r4, #0]
 80098dc:	bf18      	it	ne
 80098de:	6059      	strne	r1, [r3, #4]
 80098e0:	6863      	ldr	r3, [r4, #4]
 80098e2:	bf08      	it	eq
 80098e4:	f8c8 1000 	streq.w	r1, [r8]
 80098e8:	5162      	str	r2, [r4, r5]
 80098ea:	604b      	str	r3, [r1, #4]
 80098ec:	4630      	mov	r0, r6
 80098ee:	f000 f82f 	bl	8009950 <__malloc_unlock>
 80098f2:	f104 000b 	add.w	r0, r4, #11
 80098f6:	1d23      	adds	r3, r4, #4
 80098f8:	f020 0007 	bic.w	r0, r0, #7
 80098fc:	1ac2      	subs	r2, r0, r3
 80098fe:	bf1c      	itt	ne
 8009900:	1a1b      	subne	r3, r3, r0
 8009902:	50a3      	strne	r3, [r4, r2]
 8009904:	e7af      	b.n	8009866 <_malloc_r+0x22>
 8009906:	6862      	ldr	r2, [r4, #4]
 8009908:	42a3      	cmp	r3, r4
 800990a:	bf0c      	ite	eq
 800990c:	f8c8 2000 	streq.w	r2, [r8]
 8009910:	605a      	strne	r2, [r3, #4]
 8009912:	e7eb      	b.n	80098ec <_malloc_r+0xa8>
 8009914:	4623      	mov	r3, r4
 8009916:	6864      	ldr	r4, [r4, #4]
 8009918:	e7ae      	b.n	8009878 <_malloc_r+0x34>
 800991a:	463c      	mov	r4, r7
 800991c:	687f      	ldr	r7, [r7, #4]
 800991e:	e7b6      	b.n	800988e <_malloc_r+0x4a>
 8009920:	461a      	mov	r2, r3
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	42a3      	cmp	r3, r4
 8009926:	d1fb      	bne.n	8009920 <_malloc_r+0xdc>
 8009928:	2300      	movs	r3, #0
 800992a:	6053      	str	r3, [r2, #4]
 800992c:	e7de      	b.n	80098ec <_malloc_r+0xa8>
 800992e:	230c      	movs	r3, #12
 8009930:	6033      	str	r3, [r6, #0]
 8009932:	4630      	mov	r0, r6
 8009934:	f000 f80c 	bl	8009950 <__malloc_unlock>
 8009938:	e794      	b.n	8009864 <_malloc_r+0x20>
 800993a:	6005      	str	r5, [r0, #0]
 800993c:	e7d6      	b.n	80098ec <_malloc_r+0xa8>
 800993e:	bf00      	nop
 8009940:	20001d3c 	.word	0x20001d3c

08009944 <__malloc_lock>:
 8009944:	4801      	ldr	r0, [pc, #4]	@ (800994c <__malloc_lock+0x8>)
 8009946:	f7ff bf01 	b.w	800974c <__retarget_lock_acquire_recursive>
 800994a:	bf00      	nop
 800994c:	20001d34 	.word	0x20001d34

08009950 <__malloc_unlock>:
 8009950:	4801      	ldr	r0, [pc, #4]	@ (8009958 <__malloc_unlock+0x8>)
 8009952:	f7ff befc 	b.w	800974e <__retarget_lock_release_recursive>
 8009956:	bf00      	nop
 8009958:	20001d34 	.word	0x20001d34

0800995c <__ssputs_r>:
 800995c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009960:	688e      	ldr	r6, [r1, #8]
 8009962:	461f      	mov	r7, r3
 8009964:	42be      	cmp	r6, r7
 8009966:	680b      	ldr	r3, [r1, #0]
 8009968:	4682      	mov	sl, r0
 800996a:	460c      	mov	r4, r1
 800996c:	4690      	mov	r8, r2
 800996e:	d82d      	bhi.n	80099cc <__ssputs_r+0x70>
 8009970:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009974:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009978:	d026      	beq.n	80099c8 <__ssputs_r+0x6c>
 800997a:	6965      	ldr	r5, [r4, #20]
 800997c:	6909      	ldr	r1, [r1, #16]
 800997e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009982:	eba3 0901 	sub.w	r9, r3, r1
 8009986:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800998a:	1c7b      	adds	r3, r7, #1
 800998c:	444b      	add	r3, r9
 800998e:	106d      	asrs	r5, r5, #1
 8009990:	429d      	cmp	r5, r3
 8009992:	bf38      	it	cc
 8009994:	461d      	movcc	r5, r3
 8009996:	0553      	lsls	r3, r2, #21
 8009998:	d527      	bpl.n	80099ea <__ssputs_r+0x8e>
 800999a:	4629      	mov	r1, r5
 800999c:	f7ff ff52 	bl	8009844 <_malloc_r>
 80099a0:	4606      	mov	r6, r0
 80099a2:	b360      	cbz	r0, 80099fe <__ssputs_r+0xa2>
 80099a4:	6921      	ldr	r1, [r4, #16]
 80099a6:	464a      	mov	r2, r9
 80099a8:	f7ff fed2 	bl	8009750 <memcpy>
 80099ac:	89a3      	ldrh	r3, [r4, #12]
 80099ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80099b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099b6:	81a3      	strh	r3, [r4, #12]
 80099b8:	6126      	str	r6, [r4, #16]
 80099ba:	6165      	str	r5, [r4, #20]
 80099bc:	444e      	add	r6, r9
 80099be:	eba5 0509 	sub.w	r5, r5, r9
 80099c2:	6026      	str	r6, [r4, #0]
 80099c4:	60a5      	str	r5, [r4, #8]
 80099c6:	463e      	mov	r6, r7
 80099c8:	42be      	cmp	r6, r7
 80099ca:	d900      	bls.n	80099ce <__ssputs_r+0x72>
 80099cc:	463e      	mov	r6, r7
 80099ce:	6820      	ldr	r0, [r4, #0]
 80099d0:	4632      	mov	r2, r6
 80099d2:	4641      	mov	r1, r8
 80099d4:	f000 faa8 	bl	8009f28 <memmove>
 80099d8:	68a3      	ldr	r3, [r4, #8]
 80099da:	1b9b      	subs	r3, r3, r6
 80099dc:	60a3      	str	r3, [r4, #8]
 80099de:	6823      	ldr	r3, [r4, #0]
 80099e0:	4433      	add	r3, r6
 80099e2:	6023      	str	r3, [r4, #0]
 80099e4:	2000      	movs	r0, #0
 80099e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ea:	462a      	mov	r2, r5
 80099ec:	f000 fac6 	bl	8009f7c <_realloc_r>
 80099f0:	4606      	mov	r6, r0
 80099f2:	2800      	cmp	r0, #0
 80099f4:	d1e0      	bne.n	80099b8 <__ssputs_r+0x5c>
 80099f6:	6921      	ldr	r1, [r4, #16]
 80099f8:	4650      	mov	r0, sl
 80099fa:	f7ff feb7 	bl	800976c <_free_r>
 80099fe:	230c      	movs	r3, #12
 8009a00:	f8ca 3000 	str.w	r3, [sl]
 8009a04:	89a3      	ldrh	r3, [r4, #12]
 8009a06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a0a:	81a3      	strh	r3, [r4, #12]
 8009a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a10:	e7e9      	b.n	80099e6 <__ssputs_r+0x8a>
	...

08009a14 <_svfiprintf_r>:
 8009a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a18:	4698      	mov	r8, r3
 8009a1a:	898b      	ldrh	r3, [r1, #12]
 8009a1c:	061b      	lsls	r3, r3, #24
 8009a1e:	b09d      	sub	sp, #116	@ 0x74
 8009a20:	4607      	mov	r7, r0
 8009a22:	460d      	mov	r5, r1
 8009a24:	4614      	mov	r4, r2
 8009a26:	d510      	bpl.n	8009a4a <_svfiprintf_r+0x36>
 8009a28:	690b      	ldr	r3, [r1, #16]
 8009a2a:	b973      	cbnz	r3, 8009a4a <_svfiprintf_r+0x36>
 8009a2c:	2140      	movs	r1, #64	@ 0x40
 8009a2e:	f7ff ff09 	bl	8009844 <_malloc_r>
 8009a32:	6028      	str	r0, [r5, #0]
 8009a34:	6128      	str	r0, [r5, #16]
 8009a36:	b930      	cbnz	r0, 8009a46 <_svfiprintf_r+0x32>
 8009a38:	230c      	movs	r3, #12
 8009a3a:	603b      	str	r3, [r7, #0]
 8009a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a40:	b01d      	add	sp, #116	@ 0x74
 8009a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a46:	2340      	movs	r3, #64	@ 0x40
 8009a48:	616b      	str	r3, [r5, #20]
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a4e:	2320      	movs	r3, #32
 8009a50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a54:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a58:	2330      	movs	r3, #48	@ 0x30
 8009a5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009bf8 <_svfiprintf_r+0x1e4>
 8009a5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a62:	f04f 0901 	mov.w	r9, #1
 8009a66:	4623      	mov	r3, r4
 8009a68:	469a      	mov	sl, r3
 8009a6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a6e:	b10a      	cbz	r2, 8009a74 <_svfiprintf_r+0x60>
 8009a70:	2a25      	cmp	r2, #37	@ 0x25
 8009a72:	d1f9      	bne.n	8009a68 <_svfiprintf_r+0x54>
 8009a74:	ebba 0b04 	subs.w	fp, sl, r4
 8009a78:	d00b      	beq.n	8009a92 <_svfiprintf_r+0x7e>
 8009a7a:	465b      	mov	r3, fp
 8009a7c:	4622      	mov	r2, r4
 8009a7e:	4629      	mov	r1, r5
 8009a80:	4638      	mov	r0, r7
 8009a82:	f7ff ff6b 	bl	800995c <__ssputs_r>
 8009a86:	3001      	adds	r0, #1
 8009a88:	f000 80a7 	beq.w	8009bda <_svfiprintf_r+0x1c6>
 8009a8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a8e:	445a      	add	r2, fp
 8009a90:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a92:	f89a 3000 	ldrb.w	r3, [sl]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	f000 809f 	beq.w	8009bda <_svfiprintf_r+0x1c6>
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8009aa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009aa6:	f10a 0a01 	add.w	sl, sl, #1
 8009aaa:	9304      	str	r3, [sp, #16]
 8009aac:	9307      	str	r3, [sp, #28]
 8009aae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ab2:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ab4:	4654      	mov	r4, sl
 8009ab6:	2205      	movs	r2, #5
 8009ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009abc:	484e      	ldr	r0, [pc, #312]	@ (8009bf8 <_svfiprintf_r+0x1e4>)
 8009abe:	f7f6 fb8f 	bl	80001e0 <memchr>
 8009ac2:	9a04      	ldr	r2, [sp, #16]
 8009ac4:	b9d8      	cbnz	r0, 8009afe <_svfiprintf_r+0xea>
 8009ac6:	06d0      	lsls	r0, r2, #27
 8009ac8:	bf44      	itt	mi
 8009aca:	2320      	movmi	r3, #32
 8009acc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ad0:	0711      	lsls	r1, r2, #28
 8009ad2:	bf44      	itt	mi
 8009ad4:	232b      	movmi	r3, #43	@ 0x2b
 8009ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ada:	f89a 3000 	ldrb.w	r3, [sl]
 8009ade:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ae0:	d015      	beq.n	8009b0e <_svfiprintf_r+0xfa>
 8009ae2:	9a07      	ldr	r2, [sp, #28]
 8009ae4:	4654      	mov	r4, sl
 8009ae6:	2000      	movs	r0, #0
 8009ae8:	f04f 0c0a 	mov.w	ip, #10
 8009aec:	4621      	mov	r1, r4
 8009aee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009af2:	3b30      	subs	r3, #48	@ 0x30
 8009af4:	2b09      	cmp	r3, #9
 8009af6:	d94b      	bls.n	8009b90 <_svfiprintf_r+0x17c>
 8009af8:	b1b0      	cbz	r0, 8009b28 <_svfiprintf_r+0x114>
 8009afa:	9207      	str	r2, [sp, #28]
 8009afc:	e014      	b.n	8009b28 <_svfiprintf_r+0x114>
 8009afe:	eba0 0308 	sub.w	r3, r0, r8
 8009b02:	fa09 f303 	lsl.w	r3, r9, r3
 8009b06:	4313      	orrs	r3, r2
 8009b08:	9304      	str	r3, [sp, #16]
 8009b0a:	46a2      	mov	sl, r4
 8009b0c:	e7d2      	b.n	8009ab4 <_svfiprintf_r+0xa0>
 8009b0e:	9b03      	ldr	r3, [sp, #12]
 8009b10:	1d19      	adds	r1, r3, #4
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	9103      	str	r1, [sp, #12]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	bfbb      	ittet	lt
 8009b1a:	425b      	neglt	r3, r3
 8009b1c:	f042 0202 	orrlt.w	r2, r2, #2
 8009b20:	9307      	strge	r3, [sp, #28]
 8009b22:	9307      	strlt	r3, [sp, #28]
 8009b24:	bfb8      	it	lt
 8009b26:	9204      	strlt	r2, [sp, #16]
 8009b28:	7823      	ldrb	r3, [r4, #0]
 8009b2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b2c:	d10a      	bne.n	8009b44 <_svfiprintf_r+0x130>
 8009b2e:	7863      	ldrb	r3, [r4, #1]
 8009b30:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b32:	d132      	bne.n	8009b9a <_svfiprintf_r+0x186>
 8009b34:	9b03      	ldr	r3, [sp, #12]
 8009b36:	1d1a      	adds	r2, r3, #4
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	9203      	str	r2, [sp, #12]
 8009b3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b40:	3402      	adds	r4, #2
 8009b42:	9305      	str	r3, [sp, #20]
 8009b44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009c08 <_svfiprintf_r+0x1f4>
 8009b48:	7821      	ldrb	r1, [r4, #0]
 8009b4a:	2203      	movs	r2, #3
 8009b4c:	4650      	mov	r0, sl
 8009b4e:	f7f6 fb47 	bl	80001e0 <memchr>
 8009b52:	b138      	cbz	r0, 8009b64 <_svfiprintf_r+0x150>
 8009b54:	9b04      	ldr	r3, [sp, #16]
 8009b56:	eba0 000a 	sub.w	r0, r0, sl
 8009b5a:	2240      	movs	r2, #64	@ 0x40
 8009b5c:	4082      	lsls	r2, r0
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	3401      	adds	r4, #1
 8009b62:	9304      	str	r3, [sp, #16]
 8009b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b68:	4824      	ldr	r0, [pc, #144]	@ (8009bfc <_svfiprintf_r+0x1e8>)
 8009b6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b6e:	2206      	movs	r2, #6
 8009b70:	f7f6 fb36 	bl	80001e0 <memchr>
 8009b74:	2800      	cmp	r0, #0
 8009b76:	d036      	beq.n	8009be6 <_svfiprintf_r+0x1d2>
 8009b78:	4b21      	ldr	r3, [pc, #132]	@ (8009c00 <_svfiprintf_r+0x1ec>)
 8009b7a:	bb1b      	cbnz	r3, 8009bc4 <_svfiprintf_r+0x1b0>
 8009b7c:	9b03      	ldr	r3, [sp, #12]
 8009b7e:	3307      	adds	r3, #7
 8009b80:	f023 0307 	bic.w	r3, r3, #7
 8009b84:	3308      	adds	r3, #8
 8009b86:	9303      	str	r3, [sp, #12]
 8009b88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b8a:	4433      	add	r3, r6
 8009b8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b8e:	e76a      	b.n	8009a66 <_svfiprintf_r+0x52>
 8009b90:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b94:	460c      	mov	r4, r1
 8009b96:	2001      	movs	r0, #1
 8009b98:	e7a8      	b.n	8009aec <_svfiprintf_r+0xd8>
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	3401      	adds	r4, #1
 8009b9e:	9305      	str	r3, [sp, #20]
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	f04f 0c0a 	mov.w	ip, #10
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bac:	3a30      	subs	r2, #48	@ 0x30
 8009bae:	2a09      	cmp	r2, #9
 8009bb0:	d903      	bls.n	8009bba <_svfiprintf_r+0x1a6>
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d0c6      	beq.n	8009b44 <_svfiprintf_r+0x130>
 8009bb6:	9105      	str	r1, [sp, #20]
 8009bb8:	e7c4      	b.n	8009b44 <_svfiprintf_r+0x130>
 8009bba:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e7f0      	b.n	8009ba6 <_svfiprintf_r+0x192>
 8009bc4:	ab03      	add	r3, sp, #12
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	462a      	mov	r2, r5
 8009bca:	4b0e      	ldr	r3, [pc, #56]	@ (8009c04 <_svfiprintf_r+0x1f0>)
 8009bcc:	a904      	add	r1, sp, #16
 8009bce:	4638      	mov	r0, r7
 8009bd0:	f3af 8000 	nop.w
 8009bd4:	1c42      	adds	r2, r0, #1
 8009bd6:	4606      	mov	r6, r0
 8009bd8:	d1d6      	bne.n	8009b88 <_svfiprintf_r+0x174>
 8009bda:	89ab      	ldrh	r3, [r5, #12]
 8009bdc:	065b      	lsls	r3, r3, #25
 8009bde:	f53f af2d 	bmi.w	8009a3c <_svfiprintf_r+0x28>
 8009be2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009be4:	e72c      	b.n	8009a40 <_svfiprintf_r+0x2c>
 8009be6:	ab03      	add	r3, sp, #12
 8009be8:	9300      	str	r3, [sp, #0]
 8009bea:	462a      	mov	r2, r5
 8009bec:	4b05      	ldr	r3, [pc, #20]	@ (8009c04 <_svfiprintf_r+0x1f0>)
 8009bee:	a904      	add	r1, sp, #16
 8009bf0:	4638      	mov	r0, r7
 8009bf2:	f000 f879 	bl	8009ce8 <_printf_i>
 8009bf6:	e7ed      	b.n	8009bd4 <_svfiprintf_r+0x1c0>
 8009bf8:	0800a158 	.word	0x0800a158
 8009bfc:	0800a162 	.word	0x0800a162
 8009c00:	00000000 	.word	0x00000000
 8009c04:	0800995d 	.word	0x0800995d
 8009c08:	0800a15e 	.word	0x0800a15e

08009c0c <_printf_common>:
 8009c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c10:	4616      	mov	r6, r2
 8009c12:	4698      	mov	r8, r3
 8009c14:	688a      	ldr	r2, [r1, #8]
 8009c16:	690b      	ldr	r3, [r1, #16]
 8009c18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	bfb8      	it	lt
 8009c20:	4613      	movlt	r3, r2
 8009c22:	6033      	str	r3, [r6, #0]
 8009c24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009c28:	4607      	mov	r7, r0
 8009c2a:	460c      	mov	r4, r1
 8009c2c:	b10a      	cbz	r2, 8009c32 <_printf_common+0x26>
 8009c2e:	3301      	adds	r3, #1
 8009c30:	6033      	str	r3, [r6, #0]
 8009c32:	6823      	ldr	r3, [r4, #0]
 8009c34:	0699      	lsls	r1, r3, #26
 8009c36:	bf42      	ittt	mi
 8009c38:	6833      	ldrmi	r3, [r6, #0]
 8009c3a:	3302      	addmi	r3, #2
 8009c3c:	6033      	strmi	r3, [r6, #0]
 8009c3e:	6825      	ldr	r5, [r4, #0]
 8009c40:	f015 0506 	ands.w	r5, r5, #6
 8009c44:	d106      	bne.n	8009c54 <_printf_common+0x48>
 8009c46:	f104 0a19 	add.w	sl, r4, #25
 8009c4a:	68e3      	ldr	r3, [r4, #12]
 8009c4c:	6832      	ldr	r2, [r6, #0]
 8009c4e:	1a9b      	subs	r3, r3, r2
 8009c50:	42ab      	cmp	r3, r5
 8009c52:	dc26      	bgt.n	8009ca2 <_printf_common+0x96>
 8009c54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009c58:	6822      	ldr	r2, [r4, #0]
 8009c5a:	3b00      	subs	r3, #0
 8009c5c:	bf18      	it	ne
 8009c5e:	2301      	movne	r3, #1
 8009c60:	0692      	lsls	r2, r2, #26
 8009c62:	d42b      	bmi.n	8009cbc <_printf_common+0xb0>
 8009c64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009c68:	4641      	mov	r1, r8
 8009c6a:	4638      	mov	r0, r7
 8009c6c:	47c8      	blx	r9
 8009c6e:	3001      	adds	r0, #1
 8009c70:	d01e      	beq.n	8009cb0 <_printf_common+0xa4>
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	6922      	ldr	r2, [r4, #16]
 8009c76:	f003 0306 	and.w	r3, r3, #6
 8009c7a:	2b04      	cmp	r3, #4
 8009c7c:	bf02      	ittt	eq
 8009c7e:	68e5      	ldreq	r5, [r4, #12]
 8009c80:	6833      	ldreq	r3, [r6, #0]
 8009c82:	1aed      	subeq	r5, r5, r3
 8009c84:	68a3      	ldr	r3, [r4, #8]
 8009c86:	bf0c      	ite	eq
 8009c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c8c:	2500      	movne	r5, #0
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	bfc4      	itt	gt
 8009c92:	1a9b      	subgt	r3, r3, r2
 8009c94:	18ed      	addgt	r5, r5, r3
 8009c96:	2600      	movs	r6, #0
 8009c98:	341a      	adds	r4, #26
 8009c9a:	42b5      	cmp	r5, r6
 8009c9c:	d11a      	bne.n	8009cd4 <_printf_common+0xc8>
 8009c9e:	2000      	movs	r0, #0
 8009ca0:	e008      	b.n	8009cb4 <_printf_common+0xa8>
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	4652      	mov	r2, sl
 8009ca6:	4641      	mov	r1, r8
 8009ca8:	4638      	mov	r0, r7
 8009caa:	47c8      	blx	r9
 8009cac:	3001      	adds	r0, #1
 8009cae:	d103      	bne.n	8009cb8 <_printf_common+0xac>
 8009cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cb8:	3501      	adds	r5, #1
 8009cba:	e7c6      	b.n	8009c4a <_printf_common+0x3e>
 8009cbc:	18e1      	adds	r1, r4, r3
 8009cbe:	1c5a      	adds	r2, r3, #1
 8009cc0:	2030      	movs	r0, #48	@ 0x30
 8009cc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009cc6:	4422      	add	r2, r4
 8009cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ccc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009cd0:	3302      	adds	r3, #2
 8009cd2:	e7c7      	b.n	8009c64 <_printf_common+0x58>
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	4622      	mov	r2, r4
 8009cd8:	4641      	mov	r1, r8
 8009cda:	4638      	mov	r0, r7
 8009cdc:	47c8      	blx	r9
 8009cde:	3001      	adds	r0, #1
 8009ce0:	d0e6      	beq.n	8009cb0 <_printf_common+0xa4>
 8009ce2:	3601      	adds	r6, #1
 8009ce4:	e7d9      	b.n	8009c9a <_printf_common+0x8e>
	...

08009ce8 <_printf_i>:
 8009ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cec:	7e0f      	ldrb	r7, [r1, #24]
 8009cee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009cf0:	2f78      	cmp	r7, #120	@ 0x78
 8009cf2:	4691      	mov	r9, r2
 8009cf4:	4680      	mov	r8, r0
 8009cf6:	460c      	mov	r4, r1
 8009cf8:	469a      	mov	sl, r3
 8009cfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009cfe:	d807      	bhi.n	8009d10 <_printf_i+0x28>
 8009d00:	2f62      	cmp	r7, #98	@ 0x62
 8009d02:	d80a      	bhi.n	8009d1a <_printf_i+0x32>
 8009d04:	2f00      	cmp	r7, #0
 8009d06:	f000 80d2 	beq.w	8009eae <_printf_i+0x1c6>
 8009d0a:	2f58      	cmp	r7, #88	@ 0x58
 8009d0c:	f000 80b9 	beq.w	8009e82 <_printf_i+0x19a>
 8009d10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009d18:	e03a      	b.n	8009d90 <_printf_i+0xa8>
 8009d1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009d1e:	2b15      	cmp	r3, #21
 8009d20:	d8f6      	bhi.n	8009d10 <_printf_i+0x28>
 8009d22:	a101      	add	r1, pc, #4	@ (adr r1, 8009d28 <_printf_i+0x40>)
 8009d24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d28:	08009d81 	.word	0x08009d81
 8009d2c:	08009d95 	.word	0x08009d95
 8009d30:	08009d11 	.word	0x08009d11
 8009d34:	08009d11 	.word	0x08009d11
 8009d38:	08009d11 	.word	0x08009d11
 8009d3c:	08009d11 	.word	0x08009d11
 8009d40:	08009d95 	.word	0x08009d95
 8009d44:	08009d11 	.word	0x08009d11
 8009d48:	08009d11 	.word	0x08009d11
 8009d4c:	08009d11 	.word	0x08009d11
 8009d50:	08009d11 	.word	0x08009d11
 8009d54:	08009e95 	.word	0x08009e95
 8009d58:	08009dbf 	.word	0x08009dbf
 8009d5c:	08009e4f 	.word	0x08009e4f
 8009d60:	08009d11 	.word	0x08009d11
 8009d64:	08009d11 	.word	0x08009d11
 8009d68:	08009eb7 	.word	0x08009eb7
 8009d6c:	08009d11 	.word	0x08009d11
 8009d70:	08009dbf 	.word	0x08009dbf
 8009d74:	08009d11 	.word	0x08009d11
 8009d78:	08009d11 	.word	0x08009d11
 8009d7c:	08009e57 	.word	0x08009e57
 8009d80:	6833      	ldr	r3, [r6, #0]
 8009d82:	1d1a      	adds	r2, r3, #4
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	6032      	str	r2, [r6, #0]
 8009d88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009d90:	2301      	movs	r3, #1
 8009d92:	e09d      	b.n	8009ed0 <_printf_i+0x1e8>
 8009d94:	6833      	ldr	r3, [r6, #0]
 8009d96:	6820      	ldr	r0, [r4, #0]
 8009d98:	1d19      	adds	r1, r3, #4
 8009d9a:	6031      	str	r1, [r6, #0]
 8009d9c:	0606      	lsls	r6, r0, #24
 8009d9e:	d501      	bpl.n	8009da4 <_printf_i+0xbc>
 8009da0:	681d      	ldr	r5, [r3, #0]
 8009da2:	e003      	b.n	8009dac <_printf_i+0xc4>
 8009da4:	0645      	lsls	r5, r0, #25
 8009da6:	d5fb      	bpl.n	8009da0 <_printf_i+0xb8>
 8009da8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009dac:	2d00      	cmp	r5, #0
 8009dae:	da03      	bge.n	8009db8 <_printf_i+0xd0>
 8009db0:	232d      	movs	r3, #45	@ 0x2d
 8009db2:	426d      	negs	r5, r5
 8009db4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009db8:	4859      	ldr	r0, [pc, #356]	@ (8009f20 <_printf_i+0x238>)
 8009dba:	230a      	movs	r3, #10
 8009dbc:	e011      	b.n	8009de2 <_printf_i+0xfa>
 8009dbe:	6821      	ldr	r1, [r4, #0]
 8009dc0:	6833      	ldr	r3, [r6, #0]
 8009dc2:	0608      	lsls	r0, r1, #24
 8009dc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8009dc8:	d402      	bmi.n	8009dd0 <_printf_i+0xe8>
 8009dca:	0649      	lsls	r1, r1, #25
 8009dcc:	bf48      	it	mi
 8009dce:	b2ad      	uxthmi	r5, r5
 8009dd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8009dd2:	4853      	ldr	r0, [pc, #332]	@ (8009f20 <_printf_i+0x238>)
 8009dd4:	6033      	str	r3, [r6, #0]
 8009dd6:	bf14      	ite	ne
 8009dd8:	230a      	movne	r3, #10
 8009dda:	2308      	moveq	r3, #8
 8009ddc:	2100      	movs	r1, #0
 8009dde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009de2:	6866      	ldr	r6, [r4, #4]
 8009de4:	60a6      	str	r6, [r4, #8]
 8009de6:	2e00      	cmp	r6, #0
 8009de8:	bfa2      	ittt	ge
 8009dea:	6821      	ldrge	r1, [r4, #0]
 8009dec:	f021 0104 	bicge.w	r1, r1, #4
 8009df0:	6021      	strge	r1, [r4, #0]
 8009df2:	b90d      	cbnz	r5, 8009df8 <_printf_i+0x110>
 8009df4:	2e00      	cmp	r6, #0
 8009df6:	d04b      	beq.n	8009e90 <_printf_i+0x1a8>
 8009df8:	4616      	mov	r6, r2
 8009dfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8009dfe:	fb03 5711 	mls	r7, r3, r1, r5
 8009e02:	5dc7      	ldrb	r7, [r0, r7]
 8009e04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e08:	462f      	mov	r7, r5
 8009e0a:	42bb      	cmp	r3, r7
 8009e0c:	460d      	mov	r5, r1
 8009e0e:	d9f4      	bls.n	8009dfa <_printf_i+0x112>
 8009e10:	2b08      	cmp	r3, #8
 8009e12:	d10b      	bne.n	8009e2c <_printf_i+0x144>
 8009e14:	6823      	ldr	r3, [r4, #0]
 8009e16:	07df      	lsls	r7, r3, #31
 8009e18:	d508      	bpl.n	8009e2c <_printf_i+0x144>
 8009e1a:	6923      	ldr	r3, [r4, #16]
 8009e1c:	6861      	ldr	r1, [r4, #4]
 8009e1e:	4299      	cmp	r1, r3
 8009e20:	bfde      	ittt	le
 8009e22:	2330      	movle	r3, #48	@ 0x30
 8009e24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009e2c:	1b92      	subs	r2, r2, r6
 8009e2e:	6122      	str	r2, [r4, #16]
 8009e30:	f8cd a000 	str.w	sl, [sp]
 8009e34:	464b      	mov	r3, r9
 8009e36:	aa03      	add	r2, sp, #12
 8009e38:	4621      	mov	r1, r4
 8009e3a:	4640      	mov	r0, r8
 8009e3c:	f7ff fee6 	bl	8009c0c <_printf_common>
 8009e40:	3001      	adds	r0, #1
 8009e42:	d14a      	bne.n	8009eda <_printf_i+0x1f2>
 8009e44:	f04f 30ff 	mov.w	r0, #4294967295
 8009e48:	b004      	add	sp, #16
 8009e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e4e:	6823      	ldr	r3, [r4, #0]
 8009e50:	f043 0320 	orr.w	r3, r3, #32
 8009e54:	6023      	str	r3, [r4, #0]
 8009e56:	4833      	ldr	r0, [pc, #204]	@ (8009f24 <_printf_i+0x23c>)
 8009e58:	2778      	movs	r7, #120	@ 0x78
 8009e5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	6831      	ldr	r1, [r6, #0]
 8009e62:	061f      	lsls	r7, r3, #24
 8009e64:	f851 5b04 	ldr.w	r5, [r1], #4
 8009e68:	d402      	bmi.n	8009e70 <_printf_i+0x188>
 8009e6a:	065f      	lsls	r7, r3, #25
 8009e6c:	bf48      	it	mi
 8009e6e:	b2ad      	uxthmi	r5, r5
 8009e70:	6031      	str	r1, [r6, #0]
 8009e72:	07d9      	lsls	r1, r3, #31
 8009e74:	bf44      	itt	mi
 8009e76:	f043 0320 	orrmi.w	r3, r3, #32
 8009e7a:	6023      	strmi	r3, [r4, #0]
 8009e7c:	b11d      	cbz	r5, 8009e86 <_printf_i+0x19e>
 8009e7e:	2310      	movs	r3, #16
 8009e80:	e7ac      	b.n	8009ddc <_printf_i+0xf4>
 8009e82:	4827      	ldr	r0, [pc, #156]	@ (8009f20 <_printf_i+0x238>)
 8009e84:	e7e9      	b.n	8009e5a <_printf_i+0x172>
 8009e86:	6823      	ldr	r3, [r4, #0]
 8009e88:	f023 0320 	bic.w	r3, r3, #32
 8009e8c:	6023      	str	r3, [r4, #0]
 8009e8e:	e7f6      	b.n	8009e7e <_printf_i+0x196>
 8009e90:	4616      	mov	r6, r2
 8009e92:	e7bd      	b.n	8009e10 <_printf_i+0x128>
 8009e94:	6833      	ldr	r3, [r6, #0]
 8009e96:	6825      	ldr	r5, [r4, #0]
 8009e98:	6961      	ldr	r1, [r4, #20]
 8009e9a:	1d18      	adds	r0, r3, #4
 8009e9c:	6030      	str	r0, [r6, #0]
 8009e9e:	062e      	lsls	r6, r5, #24
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	d501      	bpl.n	8009ea8 <_printf_i+0x1c0>
 8009ea4:	6019      	str	r1, [r3, #0]
 8009ea6:	e002      	b.n	8009eae <_printf_i+0x1c6>
 8009ea8:	0668      	lsls	r0, r5, #25
 8009eaa:	d5fb      	bpl.n	8009ea4 <_printf_i+0x1bc>
 8009eac:	8019      	strh	r1, [r3, #0]
 8009eae:	2300      	movs	r3, #0
 8009eb0:	6123      	str	r3, [r4, #16]
 8009eb2:	4616      	mov	r6, r2
 8009eb4:	e7bc      	b.n	8009e30 <_printf_i+0x148>
 8009eb6:	6833      	ldr	r3, [r6, #0]
 8009eb8:	1d1a      	adds	r2, r3, #4
 8009eba:	6032      	str	r2, [r6, #0]
 8009ebc:	681e      	ldr	r6, [r3, #0]
 8009ebe:	6862      	ldr	r2, [r4, #4]
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	f7f6 f98c 	bl	80001e0 <memchr>
 8009ec8:	b108      	cbz	r0, 8009ece <_printf_i+0x1e6>
 8009eca:	1b80      	subs	r0, r0, r6
 8009ecc:	6060      	str	r0, [r4, #4]
 8009ece:	6863      	ldr	r3, [r4, #4]
 8009ed0:	6123      	str	r3, [r4, #16]
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ed8:	e7aa      	b.n	8009e30 <_printf_i+0x148>
 8009eda:	6923      	ldr	r3, [r4, #16]
 8009edc:	4632      	mov	r2, r6
 8009ede:	4649      	mov	r1, r9
 8009ee0:	4640      	mov	r0, r8
 8009ee2:	47d0      	blx	sl
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	d0ad      	beq.n	8009e44 <_printf_i+0x15c>
 8009ee8:	6823      	ldr	r3, [r4, #0]
 8009eea:	079b      	lsls	r3, r3, #30
 8009eec:	d413      	bmi.n	8009f16 <_printf_i+0x22e>
 8009eee:	68e0      	ldr	r0, [r4, #12]
 8009ef0:	9b03      	ldr	r3, [sp, #12]
 8009ef2:	4298      	cmp	r0, r3
 8009ef4:	bfb8      	it	lt
 8009ef6:	4618      	movlt	r0, r3
 8009ef8:	e7a6      	b.n	8009e48 <_printf_i+0x160>
 8009efa:	2301      	movs	r3, #1
 8009efc:	4632      	mov	r2, r6
 8009efe:	4649      	mov	r1, r9
 8009f00:	4640      	mov	r0, r8
 8009f02:	47d0      	blx	sl
 8009f04:	3001      	adds	r0, #1
 8009f06:	d09d      	beq.n	8009e44 <_printf_i+0x15c>
 8009f08:	3501      	adds	r5, #1
 8009f0a:	68e3      	ldr	r3, [r4, #12]
 8009f0c:	9903      	ldr	r1, [sp, #12]
 8009f0e:	1a5b      	subs	r3, r3, r1
 8009f10:	42ab      	cmp	r3, r5
 8009f12:	dcf2      	bgt.n	8009efa <_printf_i+0x212>
 8009f14:	e7eb      	b.n	8009eee <_printf_i+0x206>
 8009f16:	2500      	movs	r5, #0
 8009f18:	f104 0619 	add.w	r6, r4, #25
 8009f1c:	e7f5      	b.n	8009f0a <_printf_i+0x222>
 8009f1e:	bf00      	nop
 8009f20:	0800a169 	.word	0x0800a169
 8009f24:	0800a17a 	.word	0x0800a17a

08009f28 <memmove>:
 8009f28:	4288      	cmp	r0, r1
 8009f2a:	b510      	push	{r4, lr}
 8009f2c:	eb01 0402 	add.w	r4, r1, r2
 8009f30:	d902      	bls.n	8009f38 <memmove+0x10>
 8009f32:	4284      	cmp	r4, r0
 8009f34:	4623      	mov	r3, r4
 8009f36:	d807      	bhi.n	8009f48 <memmove+0x20>
 8009f38:	1e43      	subs	r3, r0, #1
 8009f3a:	42a1      	cmp	r1, r4
 8009f3c:	d008      	beq.n	8009f50 <memmove+0x28>
 8009f3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f46:	e7f8      	b.n	8009f3a <memmove+0x12>
 8009f48:	4402      	add	r2, r0
 8009f4a:	4601      	mov	r1, r0
 8009f4c:	428a      	cmp	r2, r1
 8009f4e:	d100      	bne.n	8009f52 <memmove+0x2a>
 8009f50:	bd10      	pop	{r4, pc}
 8009f52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f5a:	e7f7      	b.n	8009f4c <memmove+0x24>

08009f5c <_sbrk_r>:
 8009f5c:	b538      	push	{r3, r4, r5, lr}
 8009f5e:	4d06      	ldr	r5, [pc, #24]	@ (8009f78 <_sbrk_r+0x1c>)
 8009f60:	2300      	movs	r3, #0
 8009f62:	4604      	mov	r4, r0
 8009f64:	4608      	mov	r0, r1
 8009f66:	602b      	str	r3, [r5, #0]
 8009f68:	f7f6 fe3e 	bl	8000be8 <_sbrk>
 8009f6c:	1c43      	adds	r3, r0, #1
 8009f6e:	d102      	bne.n	8009f76 <_sbrk_r+0x1a>
 8009f70:	682b      	ldr	r3, [r5, #0]
 8009f72:	b103      	cbz	r3, 8009f76 <_sbrk_r+0x1a>
 8009f74:	6023      	str	r3, [r4, #0]
 8009f76:	bd38      	pop	{r3, r4, r5, pc}
 8009f78:	20001d30 	.word	0x20001d30

08009f7c <_realloc_r>:
 8009f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f80:	4680      	mov	r8, r0
 8009f82:	4615      	mov	r5, r2
 8009f84:	460c      	mov	r4, r1
 8009f86:	b921      	cbnz	r1, 8009f92 <_realloc_r+0x16>
 8009f88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f8c:	4611      	mov	r1, r2
 8009f8e:	f7ff bc59 	b.w	8009844 <_malloc_r>
 8009f92:	b92a      	cbnz	r2, 8009fa0 <_realloc_r+0x24>
 8009f94:	f7ff fbea 	bl	800976c <_free_r>
 8009f98:	2400      	movs	r4, #0
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fa0:	f000 f81a 	bl	8009fd8 <_malloc_usable_size_r>
 8009fa4:	4285      	cmp	r5, r0
 8009fa6:	4606      	mov	r6, r0
 8009fa8:	d802      	bhi.n	8009fb0 <_realloc_r+0x34>
 8009faa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009fae:	d8f4      	bhi.n	8009f9a <_realloc_r+0x1e>
 8009fb0:	4629      	mov	r1, r5
 8009fb2:	4640      	mov	r0, r8
 8009fb4:	f7ff fc46 	bl	8009844 <_malloc_r>
 8009fb8:	4607      	mov	r7, r0
 8009fba:	2800      	cmp	r0, #0
 8009fbc:	d0ec      	beq.n	8009f98 <_realloc_r+0x1c>
 8009fbe:	42b5      	cmp	r5, r6
 8009fc0:	462a      	mov	r2, r5
 8009fc2:	4621      	mov	r1, r4
 8009fc4:	bf28      	it	cs
 8009fc6:	4632      	movcs	r2, r6
 8009fc8:	f7ff fbc2 	bl	8009750 <memcpy>
 8009fcc:	4621      	mov	r1, r4
 8009fce:	4640      	mov	r0, r8
 8009fd0:	f7ff fbcc 	bl	800976c <_free_r>
 8009fd4:	463c      	mov	r4, r7
 8009fd6:	e7e0      	b.n	8009f9a <_realloc_r+0x1e>

08009fd8 <_malloc_usable_size_r>:
 8009fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fdc:	1f18      	subs	r0, r3, #4
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	bfbc      	itt	lt
 8009fe2:	580b      	ldrlt	r3, [r1, r0]
 8009fe4:	18c0      	addlt	r0, r0, r3
 8009fe6:	4770      	bx	lr

08009fe8 <_init>:
 8009fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fea:	bf00      	nop
 8009fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fee:	bc08      	pop	{r3}
 8009ff0:	469e      	mov	lr, r3
 8009ff2:	4770      	bx	lr

08009ff4 <_fini>:
 8009ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ff6:	bf00      	nop
 8009ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ffa:	bc08      	pop	{r3}
 8009ffc:	469e      	mov	lr, r3
 8009ffe:	4770      	bx	lr
