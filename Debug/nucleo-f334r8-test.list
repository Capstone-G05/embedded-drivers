
nucleo-f334r8-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08009530  08009530  0000a530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096c0  080096c0  0000b060  2**0
                  CONTENTS
  4 .ARM          00000008  080096c0  080096c0  0000a6c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096c8  080096c8  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096c8  080096c8  0000a6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080096cc  080096cc  0000a6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080096d0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b060  2**0
                  CONTENTS
 10 .bss          00001ce0  20000060  20000060  0000b060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001d40  20001d40  0000b060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cc74  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000397e  00000000  00000000  00027d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001728  00000000  00000000  0002b688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000122e  00000000  00000000  0002cdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003c23  00000000  00000000  0002dfde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cf3c  00000000  00000000  00031c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce8ee  00000000  00000000  0004eb3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011d42b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000066fc  00000000  00000000  0011d470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  00123b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009518 	.word	0x08009518

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08009518 	.word	0x08009518

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ProcessI2CData>:
//    HAL_I2C_Slave_Receive_IT(hi2c, (uint8_t*)rx_buf, RXBUFSIZE);
//  }
//}

void ProcessI2CData()
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08e      	sub	sp, #56	@ 0x38
 8000284:	af00      	add	r7, sp, #0
  // Read RX Buffer
  osMutexAcquire(I2CMutexRXHandle, portMAX_DELAY);
 8000286:	4b1f      	ldr	r3, [pc, #124]	@ (8000304 <ProcessI2CData+0x84>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	f04f 31ff 	mov.w	r1, #4294967295
 800028e:	4618      	mov	r0, r3
 8000290:	f005 fbf6 	bl	8005a80 <osMutexAcquire>
  uint8_t rx_recv = rx_buf[0];
 8000294:	4b1c      	ldr	r3, [pc, #112]	@ (8000308 <ProcessI2CData+0x88>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  osMutexRelease(I2CMutexRXHandle);
 800029c:	4b19      	ldr	r3, [pc, #100]	@ (8000304 <ProcessI2CData+0x84>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4618      	mov	r0, r3
 80002a2:	f005 fc4b 	bl	8005b3c <osMutexRelease>
  // UART Log Message
  char i2c_rx_message[MAX_STRING_LEN];
  sprintf(i2c_rx_message, "RECEIVED: 0x%02X\n\r", rx_recv);
 80002a6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4917      	ldr	r1, [pc, #92]	@ (800030c <ProcessI2CData+0x8c>)
 80002ae:	4618      	mov	r0, r3
 80002b0:	f008 fc3c 	bl	8008b2c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)i2c_rx_message, strlen(i2c_rx_message), HAL_MAX_DELAY);
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	4618      	mov	r0, r3
 80002b8:	f7ff ff8a 	bl	80001d0 <strlen>
 80002bc:	4603      	mov	r3, r0
 80002be:	b29a      	uxth	r2, r3
 80002c0:	1d39      	adds	r1, r7, #4
 80002c2:	f04f 33ff 	mov.w	r3, #4294967295
 80002c6:	4812      	ldr	r0, [pc, #72]	@ (8000310 <ProcessI2CData+0x90>)
 80002c8:	f004 fe24 	bl	8004f14 <HAL_UART_Transmit>
  // Update TX Buffer
  osMutexAcquire(I2CMutexTXHandle, portMAX_DELAY);
 80002cc:	4b11      	ldr	r3, [pc, #68]	@ (8000314 <ProcessI2CData+0x94>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f04f 31ff 	mov.w	r1, #4294967295
 80002d4:	4618      	mov	r0, r3
 80002d6:	f005 fbd3 	bl	8005a80 <osMutexAcquire>
  tx_buf = rx_recv;
 80002da:	4a0f      	ldr	r2, [pc, #60]	@ (8000318 <ProcessI2CData+0x98>)
 80002dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80002e0:	7013      	strb	r3, [r2, #0]

  HAL_I2C_Slave_Transmit(&hi2c1, (uint8_t*)&tx_buf, TXBUFSIZE, HAL_MAX_DELAY); // blocking
 80002e2:	f04f 33ff 	mov.w	r3, #4294967295
 80002e6:	2201      	movs	r2, #1
 80002e8:	490b      	ldr	r1, [pc, #44]	@ (8000318 <ProcessI2CData+0x98>)
 80002ea:	480c      	ldr	r0, [pc, #48]	@ (800031c <ProcessI2CData+0x9c>)
 80002ec:	f001 f865 	bl	80013ba <HAL_I2C_Slave_Transmit>

  osMutexRelease(I2CMutexTXHandle);
 80002f0:	4b08      	ldr	r3, [pc, #32]	@ (8000314 <ProcessI2CData+0x94>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4618      	mov	r0, r3
 80002f6:	f005 fc21 	bl	8005b3c <osMutexRelease>
}
 80002fa:	bf00      	nop
 80002fc:	3738      	adds	r7, #56	@ 0x38
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	200001b8 	.word	0x200001b8
 8000308:	200001bc 	.word	0x200001bc
 800030c:	08009578 	.word	0x08009578
 8000310:	2000011c 	.word	0x2000011c
 8000314:	200001b0 	.word	0x200001b0
 8000318:	200001bd 	.word	0x200001bd
 800031c:	2000007c 	.word	0x2000007c

08000320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000324:	f000 fca6 	bl	8000c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000328:	f000 f856 	bl	80003d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800032c:	f000 f97a 	bl	8000624 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000330:	f000 f948 	bl	80005c4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000334:	f000 f8ac 	bl	8000490 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000338:	f000 f8ea 	bl	8000510 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800033c:	f005 f9c6 	bl	80056cc <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of I2CMutexTX */
  I2CMutexTXHandle = osMutexNew(&I2CMutexTX_attributes);
 8000340:	4816      	ldr	r0, [pc, #88]	@ (800039c <main+0x7c>)
 8000342:	f005 fb03 	bl	800594c <osMutexNew>
 8000346:	4603      	mov	r3, r0
 8000348:	4a15      	ldr	r2, [pc, #84]	@ (80003a0 <main+0x80>)
 800034a:	6013      	str	r3, [r2, #0]

  /* creation of UARTMutex */
  UARTMutexHandle = osMutexNew(&UARTMutex_attributes);
 800034c:	4815      	ldr	r0, [pc, #84]	@ (80003a4 <main+0x84>)
 800034e:	f005 fafd 	bl	800594c <osMutexNew>
 8000352:	4603      	mov	r3, r0
 8000354:	4a14      	ldr	r2, [pc, #80]	@ (80003a8 <main+0x88>)
 8000356:	6013      	str	r3, [r2, #0]

  /* creation of I2CMutexRX */
  I2CMutexRXHandle = osMutexNew(&I2CMutexRX_attributes);
 8000358:	4814      	ldr	r0, [pc, #80]	@ (80003ac <main+0x8c>)
 800035a:	f005 faf7 	bl	800594c <osMutexNew>
 800035e:	4603      	mov	r3, r0
 8000360:	4a13      	ldr	r2, [pc, #76]	@ (80003b0 <main+0x90>)
 8000362:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of logTask */
  logTaskHandle = osThreadNew(StartLog, NULL, &logTask_attributes);
 8000364:	4a13      	ldr	r2, [pc, #76]	@ (80003b4 <main+0x94>)
 8000366:	2100      	movs	r1, #0
 8000368:	4813      	ldr	r0, [pc, #76]	@ (80003b8 <main+0x98>)
 800036a:	f005 fa17 	bl	800579c <osThreadNew>
 800036e:	4603      	mov	r3, r0
 8000370:	4a12      	ldr	r2, [pc, #72]	@ (80003bc <main+0x9c>)
 8000372:	6013      	str	r3, [r2, #0]

  /* creation of I2CSendTask */
  I2CSendTaskHandle = osThreadNew(StartI2CSend, NULL, &I2CSendTask_attributes);
 8000374:	4a12      	ldr	r2, [pc, #72]	@ (80003c0 <main+0xa0>)
 8000376:	2100      	movs	r1, #0
 8000378:	4812      	ldr	r0, [pc, #72]	@ (80003c4 <main+0xa4>)
 800037a:	f005 fa0f 	bl	800579c <osThreadNew>
 800037e:	4603      	mov	r3, r0
 8000380:	4a11      	ldr	r2, [pc, #68]	@ (80003c8 <main+0xa8>)
 8000382:	6013      	str	r3, [r2, #0]

  /* creation of I2CReceiveTask */
  I2CReceiveTaskHandle = osThreadNew(StartI2CReceive, NULL, &I2CReceiveTask_attributes);
 8000384:	4a11      	ldr	r2, [pc, #68]	@ (80003cc <main+0xac>)
 8000386:	2100      	movs	r1, #0
 8000388:	4811      	ldr	r0, [pc, #68]	@ (80003d0 <main+0xb0>)
 800038a:	f005 fa07 	bl	800579c <osThreadNew>
 800038e:	4603      	mov	r3, r0
 8000390:	4a10      	ldr	r2, [pc, #64]	@ (80003d4 <main+0xb4>)
 8000392:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000394:	f005 f9ce 	bl	8005734 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000398:	bf00      	nop
 800039a:	e7fd      	b.n	8000398 <main+0x78>
 800039c:	08009624 	.word	0x08009624
 80003a0:	200001b0 	.word	0x200001b0
 80003a4:	08009634 	.word	0x08009634
 80003a8:	200001b4 	.word	0x200001b4
 80003ac:	08009644 	.word	0x08009644
 80003b0:	200001b8 	.word	0x200001b8
 80003b4:	080095b8 	.word	0x080095b8
 80003b8:	080006f1 	.word	0x080006f1
 80003bc:	200001a4 	.word	0x200001a4
 80003c0:	080095dc 	.word	0x080095dc
 80003c4:	08000775 	.word	0x08000775
 80003c8:	200001a8 	.word	0x200001a8
 80003cc:	08009600 	.word	0x08009600
 80003d0:	0800078d 	.word	0x0800078d
 80003d4:	200001ac 	.word	0x200001ac

080003d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b096      	sub	sp, #88	@ 0x58
 80003dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80003e2:	2228      	movs	r2, #40	@ 0x28
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f008 fbc0 	bl	8008b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ec:	f107 031c 	add.w	r3, r7, #28
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]
 80003f8:	60da      	str	r2, [r3, #12]
 80003fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003fc:	463b      	mov	r3, r7
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
 8000406:	60da      	str	r2, [r3, #12]
 8000408:	611a      	str	r2, [r3, #16]
 800040a:	615a      	str	r2, [r3, #20]
 800040c:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800040e:	2302      	movs	r3, #2
 8000410:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000412:	2301      	movs	r3, #1
 8000414:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000416:	2310      	movs	r3, #16
 8000418:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800041a:	2302      	movs	r3, #2
 800041c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800041e:	2300      	movs	r3, #0
 8000420:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000422:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000426:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000428:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800042c:	4618      	mov	r0, r3
 800042e:	f002 fb05 	bl	8002a3c <HAL_RCC_OscConfig>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000438:	f000 f9dc 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043c:	230f      	movs	r3, #15
 800043e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000440:	2302      	movs	r3, #2
 8000442:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000444:	2300      	movs	r3, #0
 8000446:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000448:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800044c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000452:	f107 031c 	add.w	r3, r7, #28
 8000456:	2102      	movs	r1, #2
 8000458:	4618      	mov	r0, r3
 800045a:	f003 fb2d 	bl	8003ab8 <HAL_RCC_ClockConfig>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000464:	f000 f9c6 	bl	80007f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
 8000468:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 800046c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800046e:	2300      	movs	r3, #0
 8000470:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000472:	2300      	movs	r3, #0
 8000474:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000476:	463b      	mov	r3, r7
 8000478:	4618      	mov	r0, r3
 800047a:	f003 fd6f 	bl	8003f5c <HAL_RCCEx_PeriphCLKConfig>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000484:	f000 f9b6 	bl	80007f4 <Error_Handler>
  }
}
 8000488:	bf00      	nop
 800048a:	3758      	adds	r7, #88	@ 0x58
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}

08000490 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000494:	4b1b      	ldr	r3, [pc, #108]	@ (8000504 <MX_I2C1_Init+0x74>)
 8000496:	4a1c      	ldr	r2, [pc, #112]	@ (8000508 <MX_I2C1_Init+0x78>)
 8000498:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 800049a:	4b1a      	ldr	r3, [pc, #104]	@ (8000504 <MX_I2C1_Init+0x74>)
 800049c:	4a1b      	ldr	r2, [pc, #108]	@ (800050c <MX_I2C1_Init+0x7c>)
 800049e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 32;
 80004a0:	4b18      	ldr	r3, [pc, #96]	@ (8000504 <MX_I2C1_Init+0x74>)
 80004a2:	2220      	movs	r2, #32
 80004a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004a6:	4b17      	ldr	r3, [pc, #92]	@ (8000504 <MX_I2C1_Init+0x74>)
 80004a8:	2201      	movs	r2, #1
 80004aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004ac:	4b15      	ldr	r3, [pc, #84]	@ (8000504 <MX_I2C1_Init+0x74>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004b2:	4b14      	ldr	r3, [pc, #80]	@ (8000504 <MX_I2C1_Init+0x74>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004b8:	4b12      	ldr	r3, [pc, #72]	@ (8000504 <MX_I2C1_Init+0x74>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004be:	4b11      	ldr	r3, [pc, #68]	@ (8000504 <MX_I2C1_Init+0x74>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000504 <MX_I2C1_Init+0x74>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004ca:	480e      	ldr	r0, [pc, #56]	@ (8000504 <MX_I2C1_Init+0x74>)
 80004cc:	f000 feda 	bl	8001284 <HAL_I2C_Init>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004d6:	f000 f98d 	bl	80007f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004da:	2100      	movs	r1, #0
 80004dc:	4809      	ldr	r0, [pc, #36]	@ (8000504 <MX_I2C1_Init+0x74>)
 80004de:	f002 fa15 	bl	800290c <HAL_I2CEx_ConfigAnalogFilter>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004e8:	f000 f984 	bl	80007f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004ec:	2100      	movs	r1, #0
 80004ee:	4805      	ldr	r0, [pc, #20]	@ (8000504 <MX_I2C1_Init+0x74>)
 80004f0:	f002 fa57 	bl	80029a2 <HAL_I2CEx_ConfigDigitalFilter>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004fa:	f000 f97b 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	2000007c 	.word	0x2000007c
 8000508:	40005400 	.word	0x40005400
 800050c:	00201d2b 	.word	0x00201d2b

08000510 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b088      	sub	sp, #32
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800052e:	4b23      	ldr	r3, [pc, #140]	@ (80005bc <MX_TIM1_Init+0xac>)
 8000530:	4a23      	ldr	r2, [pc, #140]	@ (80005c0 <MX_TIM1_Init+0xb0>)
 8000532:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64;
 8000534:	4b21      	ldr	r3, [pc, #132]	@ (80005bc <MX_TIM1_Init+0xac>)
 8000536:	2240      	movs	r2, #64	@ 0x40
 8000538:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800053a:	4b20      	ldr	r3, [pc, #128]	@ (80005bc <MX_TIM1_Init+0xac>)
 800053c:	2200      	movs	r2, #0
 800053e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000540:	4b1e      	ldr	r3, [pc, #120]	@ (80005bc <MX_TIM1_Init+0xac>)
 8000542:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000546:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000548:	4b1c      	ldr	r3, [pc, #112]	@ (80005bc <MX_TIM1_Init+0xac>)
 800054a:	2200      	movs	r2, #0
 800054c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800054e:	4b1b      	ldr	r3, [pc, #108]	@ (80005bc <MX_TIM1_Init+0xac>)
 8000550:	2200      	movs	r2, #0
 8000552:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000554:	4b19      	ldr	r3, [pc, #100]	@ (80005bc <MX_TIM1_Init+0xac>)
 8000556:	2200      	movs	r2, #0
 8000558:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800055a:	4818      	ldr	r0, [pc, #96]	@ (80005bc <MX_TIM1_Init+0xac>)
 800055c:	f003 fef2 	bl	8004344 <HAL_TIM_IC_Init>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000566:	f000 f945 	bl	80007f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800056e:	2300      	movs	r3, #0
 8000570:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000572:	2300      	movs	r3, #0
 8000574:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	4619      	mov	r1, r3
 800057c:	480f      	ldr	r0, [pc, #60]	@ (80005bc <MX_TIM1_Init+0xac>)
 800057e:	f004 fbef 	bl	8004d60 <HAL_TIMEx_MasterConfigSynchronization>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000588:	f000 f934 	bl	80007f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000590:	2301      	movs	r3, #1
 8000592:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2200      	movs	r2, #0
 80005a0:	4619      	mov	r1, r3
 80005a2:	4806      	ldr	r0, [pc, #24]	@ (80005bc <MX_TIM1_Init+0xac>)
 80005a4:	f004 f95c 	bl	8004860 <HAL_TIM_IC_ConfigChannel>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80005ae:	f000 f921 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80005b2:	bf00      	nop
 80005b4:	3720      	adds	r7, #32
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200000d0 	.word	0x200000d0
 80005c0:	40012c00 	.word	0x40012c00

080005c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005c8:	4b14      	ldr	r3, [pc, #80]	@ (800061c <MX_USART2_UART_Init+0x58>)
 80005ca:	4a15      	ldr	r2, [pc, #84]	@ (8000620 <MX_USART2_UART_Init+0x5c>)
 80005cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80005ce:	4b13      	ldr	r3, [pc, #76]	@ (800061c <MX_USART2_UART_Init+0x58>)
 80005d0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80005d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005d6:	4b11      	ldr	r3, [pc, #68]	@ (800061c <MX_USART2_UART_Init+0x58>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005dc:	4b0f      	ldr	r3, [pc, #60]	@ (800061c <MX_USART2_UART_Init+0x58>)
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005e2:	4b0e      	ldr	r3, [pc, #56]	@ (800061c <MX_USART2_UART_Init+0x58>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005e8:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <MX_USART2_UART_Init+0x58>)
 80005ea:	220c      	movs	r2, #12
 80005ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ee:	4b0b      	ldr	r3, [pc, #44]	@ (800061c <MX_USART2_UART_Init+0x58>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f4:	4b09      	ldr	r3, [pc, #36]	@ (800061c <MX_USART2_UART_Init+0x58>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005fa:	4b08      	ldr	r3, [pc, #32]	@ (800061c <MX_USART2_UART_Init+0x58>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000600:	4b06      	ldr	r3, [pc, #24]	@ (800061c <MX_USART2_UART_Init+0x58>)
 8000602:	2200      	movs	r2, #0
 8000604:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000606:	4805      	ldr	r0, [pc, #20]	@ (800061c <MX_USART2_UART_Init+0x58>)
 8000608:	f004 fc36 	bl	8004e78 <HAL_UART_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000612:	f000 f8ef 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	2000011c 	.word	0x2000011c
 8000620:	40004400 	.word	0x40004400

08000624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	@ 0x28
 8000628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063a:	4b2b      	ldr	r3, [pc, #172]	@ (80006e8 <MX_GPIO_Init+0xc4>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	4a2a      	ldr	r2, [pc, #168]	@ (80006e8 <MX_GPIO_Init+0xc4>)
 8000640:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000644:	6153      	str	r3, [r2, #20]
 8000646:	4b28      	ldr	r3, [pc, #160]	@ (80006e8 <MX_GPIO_Init+0xc4>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000652:	4b25      	ldr	r3, [pc, #148]	@ (80006e8 <MX_GPIO_Init+0xc4>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4a24      	ldr	r2, [pc, #144]	@ (80006e8 <MX_GPIO_Init+0xc4>)
 8000658:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800065c:	6153      	str	r3, [r2, #20]
 800065e:	4b22      	ldr	r3, [pc, #136]	@ (80006e8 <MX_GPIO_Init+0xc4>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b1f      	ldr	r3, [pc, #124]	@ (80006e8 <MX_GPIO_Init+0xc4>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	4a1e      	ldr	r2, [pc, #120]	@ (80006e8 <MX_GPIO_Init+0xc4>)
 8000670:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000674:	6153      	str	r3, [r2, #20]
 8000676:	4b1c      	ldr	r3, [pc, #112]	@ (80006e8 <MX_GPIO_Init+0xc4>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000682:	4b19      	ldr	r3, [pc, #100]	@ (80006e8 <MX_GPIO_Init+0xc4>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	4a18      	ldr	r2, [pc, #96]	@ (80006e8 <MX_GPIO_Init+0xc4>)
 8000688:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800068c:	6153      	str	r3, [r2, #20]
 800068e:	4b16      	ldr	r3, [pc, #88]	@ (80006e8 <MX_GPIO_Init+0xc4>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2120      	movs	r1, #32
 800069e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a2:	f000 fdbd 	bl	8001220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ac:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	480b      	ldr	r0, [pc, #44]	@ (80006ec <MX_GPIO_Init+0xc8>)
 80006be:	f000 fc3d 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006c2:	2320      	movs	r3, #32
 80006c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c6:	2301      	movs	r3, #1
 80006c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ce:	2300      	movs	r3, #0
 80006d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	4619      	mov	r1, r3
 80006d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006dc:	f000 fc2e 	bl	8000f3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006e0:	bf00      	nop
 80006e2:	3728      	adds	r7, #40	@ 0x28
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40021000 	.word	0x40021000
 80006ec:	48000800 	.word	0x48000800

080006f0 <StartLog>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLog */
void StartLog(void *argument)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b090      	sub	sp, #64	@ 0x40
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    // Toggle LED
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006f8:	2120      	movs	r1, #32
 80006fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006fe:	f000 fda7 	bl	8001250 <HAL_GPIO_TogglePin>
    // UART Send
    char heart_beat_message[MAX_STRING_LEN];
    sprintf(heart_beat_message, "STM32 Online (%u)\n\r", heart_beat_count);
 8000702:	4b18      	ldr	r3, [pc, #96]	@ (8000764 <StartLog+0x74>)
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	461a      	mov	r2, r3
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	4916      	ldr	r1, [pc, #88]	@ (8000768 <StartLog+0x78>)
 800070e:	4618      	mov	r0, r3
 8000710:	f008 fa0c 	bl	8008b2c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)heart_beat_message, strlen(heart_beat_message), HAL_MAX_DELAY);
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff fd59 	bl	80001d0 <strlen>
 800071e:	4603      	mov	r3, r0
 8000720:	b29a      	uxth	r2, r3
 8000722:	f107 010c 	add.w	r1, r7, #12
 8000726:	f04f 33ff 	mov.w	r3, #4294967295
 800072a:	4810      	ldr	r0, [pc, #64]	@ (800076c <StartLog+0x7c>)
 800072c:	f004 fbf2 	bl	8004f14 <HAL_UART_Transmit>
    // Update heart beat
    heart_beat_count++;
 8000730:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <StartLog+0x74>)
 8000732:	881b      	ldrh	r3, [r3, #0]
 8000734:	3301      	adds	r3, #1
 8000736:	b29a      	uxth	r2, r3
 8000738:	4b0a      	ldr	r3, [pc, #40]	@ (8000764 <StartLog+0x74>)
 800073a:	801a      	strh	r2, [r3, #0]
    heart_beat_count = heart_beat_count % HEARTBEAT_MAX;
 800073c:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <StartLog+0x74>)
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	4a0b      	ldr	r2, [pc, #44]	@ (8000770 <StartLog+0x80>)
 8000742:	fba2 1203 	umull	r1, r2, r2, r3
 8000746:	0a12      	lsrs	r2, r2, #8
 8000748:	f242 710f 	movw	r1, #9999	@ 0x270f
 800074c:	fb01 f202 	mul.w	r2, r1, r2
 8000750:	1a9b      	subs	r3, r3, r2
 8000752:	b29a      	uxth	r2, r3
 8000754:	4b03      	ldr	r3, [pc, #12]	@ (8000764 <StartLog+0x74>)
 8000756:	801a      	strh	r2, [r3, #0]
    osDelay(HEARTBEAT_SLEEP);
 8000758:	f241 3088 	movw	r0, #5000	@ 0x1388
 800075c:	f005 f8c8 	bl	80058f0 <osDelay>
  {
 8000760:	bf00      	nop
 8000762:	e7c9      	b.n	80006f8 <StartLog+0x8>
 8000764:	200001c0 	.word	0x200001c0
 8000768:	0800958c 	.word	0x0800958c
 800076c:	2000011c 	.word	0x2000011c
 8000770:	068de3af 	.word	0x068de3af

08000774 <StartI2CSend>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartI2CSend */
void StartI2CSend(void *argument)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartI2CSend */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800077c:	2100      	movs	r1, #0
 800077e:	4802      	ldr	r0, [pc, #8]	@ (8000788 <StartI2CSend+0x14>)
 8000780:	f003 fe38 	bl	80043f4 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  for(;;)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <StartI2CSend+0x10>
 8000788:	200000d0 	.word	0x200000d0

0800078c <StartI2CReceive>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartI2CReceive */
void StartI2CReceive(void *argument)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  for(;;)
  {
//    char *i2c_wait_message = "Waiting for I2C...\n\r";
//    HAL_UART_Transmit(&huart2, (uint8_t*)i2c_wait_message, strlen(i2c_wait_message), HAL_MAX_DELAY);

    sig = HAL_I2C_Slave_Receive(&hi2c1, (uint8_t*)&rx_buf, RXBUFSIZE, HAL_MAX_DELAY); // blocking
 8000794:	f04f 33ff 	mov.w	r3, #4294967295
 8000798:	2201      	movs	r2, #1
 800079a:	490a      	ldr	r1, [pc, #40]	@ (80007c4 <StartI2CReceive+0x38>)
 800079c:	480a      	ldr	r0, [pc, #40]	@ (80007c8 <StartI2CReceive+0x3c>)
 800079e:	f000 ff59 	bl	8001654 <HAL_I2C_Slave_Receive>
 80007a2:	4603      	mov	r3, r0
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <StartI2CReceive+0x40>)
 80007a8:	701a      	strb	r2, [r3, #0]
    if (sig == HAL_OK) {
 80007aa:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <StartI2CReceive+0x40>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d104      	bne.n	80007bc <StartI2CReceive+0x30>
      // Process Data
      ProcessI2CData();
 80007b2:	f7ff fd65 	bl	8000280 <ProcessI2CData>
      osDelay(I2C_SLEEP);
 80007b6:	200a      	movs	r0, #10
 80007b8:	f005 f89a 	bl	80058f0 <osDelay>
    }
    osDelay(I2C_SLEEP);
 80007bc:	200a      	movs	r0, #10
 80007be:	f005 f897 	bl	80058f0 <osDelay>
    sig = HAL_I2C_Slave_Receive(&hi2c1, (uint8_t*)&rx_buf, RXBUFSIZE, HAL_MAX_DELAY); // blocking
 80007c2:	e7e7      	b.n	8000794 <StartI2CReceive+0x8>
 80007c4:	200001bc 	.word	0x200001bc
 80007c8:	2000007c 	.word	0x2000007c
 80007cc:	200001be 	.word	0x200001be

080007d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a04      	ldr	r2, [pc, #16]	@ (80007f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d101      	bne.n	80007e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007e2:	f000 fa5d 	bl	8000ca0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40001000 	.word	0x40001000

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <Error_Handler+0x8>

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	4b11      	ldr	r3, [pc, #68]	@ (800084c <HAL_MspInit+0x4c>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	4a10      	ldr	r2, [pc, #64]	@ (800084c <HAL_MspInit+0x4c>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6193      	str	r3, [r2, #24]
 8000812:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <HAL_MspInit+0x4c>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <HAL_MspInit+0x4c>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	4a0a      	ldr	r2, [pc, #40]	@ (800084c <HAL_MspInit+0x4c>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000828:	61d3      	str	r3, [r2, #28]
 800082a:	4b08      	ldr	r3, [pc, #32]	@ (800084c <HAL_MspInit+0x4c>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	210f      	movs	r1, #15
 800083a:	f06f 0001 	mvn.w	r0, #1
 800083e:	f000 fb07 	bl	8000e50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40021000 	.word	0x40021000

08000850 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	@ 0x28
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a1f      	ldr	r2, [pc, #124]	@ (80008ec <HAL_I2C_MspInit+0x9c>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d138      	bne.n	80008e4 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	4b1f      	ldr	r3, [pc, #124]	@ (80008f0 <HAL_I2C_MspInit+0xa0>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	4a1e      	ldr	r2, [pc, #120]	@ (80008f0 <HAL_I2C_MspInit+0xa0>)
 8000878:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800087c:	6153      	str	r3, [r2, #20]
 800087e:	4b1c      	ldr	r3, [pc, #112]	@ (80008f0 <HAL_I2C_MspInit+0xa0>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800088a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800088e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000890:	2312      	movs	r3, #18
 8000892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000894:	2301      	movs	r3, #1
 8000896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000898:	2303      	movs	r3, #3
 800089a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800089c:	2304      	movs	r3, #4
 800089e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4619      	mov	r1, r3
 80008a6:	4813      	ldr	r0, [pc, #76]	@ (80008f4 <HAL_I2C_MspInit+0xa4>)
 80008a8:	f000 fb48 	bl	8000f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008ac:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <HAL_I2C_MspInit+0xa0>)
 80008ae:	69db      	ldr	r3, [r3, #28]
 80008b0:	4a0f      	ldr	r2, [pc, #60]	@ (80008f0 <HAL_I2C_MspInit+0xa0>)
 80008b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008b6:	61d3      	str	r3, [r2, #28]
 80008b8:	4b0d      	ldr	r3, [pc, #52]	@ (80008f0 <HAL_I2C_MspInit+0xa0>)
 80008ba:	69db      	ldr	r3, [r3, #28]
 80008bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2105      	movs	r1, #5
 80008c8:	201f      	movs	r0, #31
 80008ca:	f000 fac1 	bl	8000e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80008ce:	201f      	movs	r0, #31
 80008d0:	f000 fada 	bl	8000e88 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2105      	movs	r1, #5
 80008d8:	2020      	movs	r0, #32
 80008da:	f000 fab9 	bl	8000e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80008de:	2020      	movs	r0, #32
 80008e0:	f000 fad2 	bl	8000e88 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80008e4:	bf00      	nop
 80008e6:	3728      	adds	r7, #40	@ 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40005400 	.word	0x40005400
 80008f0:	40021000 	.word	0x40021000
 80008f4:	48000400 	.word	0x48000400

080008f8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	@ 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a1c      	ldr	r2, [pc, #112]	@ (8000988 <HAL_TIM_IC_MspInit+0x90>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d131      	bne.n	800097e <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800091a:	4b1c      	ldr	r3, [pc, #112]	@ (800098c <HAL_TIM_IC_MspInit+0x94>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	4a1b      	ldr	r2, [pc, #108]	@ (800098c <HAL_TIM_IC_MspInit+0x94>)
 8000920:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000924:	6193      	str	r3, [r2, #24]
 8000926:	4b19      	ldr	r3, [pc, #100]	@ (800098c <HAL_TIM_IC_MspInit+0x94>)
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	4b16      	ldr	r3, [pc, #88]	@ (800098c <HAL_TIM_IC_MspInit+0x94>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	4a15      	ldr	r2, [pc, #84]	@ (800098c <HAL_TIM_IC_MspInit+0x94>)
 8000938:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800093c:	6153      	str	r3, [r2, #20]
 800093e:	4b13      	ldr	r3, [pc, #76]	@ (800098c <HAL_TIM_IC_MspInit+0x94>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800094a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800094e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000950:	2302      	movs	r3, #2
 8000952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800095c:	2306      	movs	r3, #6
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4619      	mov	r1, r3
 8000966:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800096a:	f000 fae7 	bl	8000f3c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2105      	movs	r1, #5
 8000972:	201b      	movs	r0, #27
 8000974:	f000 fa6c 	bl	8000e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000978:	201b      	movs	r0, #27
 800097a:	f000 fa85 	bl	8000e88 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800097e:	bf00      	nop
 8000980:	3728      	adds	r7, #40	@ 0x28
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40012c00 	.word	0x40012c00
 800098c:	40021000 	.word	0x40021000

08000990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	@ 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a17      	ldr	r2, [pc, #92]	@ (8000a0c <HAL_UART_MspInit+0x7c>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d128      	bne.n	8000a04 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b2:	4b17      	ldr	r3, [pc, #92]	@ (8000a10 <HAL_UART_MspInit+0x80>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	4a16      	ldr	r2, [pc, #88]	@ (8000a10 <HAL_UART_MspInit+0x80>)
 80009b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009bc:	61d3      	str	r3, [r2, #28]
 80009be:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <HAL_UART_MspInit+0x80>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <HAL_UART_MspInit+0x80>)
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	4a10      	ldr	r2, [pc, #64]	@ (8000a10 <HAL_UART_MspInit+0x80>)
 80009d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009d4:	6153      	str	r3, [r2, #20]
 80009d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <HAL_UART_MspInit+0x80>)
 80009d8:	695b      	ldr	r3, [r3, #20]
 80009da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009e2:	230c      	movs	r3, #12
 80009e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ee:	2303      	movs	r3, #3
 80009f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009f2:	2307      	movs	r3, #7
 80009f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a00:	f000 fa9c 	bl	8000f3c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a04:	bf00      	nop
 8000a06:	3728      	adds	r7, #40	@ 0x28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40004400 	.word	0x40004400
 8000a10:	40021000 	.word	0x40021000

08000a14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08e      	sub	sp, #56	@ 0x38
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a24:	4b33      	ldr	r3, [pc, #204]	@ (8000af4 <HAL_InitTick+0xe0>)
 8000a26:	69db      	ldr	r3, [r3, #28]
 8000a28:	4a32      	ldr	r2, [pc, #200]	@ (8000af4 <HAL_InitTick+0xe0>)
 8000a2a:	f043 0310 	orr.w	r3, r3, #16
 8000a2e:	61d3      	str	r3, [r2, #28]
 8000a30:	4b30      	ldr	r3, [pc, #192]	@ (8000af4 <HAL_InitTick+0xe0>)
 8000a32:	69db      	ldr	r3, [r3, #28]
 8000a34:	f003 0310 	and.w	r3, r3, #16
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a3c:	f107 0210 	add.w	r2, r7, #16
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4611      	mov	r1, r2
 8000a46:	4618      	mov	r0, r3
 8000a48:	f003 fa56 	bl	8003ef8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a4c:	6a3b      	ldr	r3, [r7, #32]
 8000a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d103      	bne.n	8000a5e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a56:	f003 fa0b 	bl	8003e70 <HAL_RCC_GetPCLK1Freq>
 8000a5a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a5c:	e004      	b.n	8000a68 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a5e:	f003 fa07 	bl	8003e70 <HAL_RCC_GetPCLK1Freq>
 8000a62:	4603      	mov	r3, r0
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a6a:	4a23      	ldr	r2, [pc, #140]	@ (8000af8 <HAL_InitTick+0xe4>)
 8000a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a70:	0c9b      	lsrs	r3, r3, #18
 8000a72:	3b01      	subs	r3, #1
 8000a74:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a76:	4b21      	ldr	r3, [pc, #132]	@ (8000afc <HAL_InitTick+0xe8>)
 8000a78:	4a21      	ldr	r2, [pc, #132]	@ (8000b00 <HAL_InitTick+0xec>)
 8000a7a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000afc <HAL_InitTick+0xe8>)
 8000a7e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a82:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a84:	4a1d      	ldr	r2, [pc, #116]	@ (8000afc <HAL_InitTick+0xe8>)
 8000a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a88:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000afc <HAL_InitTick+0xe8>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a90:	4b1a      	ldr	r3, [pc, #104]	@ (8000afc <HAL_InitTick+0xe8>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a96:	4b19      	ldr	r3, [pc, #100]	@ (8000afc <HAL_InitTick+0xe8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a9c:	4817      	ldr	r0, [pc, #92]	@ (8000afc <HAL_InitTick+0xe8>)
 8000a9e:	f003 fb93 	bl	80041c8 <HAL_TIM_Base_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000aa8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d11b      	bne.n	8000ae8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ab0:	4812      	ldr	r0, [pc, #72]	@ (8000afc <HAL_InitTick+0xe8>)
 8000ab2:	f003 fbeb 	bl	800428c <HAL_TIM_Base_Start_IT>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000abc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d111      	bne.n	8000ae8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000ac4:	2036      	movs	r0, #54	@ 0x36
 8000ac6:	f000 f9df 	bl	8000e88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b0f      	cmp	r3, #15
 8000ace:	d808      	bhi.n	8000ae2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority, 0U);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	2036      	movs	r0, #54	@ 0x36
 8000ad6:	f000 f9bb 	bl	8000e50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ada:	4a0a      	ldr	r2, [pc, #40]	@ (8000b04 <HAL_InitTick+0xf0>)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6013      	str	r3, [r2, #0]
 8000ae0:	e002      	b.n	8000ae8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ae8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3738      	adds	r7, #56	@ 0x38
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40021000 	.word	0x40021000
 8000af8:	431bde83 	.word	0x431bde83
 8000afc:	200001c4 	.word	0x200001c4
 8000b00:	40001000 	.word	0x40001000
 8000b04:	20000004 	.word	0x20000004

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <NMI_Handler+0x4>

08000b10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <HardFault_Handler+0x4>

08000b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <MemManage_Handler+0x4>

08000b20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <BusFault_Handler+0x4>

08000b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <UsageFault_Handler+0x4>

08000b30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
	...

08000b40 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b44:	4802      	ldr	r0, [pc, #8]	@ (8000b50 <TIM1_CC_IRQHandler+0x10>)
 8000b46:	f003 fd89 	bl	800465c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200000d0 	.word	0x200000d0

08000b54 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b58:	4802      	ldr	r0, [pc, #8]	@ (8000b64 <I2C1_EV_IRQHandler+0x10>)
 8000b5a:	f000 fe8b 	bl	8001874 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	2000007c 	.word	0x2000007c

08000b68 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000b6c:	4802      	ldr	r0, [pc, #8]	@ (8000b78 <I2C1_ER_IRQHandler+0x10>)
 8000b6e:	f000 fe9b 	bl	80018a8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	2000007c 	.word	0x2000007c

08000b7c <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b80:	4802      	ldr	r0, [pc, #8]	@ (8000b8c <TIM6_DAC1_IRQHandler+0x10>)
 8000b82:	f003 fd6b 	bl	800465c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200001c4 	.word	0x200001c4

08000b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b98:	4a14      	ldr	r2, [pc, #80]	@ (8000bec <_sbrk+0x5c>)
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <_sbrk+0x60>)
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba4:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bac:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <_sbrk+0x64>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	@ (8000bf8 <_sbrk+0x68>)
 8000bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb2:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d207      	bcs.n	8000bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc0:	f008 f832 	bl	8008c28 <__errno>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
 8000bce:	e009      	b.n	8000be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd0:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	@ (8000bf4 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a05      	ldr	r2, [pc, #20]	@ (8000bf4 <_sbrk+0x64>)
 8000be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20003000 	.word	0x20003000
 8000bf0:	00000400 	.word	0x00000400
 8000bf4:	20000210 	.word	0x20000210
 8000bf8:	20001d40 	.word	0x20001d40

08000bfc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <SystemInit+0x20>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c06:	4a05      	ldr	r2, [pc, #20]	@ (8000c1c <SystemInit+0x20>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c58 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c24:	f7ff ffea 	bl	8000bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c28:	480c      	ldr	r0, [pc, #48]	@ (8000c5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c2a:	490d      	ldr	r1, [pc, #52]	@ (8000c60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c64 <LoopForever+0xe>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c40:	4c0a      	ldr	r4, [pc, #40]	@ (8000c6c <LoopForever+0x16>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f007 fff1 	bl	8008c34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c52:	f7ff fb65 	bl	8000320 <main>

08000c56 <LoopForever>:

LoopForever:
    b LoopForever
 8000c56:	e7fe      	b.n	8000c56 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c58:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c64:	080096d0 	.word	0x080096d0
  ldr r2, =_sbss
 8000c68:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c6c:	20001d40 	.word	0x20001d40

08000c70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC1_2_IRQHandler>
	...

08000c74 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c78:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <HAL_Init+0x28>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a07      	ldr	r2, [pc, #28]	@ (8000c9c <HAL_Init+0x28>)
 8000c7e:	f043 0310 	orr.w	r3, r3, #16
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c84:	2003      	movs	r0, #3
 8000c86:	f000 f8d8 	bl	8000e3a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8a:	200f      	movs	r0, #15
 8000c8c:	f7ff fec2 	bl	8000a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c90:	f7ff fdb6 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40022000 	.word	0x40022000

08000ca0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <HAL_IncTick+0x20>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <HAL_IncTick+0x24>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4413      	add	r3, r2
 8000cb0:	4a04      	ldr	r2, [pc, #16]	@ (8000cc4 <HAL_IncTick+0x24>)
 8000cb2:	6013      	str	r3, [r2, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	20000214 	.word	0x20000214

08000cc8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ccc:	4b03      	ldr	r3, [pc, #12]	@ (8000cdc <HAL_GetTick+0x14>)
 8000cce:	681b      	ldr	r3, [r3, #0]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000214 	.word	0x20000214

08000ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d24 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d12:	4a04      	ldr	r2, [pc, #16]	@ (8000d24 <__NVIC_SetPriorityGrouping+0x44>)
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	60d3      	str	r3, [r2, #12]
}
 8000d18:	bf00      	nop
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d2c:	4b04      	ldr	r3, [pc, #16]	@ (8000d40 <__NVIC_GetPriorityGrouping+0x18>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	0a1b      	lsrs	r3, r3, #8
 8000d32:	f003 0307 	and.w	r3, r3, #7
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	db0b      	blt.n	8000d6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	f003 021f 	and.w	r2, r3, #31
 8000d5c:	4907      	ldr	r1, [pc, #28]	@ (8000d7c <__NVIC_EnableIRQ+0x38>)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	095b      	lsrs	r3, r3, #5
 8000d64:	2001      	movs	r0, #1
 8000d66:	fa00 f202 	lsl.w	r2, r0, r2
 8000d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000e100 	.word	0xe000e100

08000d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	db0a      	blt.n	8000daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	490c      	ldr	r1, [pc, #48]	@ (8000dcc <__NVIC_SetPriority+0x4c>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	0112      	lsls	r2, r2, #4
 8000da0:	b2d2      	uxtb	r2, r2
 8000da2:	440b      	add	r3, r1
 8000da4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da8:	e00a      	b.n	8000dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4908      	ldr	r1, [pc, #32]	@ (8000dd0 <__NVIC_SetPriority+0x50>)
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	f003 030f 	and.w	r3, r3, #15
 8000db6:	3b04      	subs	r3, #4
 8000db8:	0112      	lsls	r2, r2, #4
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	761a      	strb	r2, [r3, #24]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000e100 	.word	0xe000e100
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	@ 0x24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	f1c3 0307 	rsb	r3, r3, #7
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	bf28      	it	cs
 8000df2:	2304      	movcs	r3, #4
 8000df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	2b06      	cmp	r3, #6
 8000dfc:	d902      	bls.n	8000e04 <NVIC_EncodePriority+0x30>
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3b03      	subs	r3, #3
 8000e02:	e000      	b.n	8000e06 <NVIC_EncodePriority+0x32>
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	f04f 32ff 	mov.w	r2, #4294967295
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43da      	mvns	r2, r3
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	401a      	ands	r2, r3
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	fa01 f303 	lsl.w	r3, r1, r3
 8000e26:	43d9      	mvns	r1, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	4313      	orrs	r3, r2
         );
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3724      	adds	r7, #36	@ 0x24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ff4c 	bl	8000ce0 <__NVIC_SetPriorityGrouping>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
 8000e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e62:	f7ff ff61 	bl	8000d28 <__NVIC_GetPriorityGrouping>
 8000e66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	68b9      	ldr	r1, [r7, #8]
 8000e6c:	6978      	ldr	r0, [r7, #20]
 8000e6e:	f7ff ffb1 	bl	8000dd4 <NVIC_EncodePriority>
 8000e72:	4602      	mov	r2, r0
 8000e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e78:	4611      	mov	r1, r2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff ff80 	bl	8000d80 <__NVIC_SetPriority>
}
 8000e80:	bf00      	nop
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff ff54 	bl	8000d44 <__NVIC_EnableIRQ>
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d005      	beq.n	8000ec6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2204      	movs	r2, #4
 8000ebe:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	73fb      	strb	r3, [r7, #15]
 8000ec4:	e027      	b.n	8000f16 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f022 020e 	bic.w	r2, r2, #14
 8000ed4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f022 0201 	bic.w	r2, r2, #1
 8000ee4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000eee:	2101      	movs	r1, #1
 8000ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	4798      	blx	r3
    }
  }
  return status;
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4a:	e14e      	b.n	80011ea <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	2101      	movs	r1, #1
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	fa01 f303 	lsl.w	r3, r1, r3
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f000 8140 	beq.w	80011e4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d005      	beq.n	8000f7c <HAL_GPIO_Init+0x40>
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d130      	bne.n	8000fde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2203      	movs	r2, #3
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	091b      	lsrs	r3, r3, #4
 8000fc8:	f003 0201 	and.w	r2, r3, #1
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d017      	beq.n	800101a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d123      	bne.n	800106e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	08da      	lsrs	r2, r3, #3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3208      	adds	r2, #8
 800102e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001032:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	220f      	movs	r2, #15
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	691a      	ldr	r2, [r3, #16]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f003 0307 	and.w	r3, r3, #7
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	08da      	lsrs	r2, r3, #3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3208      	adds	r2, #8
 8001068:	6939      	ldr	r1, [r7, #16]
 800106a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	2203      	movs	r2, #3
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0203 	and.w	r2, r3, #3
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 809a 	beq.w	80011e4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b0:	4b55      	ldr	r3, [pc, #340]	@ (8001208 <HAL_GPIO_Init+0x2cc>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a54      	ldr	r2, [pc, #336]	@ (8001208 <HAL_GPIO_Init+0x2cc>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b52      	ldr	r3, [pc, #328]	@ (8001208 <HAL_GPIO_Init+0x2cc>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010c8:	4a50      	ldr	r2, [pc, #320]	@ (800120c <HAL_GPIO_Init+0x2d0>)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	089b      	lsrs	r3, r3, #2
 80010ce:	3302      	adds	r3, #2
 80010d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	220f      	movs	r2, #15
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010f2:	d013      	beq.n	800111c <HAL_GPIO_Init+0x1e0>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a46      	ldr	r2, [pc, #280]	@ (8001210 <HAL_GPIO_Init+0x2d4>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d00d      	beq.n	8001118 <HAL_GPIO_Init+0x1dc>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a45      	ldr	r2, [pc, #276]	@ (8001214 <HAL_GPIO_Init+0x2d8>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d007      	beq.n	8001114 <HAL_GPIO_Init+0x1d8>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a44      	ldr	r2, [pc, #272]	@ (8001218 <HAL_GPIO_Init+0x2dc>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d101      	bne.n	8001110 <HAL_GPIO_Init+0x1d4>
 800110c:	2303      	movs	r3, #3
 800110e:	e006      	b.n	800111e <HAL_GPIO_Init+0x1e2>
 8001110:	2305      	movs	r3, #5
 8001112:	e004      	b.n	800111e <HAL_GPIO_Init+0x1e2>
 8001114:	2302      	movs	r3, #2
 8001116:	e002      	b.n	800111e <HAL_GPIO_Init+0x1e2>
 8001118:	2301      	movs	r3, #1
 800111a:	e000      	b.n	800111e <HAL_GPIO_Init+0x1e2>
 800111c:	2300      	movs	r3, #0
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	f002 0203 	and.w	r2, r2, #3
 8001124:	0092      	lsls	r2, r2, #2
 8001126:	4093      	lsls	r3, r2
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800112e:	4937      	ldr	r1, [pc, #220]	@ (800120c <HAL_GPIO_Init+0x2d0>)
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	089b      	lsrs	r3, r3, #2
 8001134:	3302      	adds	r3, #2
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800113c:	4b37      	ldr	r3, [pc, #220]	@ (800121c <HAL_GPIO_Init+0x2e0>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	43db      	mvns	r3, r3
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001160:	4a2e      	ldr	r2, [pc, #184]	@ (800121c <HAL_GPIO_Init+0x2e0>)
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001166:	4b2d      	ldr	r3, [pc, #180]	@ (800121c <HAL_GPIO_Init+0x2e0>)
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	43db      	mvns	r3, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4013      	ands	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800118a:	4a24      	ldr	r2, [pc, #144]	@ (800121c <HAL_GPIO_Init+0x2e0>)
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001190:	4b22      	ldr	r3, [pc, #136]	@ (800121c <HAL_GPIO_Init+0x2e0>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	43db      	mvns	r3, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011b4:	4a19      	ldr	r2, [pc, #100]	@ (800121c <HAL_GPIO_Init+0x2e0>)
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ba:	4b18      	ldr	r3, [pc, #96]	@ (800121c <HAL_GPIO_Init+0x2e0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011de:	4a0f      	ldr	r2, [pc, #60]	@ (800121c <HAL_GPIO_Init+0x2e0>)
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	3301      	adds	r3, #1
 80011e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	fa22 f303 	lsr.w	r3, r2, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f47f aea9 	bne.w	8000f4c <HAL_GPIO_Init+0x10>
  }
}
 80011fa:	bf00      	nop
 80011fc:	bf00      	nop
 80011fe:	371c      	adds	r7, #28
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	40021000 	.word	0x40021000
 800120c:	40010000 	.word	0x40010000
 8001210:	48000400 	.word	0x48000400
 8001214:	48000800 	.word	0x48000800
 8001218:	48000c00 	.word	0x48000c00
 800121c:	40010400 	.word	0x40010400

08001220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	807b      	strh	r3, [r7, #2]
 800122c:	4613      	mov	r3, r2
 800122e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001230:	787b      	ldrb	r3, [r7, #1]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001236:	887a      	ldrh	r2, [r7, #2]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800123c:	e002      	b.n	8001244 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800123e:	887a      	ldrh	r2, [r7, #2]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001262:	887a      	ldrh	r2, [r7, #2]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4013      	ands	r3, r2
 8001268:	041a      	lsls	r2, r3, #16
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	43d9      	mvns	r1, r3
 800126e:	887b      	ldrh	r3, [r7, #2]
 8001270:	400b      	ands	r3, r1
 8001272:	431a      	orrs	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	619a      	str	r2, [r3, #24]
}
 8001278:	bf00      	nop
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e08d      	b.n	80013b2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d106      	bne.n	80012b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff fad0 	bl	8000850 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2224      	movs	r2, #36	@ 0x24
 80012b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 0201 	bic.w	r2, r2, #1
 80012c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80012d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80012e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d107      	bne.n	80012fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	e006      	b.n	800130c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800130a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	2b02      	cmp	r3, #2
 8001312:	d108      	bne.n	8001326 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	e007      	b.n	8001336 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001334:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	6812      	ldr	r2, [r2, #0]
 8001340:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001344:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001348:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001358:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691a      	ldr	r2, [r3, #16]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	430a      	orrs	r2, r1
 8001372:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69d9      	ldr	r1, [r3, #28]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a1a      	ldr	r2, [r3, #32]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	430a      	orrs	r2, r1
 8001382:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f042 0201 	orr.w	r2, r2, #1
 8001392:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2220      	movs	r2, #32
 800139e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_I2C_Slave_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b088      	sub	sp, #32
 80013be:	af02      	add	r7, sp, #8
 80013c0:	60f8      	str	r0, [r7, #12]
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	4613      	mov	r3, r2
 80013c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint16_t tmpXferCount;
  HAL_StatusTypeDef error;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b20      	cmp	r3, #32
 80013d4:	f040 8139 	bne.w	800164a <HAL_I2C_Slave_Transmit+0x290>
  {
    if ((pData == NULL) || (Size == 0U))
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d002      	beq.n	80013e4 <HAL_I2C_Slave_Transmit+0x2a>
 80013de:	88fb      	ldrh	r3, [r7, #6]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d105      	bne.n	80013f0 <HAL_I2C_Slave_Transmit+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013ea:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e12d      	b.n	800164c <HAL_I2C_Slave_Transmit+0x292>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d101      	bne.n	80013fe <HAL_I2C_Slave_Transmit+0x44>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e126      	b.n	800164c <HAL_I2C_Slave_Transmit+0x292>
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2201      	movs	r2, #1
 8001402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001406:	f7ff fc5f 	bl	8000cc8 <HAL_GetTick>
 800140a:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2221      	movs	r2, #33	@ 0x21
 8001410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2220      	movs	r2, #32
 8001418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2200      	movs	r2, #0
 8001420:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	68ba      	ldr	r2, [r7, #8]
 8001426:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	88fa      	ldrh	r2, [r7, #6]
 800142c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2200      	movs	r2, #0
 8001432:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001442:	605a      	str	r2, [r3, #4]

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800144c:	d111      	bne.n	8001472 <HAL_I2C_Slave_Transmit+0xb8>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001452:	781a      	ldrb	r2, [r3, #0]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001468:	b29b      	uxth	r3, r3
 800146a:	3b01      	subs	r3, #1
 800146c:	b29a      	uxth	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	2200      	movs	r2, #0
 800147a:	2108      	movs	r1, #8
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f000 ff98 	bl	80023b2 <I2C_WaitOnFlagUntilTimeout>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00c      	beq.n	80014a2 <HAL_I2C_Slave_Transmit+0xe8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001496:	605a      	str	r2, [r3, #4]

      /* Flush TX register */
      I2C_Flush_TXDR(hi2c);
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f000 ff48 	bl	800232e <I2C_Flush_TXDR>

      return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e0d4      	b.n	800164c <HAL_I2C_Slave_Transmit+0x292>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2208      	movs	r2, #8
 80014a8:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d11b      	bne.n	80014ea <HAL_I2C_Slave_Transmit+0x130>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	2200      	movs	r2, #0
 80014ba:	2108      	movs	r1, #8
 80014bc:	68f8      	ldr	r0, [r7, #12]
 80014be:	f000 ff78 	bl	80023b2 <I2C_WaitOnFlagUntilTimeout>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d00c      	beq.n	80014e2 <HAL_I2C_Slave_Transmit+0x128>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014d6:	605a      	str	r2, [r3, #4]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f000 ff28 	bl	800232e <I2C_Flush_TXDR>

        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e0b4      	b.n	800164c <HAL_I2C_Slave_Transmit+0x292>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2208      	movs	r2, #8
 80014e8:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f000 ff5b 	bl	80023b2 <I2C_WaitOnFlagUntilTimeout>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d030      	beq.n	8001564 <HAL_I2C_Slave_Transmit+0x1aa>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001510:	605a      	str	r2, [r3, #4]

      /* Flush TX register */
      I2C_Flush_TXDR(hi2c);
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f000 ff0b 	bl	800232e <I2C_Flush_TXDR>

      return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e097      	b.n	800164c <HAL_I2C_Slave_Transmit+0x292>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	6839      	ldr	r1, [r7, #0]
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f000 ff9f 	bl	8002464 <I2C_WaitOnTXISFlagUntilTimeout>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d009      	beq.n	8001540 <HAL_I2C_Slave_Transmit+0x186>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800153a:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e085      	b.n	800164c <HAL_I2C_Slave_Transmit+0x292>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001544:	781a      	ldrb	r2, [r3, #0]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001550:	1c5a      	adds	r2, r3, #1
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800155a:	b29b      	uxth	r3, r3
 800155c:	3b01      	subs	r3, #1
 800155e:	b29a      	uxth	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferCount > 0U)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001568:	b29b      	uxth	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1d6      	bne.n	800151c <HAL_I2C_Slave_Transmit+0x162>
    }

    /* Wait until AF flag is set */
    error = I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart);
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	2200      	movs	r2, #0
 8001576:	2110      	movs	r1, #16
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f000 ff1a 	bl	80023b2 <I2C_WaitOnFlagUntilTimeout>
 800157e:	4603      	mov	r3, r0
 8001580:	74fb      	strb	r3, [r7, #19]

    if (error != HAL_OK)
 8001582:	7cfb      	ldrb	r3, [r7, #19]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d017      	beq.n	80015b8 <HAL_I2C_Slave_Transmit+0x1fe>
    {
      /* Check that I2C transfer finished */
      /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
      /* Mean XferCount == 0 */

      tmpXferCount = hi2c->XferCount;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800158c:	823b      	strh	r3, [r7, #16]
      if ((hi2c->ErrorCode == HAL_I2C_ERROR_AF) && (tmpXferCount == 0U))
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001592:	2b04      	cmp	r3, #4
 8001594:	d106      	bne.n	80015a4 <HAL_I2C_Slave_Transmit+0x1ea>
 8001596:	8a3b      	ldrh	r3, [r7, #16]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d103      	bne.n	80015a4 <HAL_I2C_Slave_Transmit+0x1ea>
      {
        /* Reset ErrorCode to NONE */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2200      	movs	r2, #0
 80015a0:	645a      	str	r2, [r3, #68]	@ 0x44
 80015a2:	e026      	b.n	80015f2 <HAL_I2C_Slave_Transmit+0x238>
      }
      else
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80015b2:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e049      	b.n	800164c <HAL_I2C_Slave_Transmit+0x292>
      }
    }
    else
    {
      /* Flush TX register */
      I2C_Flush_TXDR(hi2c);
 80015b8:	68f8      	ldr	r0, [r7, #12]
 80015ba:	f000 feb8 	bl	800232e <I2C_Flush_TXDR>

      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2210      	movs	r2, #16
 80015c4:	61da      	str	r2, [r3, #28]

      /* Wait until STOP flag is set */
      if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	6839      	ldr	r1, [r7, #0]
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f000 ff91 	bl	80024f2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d009      	beq.n	80015ea <HAL_I2C_Slave_Transmit+0x230>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80015e4:	605a      	str	r2, [r3, #4]

        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e030      	b.n	800164c <HAL_I2C_Slave_Transmit+0x292>
      }

      /* Clear STOP flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2220      	movs	r2, #32
 80015f0:	61da      	str	r2, [r3, #28]
    }

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f000 fed7 	bl	80023b2 <I2C_WaitOnFlagUntilTimeout>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d009      	beq.n	800161e <HAL_I2C_Slave_Transmit+0x264>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001618:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e016      	b.n	800164c <HAL_I2C_Slave_Transmit+0x292>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800162c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2220      	movs	r2, #32
 8001632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	e000      	b.n	800164c <HAL_I2C_Slave_Transmit+0x292>
  }
  else
  {
    return HAL_BUSY;
 800164a:	2302      	movs	r3, #2
  }
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_I2C_Slave_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                        uint32_t Timeout)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af02      	add	r7, sp, #8
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	4613      	mov	r3, r2
 8001662:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b20      	cmp	r3, #32
 800166e:	f040 80fc 	bne.w	800186a <HAL_I2C_Slave_Receive+0x216>
  {
    if ((pData == NULL) || (Size == 0U))
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d002      	beq.n	800167e <HAL_I2C_Slave_Receive+0x2a>
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d105      	bne.n	800168a <HAL_I2C_Slave_Receive+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001684:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e0f0      	b.n	800186c <HAL_I2C_Slave_Receive+0x218>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001690:	2b01      	cmp	r3, #1
 8001692:	d101      	bne.n	8001698 <HAL_I2C_Slave_Receive+0x44>
 8001694:	2302      	movs	r3, #2
 8001696:	e0e9      	b.n	800186c <HAL_I2C_Slave_Receive+0x218>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016a0:	f7ff fb12 	bl	8000cc8 <HAL_GetTick>
 80016a4:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2222      	movs	r2, #34	@ 0x22
 80016aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2220      	movs	r2, #32
 80016b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2200      	movs	r2, #0
 80016ba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	88fa      	ldrh	r2, [r7, #6]
 80016c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize = hi2c->XferCount;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferISR   = NULL;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2200      	movs	r2, #0
 80016d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016e6:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	2200      	movs	r2, #0
 80016f0:	2108      	movs	r1, #8
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f000 fe5d 	bl	80023b2 <I2C_WaitOnFlagUntilTimeout>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d009      	beq.n	8001712 <HAL_I2C_Slave_Receive+0xbe>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800170c:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e0ac      	b.n	800186c <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2208      	movs	r2, #8
 8001718:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	2201      	movs	r2, #1
 8001722:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	f000 fe43 	bl	80023b2 <I2C_WaitOnFlagUntilTimeout>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d054      	beq.n	80017dc <HAL_I2C_Slave_Receive+0x188>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001740:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e092      	b.n	800186c <HAL_I2C_Slave_Receive+0x218>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	6839      	ldr	r1, [r7, #0]
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f000 ff14 	bl	8002578 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d029      	beq.n	80017aa <HAL_I2C_Slave_Receive+0x156>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001764:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b04      	cmp	r3, #4
 8001772:	d118      	bne.n	80017a6 <HAL_I2C_Slave_Receive+0x152>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	625a      	str	r2, [r3, #36]	@ 0x24

          hi2c->XferCount--;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001790:	b29b      	uxth	r3, r3
 8001792:	3b01      	subs	r3, #1
 8001794:	b29a      	uxth	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	855a      	strh	r2, [r3, #42]	@ 0x2a
          hi2c->XferSize--;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800179e:	3b01      	subs	r3, #1
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        }

        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e060      	b.n	800186c <HAL_I2C_Slave_Receive+0x218>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b4:	b2d2      	uxtb	r2, r2
 80017b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017bc:	1c5a      	adds	r2, r3, #1
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	3b01      	subs	r3, #1
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017d4:	3b01      	subs	r3, #1
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	851a      	strh	r2, [r3, #40]	@ 0x28
    while (hi2c->XferCount > 0U)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1af      	bne.n	8001746 <HAL_I2C_Slave_Receive+0xf2>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	6839      	ldr	r1, [r7, #0]
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f000 fe81 	bl	80024f2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d009      	beq.n	800180a <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001804:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e030      	b.n	800186c <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2220      	movs	r2, #32
 8001810:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2201      	movs	r2, #1
 800181a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f000 fdc7 	bl	80023b2 <I2C_WaitOnFlagUntilTimeout>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d009      	beq.n	800183e <HAL_I2C_Slave_Receive+0x1ea>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001838:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e016      	b.n	800186c <HAL_I2C_Slave_Receive+0x218>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800184c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2220      	movs	r2, #32
 8001852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001866:	2300      	movs	r3, #0
 8001868:	e000      	b.n	800186c <HAL_I2C_Slave_Receive+0x218>
  }
  else
  {
    return HAL_BUSY;
 800186a:	2302      	movs	r3, #2
  }
}
 800186c:	4618      	mov	r0, r3
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001898:	68ba      	ldr	r2, [r7, #8]
 800189a:	68f9      	ldr	r1, [r7, #12]
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	4798      	blx	r3
  }
}
 80018a0:	bf00      	nop
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00f      	beq.n	80018ea <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00a      	beq.n	80018ea <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d8:	f043 0201 	orr.w	r2, r3, #1
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018e8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00f      	beq.n	8001914 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00a      	beq.n	8001914 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001902:	f043 0208 	orr.w	r2, r3, #8
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001912:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00f      	beq.n	800193e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00a      	beq.n	800193e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192c:	f043 0202 	orr.w	r2, r3, #2
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800193c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001942:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 030b 	and.w	r3, r3, #11
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800194e:	68f9      	ldr	r1, [r7, #12]
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 fbd5 	bl	8002100 <I2C_ITError>
  }
}
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	460b      	mov	r3, r1
 8001990:	70fb      	strb	r3, [r7, #3]
 8001992:	4613      	mov	r3, r2
 8001994:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b086      	sub	sp, #24
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	60f8      	str	r0, [r7, #12]
 80019e6:	60b9      	str	r1, [r7, #8]
 80019e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d101      	bne.n	8001a02 <I2C_Slave_ISR_IT+0x24>
 80019fe:	2302      	movs	r3, #2
 8001a00:	e0e2      	b.n	8001bc8 <I2C_Slave_ISR_IT+0x1ea>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	f003 0320 	and.w	r3, r3, #32
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d009      	beq.n	8001a28 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d004      	beq.n	8001a28 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001a1e:	6939      	ldr	r1, [r7, #16]
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f000 f9b5 	bl	8001d90 <I2C_ITSlaveCplt>
 8001a26:	e0ca      	b.n	8001bbe <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	f003 0310 	and.w	r3, r3, #16
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d04b      	beq.n	8001aca <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d046      	beq.n	8001aca <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d128      	bne.n	8001a98 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b28      	cmp	r3, #40	@ 0x28
 8001a50:	d108      	bne.n	8001a64 <I2C_Slave_ISR_IT+0x86>
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001a58:	d104      	bne.n	8001a64 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001a5a:	6939      	ldr	r1, [r7, #16]
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f000 fafb 	bl	8002058 <I2C_ITListenCplt>
 8001a62:	e031      	b.n	8001ac8 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b29      	cmp	r3, #41	@ 0x29
 8001a6e:	d10e      	bne.n	8001a8e <I2C_Slave_ISR_IT+0xb0>
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001a76:	d00a      	beq.n	8001a8e <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2210      	movs	r2, #16
 8001a7e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f000 fc54 	bl	800232e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 f926 	bl	8001cd8 <I2C_ITSlaveSeqCplt>
 8001a8c:	e01c      	b.n	8001ac8 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2210      	movs	r2, #16
 8001a94:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001a96:	e08f      	b.n	8001bb8 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2210      	movs	r2, #16
 8001a9e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa4:	f043 0204 	orr.w	r2, r3, #4
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <I2C_Slave_ISR_IT+0xdc>
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ab8:	d17e      	bne.n	8001bb8 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abe:	4619      	mov	r1, r3
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 fb1d 	bl	8002100 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001ac6:	e077      	b.n	8001bb8 <I2C_Slave_ISR_IT+0x1da>
 8001ac8:	e076      	b.n	8001bb8 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d02f      	beq.n	8001b34 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d02a      	beq.n	8001b34 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d018      	beq.n	8001b1a <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b04:	3b01      	subs	r3, #1
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	3b01      	subs	r3, #1
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d14b      	bne.n	8001bbc <I2C_Slave_ISR_IT+0x1de>
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001b2a:	d047      	beq.n	8001bbc <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f000 f8d3 	bl	8001cd8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001b32:	e043      	b.n	8001bbc <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d009      	beq.n	8001b52 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d004      	beq.n	8001b52 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001b48:	6939      	ldr	r1, [r7, #16]
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 f840 	bl	8001bd0 <I2C_ITAddrCplt>
 8001b50:	e035      	b.n	8001bbe <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d030      	beq.n	8001bbe <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d02b      	beq.n	8001bbe <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d018      	beq.n	8001ba2 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b74:	781a      	ldrb	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001ba0:	e00d      	b.n	8001bbe <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ba8:	d002      	beq.n	8001bb0 <I2C_Slave_ISR_IT+0x1d2>
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d106      	bne.n	8001bbe <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f000 f891 	bl	8001cd8 <I2C_ITSlaveSeqCplt>
 8001bb6:	e002      	b.n	8001bbe <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8001bb8:	bf00      	nop
 8001bba:	e000      	b.n	8001bbe <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8001bbc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001be6:	2b28      	cmp	r3, #40	@ 0x28
 8001be8:	d16a      	bne.n	8001cc0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	0c1b      	lsrs	r3, r3, #16
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	0c1b      	lsrs	r3, r3, #16
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001c08:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c16:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001c24:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d138      	bne.n	8001ca0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001c2e:	897b      	ldrh	r3, [r7, #10]
 8001c30:	09db      	lsrs	r3, r3, #7
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	89bb      	ldrh	r3, [r7, #12]
 8001c36:	4053      	eors	r3, r2
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	f003 0306 	and.w	r3, r3, #6
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d11c      	bne.n	8001c7c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001c42:	897b      	ldrh	r3, [r7, #10]
 8001c44:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d13b      	bne.n	8001cd0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2208      	movs	r2, #8
 8001c64:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001c6e:	89ba      	ldrh	r2, [r7, #12]
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	4619      	mov	r1, r3
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff fe86 	bl	8001986 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001c7a:	e029      	b.n	8001cd0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001c7c:	893b      	ldrh	r3, [r7, #8]
 8001c7e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001c80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 fde3 	bl	8002850 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001c92:	89ba      	ldrh	r2, [r7, #12]
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	4619      	mov	r1, r3
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff fe74 	bl	8001986 <HAL_I2C_AddrCallback>
}
 8001c9e:	e017      	b.n	8001cd0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001ca0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 fdd3 	bl	8002850 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001cb2:	89ba      	ldrh	r2, [r7, #12]
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff fe64 	bl	8001986 <HAL_I2C_AddrCallback>
}
 8001cbe:	e007      	b.n	8001cd0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2208      	movs	r2, #8
 8001cc6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8001cd0:	bf00      	nop
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d008      	beq.n	8001d0c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	e00c      	b.n	8001d26 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d007      	beq.n	8001d26 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d24:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b29      	cmp	r3, #41	@ 0x29
 8001d30:	d112      	bne.n	8001d58 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2228      	movs	r2, #40	@ 0x28
 8001d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2221      	movs	r2, #33	@ 0x21
 8001d3e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001d40:	2101      	movs	r1, #1
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 fd84 	bl	8002850 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff fe04 	bl	800195e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001d56:	e017      	b.n	8001d88 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d62:	d111      	bne.n	8001d88 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2228      	movs	r2, #40	@ 0x28
 8001d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2222      	movs	r2, #34	@ 0x22
 8001d70:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001d72:	2102      	movs	r1, #2
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 fd6b 	bl	8002850 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff fdf5 	bl	8001972 <HAL_I2C_SlaveRxCpltCallback>
}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001daa:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001db2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2220      	movs	r2, #32
 8001dba:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001dbc:	7afb      	ldrb	r3, [r7, #11]
 8001dbe:	2b21      	cmp	r3, #33	@ 0x21
 8001dc0:	d002      	beq.n	8001dc8 <I2C_ITSlaveCplt+0x38>
 8001dc2:	7afb      	ldrb	r3, [r7, #11]
 8001dc4:	2b29      	cmp	r3, #41	@ 0x29
 8001dc6:	d108      	bne.n	8001dda <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001dc8:	f248 0101 	movw	r1, #32769	@ 0x8001
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 fd3f 	bl	8002850 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2221      	movs	r2, #33	@ 0x21
 8001dd6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001dd8:	e019      	b.n	8001e0e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001dda:	7afb      	ldrb	r3, [r7, #11]
 8001ddc:	2b22      	cmp	r3, #34	@ 0x22
 8001dde:	d002      	beq.n	8001de6 <I2C_ITSlaveCplt+0x56>
 8001de0:	7afb      	ldrb	r3, [r7, #11]
 8001de2:	2b2a      	cmp	r3, #42	@ 0x2a
 8001de4:	d108      	bne.n	8001df8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001de6:	f248 0102 	movw	r1, #32770	@ 0x8002
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 fd30 	bl	8002850 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2222      	movs	r2, #34	@ 0x22
 8001df4:	631a      	str	r2, [r3, #48]	@ 0x30
 8001df6:	e00a      	b.n	8001e0e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8001df8:	7afb      	ldrb	r3, [r7, #11]
 8001dfa:	2b28      	cmp	r3, #40	@ 0x28
 8001dfc:	d107      	bne.n	8001e0e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001dfe:	f248 0103 	movw	r1, #32771	@ 0x8003
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 fd24 	bl	8002850 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e1c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6859      	ldr	r1, [r3, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b89      	ldr	r3, [pc, #548]	@ (8002050 <I2C_ITSlaveCplt+0x2c0>)
 8001e2a:	400b      	ands	r3, r1
 8001e2c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 fa7d 	bl	800232e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d013      	beq.n	8001e66 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001e4c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d01f      	beq.n	8001e96 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e64:	e017      	b.n	8001e96 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d012      	beq.n	8001e96 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e7e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d006      	beq.n	8001e96 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d020      	beq.n	8001ee2 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	f023 0304 	bic.w	r3, r3, #4
 8001ea6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00c      	beq.n	8001ee2 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	3b01      	subs	r3, #1
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef0:	f043 0204 	orr.w	r2, r3, #4
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f003 0310 	and.w	r3, r3, #16
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d049      	beq.n	8001f96 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d044      	beq.n	8001f96 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d128      	bne.n	8001f68 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b28      	cmp	r3, #40	@ 0x28
 8001f20:	d108      	bne.n	8001f34 <I2C_ITSlaveCplt+0x1a4>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f28:	d104      	bne.n	8001f34 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001f2a:	6979      	ldr	r1, [r7, #20]
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f893 	bl	8002058 <I2C_ITListenCplt>
 8001f32:	e030      	b.n	8001f96 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b29      	cmp	r3, #41	@ 0x29
 8001f3e:	d10e      	bne.n	8001f5e <I2C_ITSlaveCplt+0x1ce>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f46:	d00a      	beq.n	8001f5e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2210      	movs	r2, #16
 8001f4e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f9ec 	bl	800232e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff febe 	bl	8001cd8 <I2C_ITSlaveSeqCplt>
 8001f5c:	e01b      	b.n	8001f96 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2210      	movs	r2, #16
 8001f64:	61da      	str	r2, [r3, #28]
 8001f66:	e016      	b.n	8001f96 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2210      	movs	r2, #16
 8001f6e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f74:	f043 0204 	orr.w	r2, r3, #4
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <I2C_ITSlaveCplt+0x1fa>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f88:	d105      	bne.n	8001f96 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8e:	4619      	mov	r1, r3
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f8b5 	bl	8002100 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d010      	beq.n	8001fce <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f8a4 	bl	8002100 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b28      	cmp	r3, #40	@ 0x28
 8001fc2:	d141      	bne.n	8002048 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001fc4:	6979      	ldr	r1, [r7, #20]
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f846 	bl	8002058 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001fcc:	e03c      	b.n	8002048 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001fd6:	d014      	beq.n	8002002 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff fe7d 	bl	8001cd8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a1c      	ldr	r2, [pc, #112]	@ (8002054 <I2C_ITSlaveCplt+0x2c4>)
 8001fe2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff fcd1 	bl	80019a2 <HAL_I2C_ListenCpltCallback>
}
 8002000:	e022      	b.n	8002048 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b22      	cmp	r3, #34	@ 0x22
 800200c:	d10e      	bne.n	800202c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2220      	movs	r2, #32
 8002012:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff fca4 	bl	8001972 <HAL_I2C_SlaveRxCpltCallback>
}
 800202a:	e00d      	b.n	8002048 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2220      	movs	r2, #32
 8002030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff fc8b 	bl	800195e <HAL_I2C_SlaveTxCpltCallback>
}
 8002048:	bf00      	nop
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	fe00e800 	.word	0xfe00e800
 8002054:	ffff0000 	.word	0xffff0000

08002058 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a25      	ldr	r2, [pc, #148]	@ (80020fc <I2C_ITListenCplt+0xa4>)
 8002066:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2220      	movs	r2, #32
 8002072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	2b00      	cmp	r3, #0
 800208c:	d022      	beq.n	80020d4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a0:	1c5a      	adds	r2, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d012      	beq.n	80020d4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b2:	3b01      	subs	r3, #1
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020be:	b29b      	uxth	r3, r3
 80020c0:	3b01      	subs	r3, #1
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020cc:	f043 0204 	orr.w	r2, r3, #4
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80020d4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 fbb9 	bl	8002850 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2210      	movs	r2, #16
 80020e4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff fc57 	bl	80019a2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	ffff0000 	.word	0xffff0000

08002100 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002110:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a6d      	ldr	r2, [pc, #436]	@ (80022d4 <I2C_ITError+0x1d4>)
 800211e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002132:	7bfb      	ldrb	r3, [r7, #15]
 8002134:	2b28      	cmp	r3, #40	@ 0x28
 8002136:	d005      	beq.n	8002144 <I2C_ITError+0x44>
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	2b29      	cmp	r3, #41	@ 0x29
 800213c:	d002      	beq.n	8002144 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	2b2a      	cmp	r3, #42	@ 0x2a
 8002142:	d10b      	bne.n	800215c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002144:	2103      	movs	r1, #3
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 fb82 	bl	8002850 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2228      	movs	r2, #40	@ 0x28
 8002150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a60      	ldr	r2, [pc, #384]	@ (80022d8 <I2C_ITError+0x1d8>)
 8002158:	635a      	str	r2, [r3, #52]	@ 0x34
 800215a:	e030      	b.n	80021be <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800215c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 fb75 	bl	8002850 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f8e1 	bl	800232e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b60      	cmp	r3, #96	@ 0x60
 8002176:	d01f      	beq.n	80021b8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2220      	movs	r2, #32
 800217c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	f003 0320 	and.w	r3, r3, #32
 800218a:	2b20      	cmp	r3, #32
 800218c:	d114      	bne.n	80021b8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f003 0310 	and.w	r3, r3, #16
 8002198:	2b10      	cmp	r3, #16
 800219a:	d109      	bne.n	80021b0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2210      	movs	r2, #16
 80021a2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a8:	f043 0204 	orr.w	r2, r3, #4
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2220      	movs	r2, #32
 80021b6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d039      	beq.n	8002240 <I2C_ITError+0x140>
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b11      	cmp	r3, #17
 80021d0:	d002      	beq.n	80021d8 <I2C_ITError+0xd8>
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2b21      	cmp	r3, #33	@ 0x21
 80021d6:	d133      	bne.n	8002240 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80021e6:	d107      	bne.n	80021f8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80021f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe fe8f 	bl	8000f20 <HAL_DMA_GetState>
 8002202:	4603      	mov	r3, r0
 8002204:	2b01      	cmp	r3, #1
 8002206:	d017      	beq.n	8002238 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800220c:	4a33      	ldr	r2, [pc, #204]	@ (80022dc <I2C_ITError+0x1dc>)
 800220e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe fe41 	bl	8000ea4 <HAL_DMA_Abort_IT>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d04d      	beq.n	80022c4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800222c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002232:	4610      	mov	r0, r2
 8002234:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002236:	e045      	b.n	80022c4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f851 	bl	80022e0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800223e:	e041      	b.n	80022c4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002244:	2b00      	cmp	r3, #0
 8002246:	d039      	beq.n	80022bc <I2C_ITError+0x1bc>
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b12      	cmp	r3, #18
 800224c:	d002      	beq.n	8002254 <I2C_ITError+0x154>
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2b22      	cmp	r3, #34	@ 0x22
 8002252:	d133      	bne.n	80022bc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800225e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002262:	d107      	bne.n	8002274 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002272:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe fe51 	bl	8000f20 <HAL_DMA_GetState>
 800227e:	4603      	mov	r3, r0
 8002280:	2b01      	cmp	r3, #1
 8002282:	d017      	beq.n	80022b4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002288:	4a14      	ldr	r2, [pc, #80]	@ (80022dc <I2C_ITError+0x1dc>)
 800228a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe fe03 	bl	8000ea4 <HAL_DMA_Abort_IT>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d011      	beq.n	80022c8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80022ae:	4610      	mov	r0, r2
 80022b0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80022b2:	e009      	b.n	80022c8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f813 	bl	80022e0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80022ba:	e005      	b.n	80022c8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f80f 	bl	80022e0 <I2C_TreatErrorCallback>
  }
}
 80022c2:	e002      	b.n	80022ca <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80022c4:	bf00      	nop
 80022c6:	e000      	b.n	80022ca <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80022c8:	bf00      	nop
}
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	ffff0000 	.word	0xffff0000
 80022d8:	080019df 	.word	0x080019df
 80022dc:	08002377 	.word	0x08002377

080022e0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b60      	cmp	r3, #96	@ 0x60
 80022f2:	d10e      	bne.n	8002312 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2220      	movs	r2, #32
 80022f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff fb5d 	bl	80019ca <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002310:	e009      	b.n	8002326 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff fb48 	bl	80019b6 <HAL_I2C_ErrorCallback>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b02      	cmp	r3, #2
 8002342:	d103      	bne.n	800234c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2200      	movs	r2, #0
 800234a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b01      	cmp	r3, #1
 8002358:	d007      	beq.n	800236a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	699a      	ldr	r2, [r3, #24]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f042 0201 	orr.w	r2, r2, #1
 8002368:	619a      	str	r2, [r3, #24]
  }
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b084      	sub	sp, #16
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002382:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002390:	2200      	movs	r2, #0
 8002392:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a0:	2200      	movs	r2, #0
 80023a2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f7ff ff9b 	bl	80022e0 <I2C_TreatErrorCallback>
}
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b084      	sub	sp, #16
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	603b      	str	r3, [r7, #0]
 80023be:	4613      	mov	r3, r2
 80023c0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023c2:	e03b      	b.n	800243c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	6839      	ldr	r1, [r7, #0]
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 f961 	bl	8002690 <I2C_IsErrorOccurred>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e041      	b.n	800245c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023de:	d02d      	beq.n	800243c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e0:	f7fe fc72 	bl	8000cc8 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d302      	bcc.n	80023f6 <I2C_WaitOnFlagUntilTimeout+0x44>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d122      	bne.n	800243c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	699a      	ldr	r2, [r3, #24]
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	4013      	ands	r3, r2
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	429a      	cmp	r2, r3
 8002404:	bf0c      	ite	eq
 8002406:	2301      	moveq	r3, #1
 8002408:	2300      	movne	r3, #0
 800240a:	b2db      	uxtb	r3, r3
 800240c:	461a      	mov	r2, r3
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	429a      	cmp	r2, r3
 8002412:	d113      	bne.n	800243c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002418:	f043 0220 	orr.w	r2, r3, #32
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2220      	movs	r2, #32
 8002424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e00f      	b.n	800245c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699a      	ldr	r2, [r3, #24]
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	4013      	ands	r3, r2
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	429a      	cmp	r2, r3
 800244a:	bf0c      	ite	eq
 800244c:	2301      	moveq	r3, #1
 800244e:	2300      	movne	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	461a      	mov	r2, r3
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	429a      	cmp	r2, r3
 8002458:	d0b4      	beq.n	80023c4 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002470:	e033      	b.n	80024da <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68b9      	ldr	r1, [r7, #8]
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f90a 	bl	8002690 <I2C_IsErrorOccurred>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e031      	b.n	80024ea <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248c:	d025      	beq.n	80024da <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800248e:	f7fe fc1b 	bl	8000cc8 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	429a      	cmp	r2, r3
 800249c:	d302      	bcc.n	80024a4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d11a      	bne.n	80024da <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d013      	beq.n	80024da <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b6:	f043 0220 	orr.w	r2, r3, #32
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2220      	movs	r2, #32
 80024c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e007      	b.n	80024ea <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d1c4      	bne.n	8002472 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b084      	sub	sp, #16
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024fe:	e02f      	b.n	8002560 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	68b9      	ldr	r1, [r7, #8]
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 f8c3 	bl	8002690 <I2C_IsErrorOccurred>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e02d      	b.n	8002570 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002514:	f7fe fbd8 	bl	8000cc8 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	429a      	cmp	r2, r3
 8002522:	d302      	bcc.n	800252a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d11a      	bne.n	8002560 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	f003 0320 	and.w	r3, r3, #32
 8002534:	2b20      	cmp	r3, #32
 8002536:	d013      	beq.n	8002560 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253c:	f043 0220 	orr.w	r2, r3, #32
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2220      	movs	r2, #32
 8002548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e007      	b.n	8002570 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f003 0320 	and.w	r3, r3, #32
 800256a:	2b20      	cmp	r3, #32
 800256c:	d1c8      	bne.n	8002500 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002584:	2300      	movs	r3, #0
 8002586:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002588:	e071      	b.n	800266e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 f87e 	bl	8002690 <I2C_IsErrorOccurred>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	f003 0320 	and.w	r3, r3, #32
 80025a8:	2b20      	cmp	r3, #32
 80025aa:	d13b      	bne.n	8002624 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80025ac:	7dfb      	ldrb	r3, [r7, #23]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d138      	bne.n	8002624 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d105      	bne.n	80025cc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	2b10      	cmp	r3, #16
 80025d8:	d121      	bne.n	800261e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2210      	movs	r2, #16
 80025e0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2204      	movs	r2, #4
 80025e6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2220      	movs	r2, #32
 80025ee:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6859      	ldr	r1, [r3, #4]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	4b24      	ldr	r3, [pc, #144]	@ (800268c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80025fc:	400b      	ands	r3, r1
 80025fe:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2220      	movs	r2, #32
 8002604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	75fb      	strb	r3, [r7, #23]
 800261c:	e002      	b.n	8002624 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002624:	f7fe fb50 	bl	8000cc8 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	429a      	cmp	r2, r3
 8002632:	d302      	bcc.n	800263a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d119      	bne.n	800266e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800263a:	7dfb      	ldrb	r3, [r7, #23]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d116      	bne.n	800266e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	f003 0304 	and.w	r3, r3, #4
 800264a:	2b04      	cmp	r3, #4
 800264c:	d00f      	beq.n	800266e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002652:	f043 0220 	orr.w	r2, r3, #32
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2220      	movs	r2, #32
 800265e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b04      	cmp	r3, #4
 800267a:	d002      	beq.n	8002682 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800267c:	7dfb      	ldrb	r3, [r7, #23]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d083      	beq.n	800258a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002682:	7dfb      	ldrb	r3, [r7, #23]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	fe00e800 	.word	0xfe00e800

08002690 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	@ 0x28
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	f003 0310 	and.w	r3, r3, #16
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d068      	beq.n	800278e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2210      	movs	r2, #16
 80026c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026c4:	e049      	b.n	800275a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026cc:	d045      	beq.n	800275a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026ce:	f7fe fafb 	bl	8000cc8 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d302      	bcc.n	80026e4 <I2C_IsErrorOccurred+0x54>
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d13a      	bne.n	800275a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002702:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002706:	d121      	bne.n	800274c <I2C_IsErrorOccurred+0xbc>
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800270e:	d01d      	beq.n	800274c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002710:	7cfb      	ldrb	r3, [r7, #19]
 8002712:	2b20      	cmp	r3, #32
 8002714:	d01a      	beq.n	800274c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002724:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002726:	f7fe facf 	bl	8000cc8 <HAL_GetTick>
 800272a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800272c:	e00e      	b.n	800274c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800272e:	f7fe facb 	bl	8000cc8 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b19      	cmp	r3, #25
 800273a:	d907      	bls.n	800274c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	f043 0320 	orr.w	r3, r3, #32
 8002742:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800274a:	e006      	b.n	800275a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	f003 0320 	and.w	r3, r3, #32
 8002756:	2b20      	cmp	r3, #32
 8002758:	d1e9      	bne.n	800272e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	f003 0320 	and.w	r3, r3, #32
 8002764:	2b20      	cmp	r3, #32
 8002766:	d003      	beq.n	8002770 <I2C_IsErrorOccurred+0xe0>
 8002768:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0aa      	beq.n	80026c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002770:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002774:	2b00      	cmp	r3, #0
 8002776:	d103      	bne.n	8002780 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2220      	movs	r2, #32
 800277e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	f043 0304 	orr.w	r3, r3, #4
 8002786:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00b      	beq.n	80027b8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00b      	beq.n	80027da <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	f043 0308 	orr.w	r3, r3, #8
 80027c8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00b      	beq.n	80027fc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	f043 0302 	orr.w	r3, r3, #2
 80027ea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80027fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002800:	2b00      	cmp	r3, #0
 8002802:	d01c      	beq.n	800283e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f7ff fd92 	bl	800232e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6859      	ldr	r1, [r3, #4]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b0d      	ldr	r3, [pc, #52]	@ (800284c <I2C_IsErrorOccurred+0x1bc>)
 8002816:	400b      	ands	r3, r1
 8002818:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	431a      	orrs	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2220      	movs	r2, #32
 800282a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800283e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002842:	4618      	mov	r0, r3
 8002844:	3728      	adds	r7, #40	@ 0x28
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	fe00e800 	.word	0xfe00e800

08002850 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002860:	887b      	ldrh	r3, [r7, #2]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00f      	beq.n	800288a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8002870:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002878:	b2db      	uxtb	r3, r3
 800287a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800287e:	2b28      	cmp	r3, #40	@ 0x28
 8002880:	d003      	beq.n	800288a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002888:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800288a:	887b      	ldrh	r3, [r7, #2]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00f      	beq.n	80028b4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800289a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80028a8:	2b28      	cmp	r3, #40	@ 0x28
 80028aa:	d003      	beq.n	80028b4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80028b2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80028b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	da03      	bge.n	80028c4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80028c2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80028c4:	887b      	ldrh	r3, [r7, #2]
 80028c6:	2b10      	cmp	r3, #16
 80028c8:	d103      	bne.n	80028d2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80028d0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80028d2:	887b      	ldrh	r3, [r7, #2]
 80028d4:	2b20      	cmp	r3, #32
 80028d6:	d103      	bne.n	80028e0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f043 0320 	orr.w	r3, r3, #32
 80028de:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80028e0:	887b      	ldrh	r3, [r7, #2]
 80028e2:	2b40      	cmp	r3, #64	@ 0x40
 80028e4:	d103      	bne.n	80028ee <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028ec:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6819      	ldr	r1, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	43da      	mvns	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	400a      	ands	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b20      	cmp	r3, #32
 8002920:	d138      	bne.n	8002994 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800292c:	2302      	movs	r3, #2
 800292e:	e032      	b.n	8002996 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2224      	movs	r2, #36	@ 0x24
 800293c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0201 	bic.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800295e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6819      	ldr	r1, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0201 	orr.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	e000      	b.n	8002996 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002994:	2302      	movs	r3, #2
  }
}
 8002996:	4618      	mov	r0, r3
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b085      	sub	sp, #20
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b20      	cmp	r3, #32
 80029b6:	d139      	bne.n	8002a2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e033      	b.n	8002a2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2224      	movs	r2, #36	@ 0x24
 80029d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0201 	bic.w	r2, r2, #1
 80029e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80029f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	021b      	lsls	r3, r3, #8
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0201 	orr.w	r2, r2, #1
 8002a16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	e000      	b.n	8002a2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a2c:	2302      	movs	r3, #2
  }
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3714      	adds	r7, #20
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
	...

08002a3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a4c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d102      	bne.n	8002a62 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	f001 b823 	b.w	8003aa8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 817d 	beq.w	8002d72 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a78:	4bbc      	ldr	r3, [pc, #752]	@ (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 030c 	and.w	r3, r3, #12
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d00c      	beq.n	8002a9e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a84:	4bb9      	ldr	r3, [pc, #740]	@ (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 030c 	and.w	r3, r3, #12
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d15c      	bne.n	8002b4a <HAL_RCC_OscConfig+0x10e>
 8002a90:	4bb6      	ldr	r3, [pc, #728]	@ (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a9c:	d155      	bne.n	8002b4a <HAL_RCC_OscConfig+0x10e>
 8002a9e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002aa2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ab2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab6:	fab3 f383 	clz	r3, r3
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	095b      	lsrs	r3, r3, #5
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d102      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x94>
 8002aca:	4ba8      	ldr	r3, [pc, #672]	@ (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	e015      	b.n	8002afc <HAL_RCC_OscConfig+0xc0>
 8002ad0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ad4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002adc:	fa93 f3a3 	rbit	r3, r3
 8002ae0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002ae4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ae8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002aec:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002af0:	fa93 f3a3 	rbit	r3, r3
 8002af4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002af8:	4b9c      	ldr	r3, [pc, #624]	@ (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b00:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002b04:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002b08:	fa92 f2a2 	rbit	r2, r2
 8002b0c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002b10:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002b14:	fab2 f282 	clz	r2, r2
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	f042 0220 	orr.w	r2, r2, #32
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	f002 021f 	and.w	r2, r2, #31
 8002b24:	2101      	movs	r1, #1
 8002b26:	fa01 f202 	lsl.w	r2, r1, r2
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 811f 	beq.w	8002d70 <HAL_RCC_OscConfig+0x334>
 8002b32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f040 8116 	bne.w	8002d70 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	f000 bfaf 	b.w	8003aa8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b5a:	d106      	bne.n	8002b6a <HAL_RCC_OscConfig+0x12e>
 8002b5c:	4b83      	ldr	r3, [pc, #524]	@ (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a82      	ldr	r2, [pc, #520]	@ (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002b62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b66:	6013      	str	r3, [r2, #0]
 8002b68:	e036      	b.n	8002bd8 <HAL_RCC_OscConfig+0x19c>
 8002b6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x158>
 8002b7a:	4b7c      	ldr	r3, [pc, #496]	@ (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a7b      	ldr	r2, [pc, #492]	@ (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002b80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b84:	6013      	str	r3, [r2, #0]
 8002b86:	4b79      	ldr	r3, [pc, #484]	@ (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a78      	ldr	r2, [pc, #480]	@ (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002b8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	e021      	b.n	8002bd8 <HAL_RCC_OscConfig+0x19c>
 8002b94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ba4:	d10c      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x184>
 8002ba6:	4b71      	ldr	r3, [pc, #452]	@ (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a70      	ldr	r2, [pc, #448]	@ (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002bac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	4b6e      	ldr	r3, [pc, #440]	@ (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a6d      	ldr	r2, [pc, #436]	@ (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	e00b      	b.n	8002bd8 <HAL_RCC_OscConfig+0x19c>
 8002bc0:	4b6a      	ldr	r3, [pc, #424]	@ (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a69      	ldr	r2, [pc, #420]	@ (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bca:	6013      	str	r3, [r2, #0]
 8002bcc:	4b67      	ldr	r3, [pc, #412]	@ (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a66      	ldr	r2, [pc, #408]	@ (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002bd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bd6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bd8:	4b64      	ldr	r3, [pc, #400]	@ (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bdc:	f023 020f 	bic.w	r2, r3, #15
 8002be0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	495f      	ldr	r1, [pc, #380]	@ (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d059      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c02:	f7fe f861 	bl	8000cc8 <HAL_GetTick>
 8002c06:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0a:	e00a      	b.n	8002c22 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c0c:	f7fe f85c 	bl	8000cc8 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b64      	cmp	r3, #100	@ 0x64
 8002c1a:	d902      	bls.n	8002c22 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	f000 bf43 	b.w	8003aa8 <HAL_RCC_OscConfig+0x106c>
 8002c22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c26:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002c2e:	fa93 f3a3 	rbit	r3, r3
 8002c32:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002c36:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3a:	fab3 f383 	clz	r3, r3
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	095b      	lsrs	r3, r3, #5
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d102      	bne.n	8002c54 <HAL_RCC_OscConfig+0x218>
 8002c4e:	4b47      	ldr	r3, [pc, #284]	@ (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	e015      	b.n	8002c80 <HAL_RCC_OscConfig+0x244>
 8002c54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c58:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002c60:	fa93 f3a3 	rbit	r3, r3
 8002c64:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002c68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c6c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002c70:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002c74:	fa93 f3a3 	rbit	r3, r3
 8002c78:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002c7c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c80:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c84:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002c88:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002c8c:	fa92 f2a2 	rbit	r2, r2
 8002c90:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002c94:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002c98:	fab2 f282 	clz	r2, r2
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	f042 0220 	orr.w	r2, r2, #32
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	f002 021f 	and.w	r2, r2, #31
 8002ca8:	2101      	movs	r1, #1
 8002caa:	fa01 f202 	lsl.w	r2, r1, r2
 8002cae:	4013      	ands	r3, r2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0ab      	beq.n	8002c0c <HAL_RCC_OscConfig+0x1d0>
 8002cb4:	e05d      	b.n	8002d72 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb6:	f7fe f807 	bl	8000cc8 <HAL_GetTick>
 8002cba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cbe:	e00a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc0:	f7fe f802 	bl	8000cc8 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b64      	cmp	r3, #100	@ 0x64
 8002cce:	d902      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	f000 bee9 	b.w	8003aa8 <HAL_RCC_OscConfig+0x106c>
 8002cd6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cda:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002cea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cee:	fab3 f383 	clz	r3, r3
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	095b      	lsrs	r3, r3, #5
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d102      	bne.n	8002d08 <HAL_RCC_OscConfig+0x2cc>
 8002d02:	4b1a      	ldr	r3, [pc, #104]	@ (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	e015      	b.n	8002d34 <HAL_RCC_OscConfig+0x2f8>
 8002d08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d0c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d10:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002d14:	fa93 f3a3 	rbit	r3, r3
 8002d18:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002d1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d20:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002d24:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002d28:	fa93 f3a3 	rbit	r3, r3
 8002d2c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002d30:	4b0e      	ldr	r3, [pc, #56]	@ (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d34:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d38:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002d3c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002d40:	fa92 f2a2 	rbit	r2, r2
 8002d44:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002d48:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002d4c:	fab2 f282 	clz	r2, r2
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	f042 0220 	orr.w	r2, r2, #32
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	f002 021f 	and.w	r2, r2, #31
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1ab      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x284>
 8002d68:	e003      	b.n	8002d72 <HAL_RCC_OscConfig+0x336>
 8002d6a:	bf00      	nop
 8002d6c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 817d 	beq.w	8003082 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d88:	4ba6      	ldr	r3, [pc, #664]	@ (8003024 <HAL_RCC_OscConfig+0x5e8>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 030c 	and.w	r3, r3, #12
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00b      	beq.n	8002dac <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d94:	4ba3      	ldr	r3, [pc, #652]	@ (8003024 <HAL_RCC_OscConfig+0x5e8>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f003 030c 	and.w	r3, r3, #12
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d172      	bne.n	8002e86 <HAL_RCC_OscConfig+0x44a>
 8002da0:	4ba0      	ldr	r3, [pc, #640]	@ (8003024 <HAL_RCC_OscConfig+0x5e8>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d16c      	bne.n	8002e86 <HAL_RCC_OscConfig+0x44a>
 8002dac:	2302      	movs	r3, #2
 8002dae:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002db6:	fa93 f3a3 	rbit	r3, r3
 8002dba:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002dbe:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc2:	fab3 f383 	clz	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	095b      	lsrs	r3, r3, #5
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d102      	bne.n	8002ddc <HAL_RCC_OscConfig+0x3a0>
 8002dd6:	4b93      	ldr	r3, [pc, #588]	@ (8003024 <HAL_RCC_OscConfig+0x5e8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	e013      	b.n	8002e04 <HAL_RCC_OscConfig+0x3c8>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002de6:	fa93 f3a3 	rbit	r3, r3
 8002dea:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002dee:	2302      	movs	r3, #2
 8002df0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002df4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002df8:	fa93 f3a3 	rbit	r3, r3
 8002dfc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002e00:	4b88      	ldr	r3, [pc, #544]	@ (8003024 <HAL_RCC_OscConfig+0x5e8>)
 8002e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e04:	2202      	movs	r2, #2
 8002e06:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002e0a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002e0e:	fa92 f2a2 	rbit	r2, r2
 8002e12:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002e16:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002e1a:	fab2 f282 	clz	r2, r2
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	f042 0220 	orr.w	r2, r2, #32
 8002e24:	b2d2      	uxtb	r2, r2
 8002e26:	f002 021f 	and.w	r2, r2, #31
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e30:	4013      	ands	r3, r2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <HAL_RCC_OscConfig+0x410>
 8002e36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d002      	beq.n	8002e4c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	f000 be2e 	b.w	8003aa8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4c:	4b75      	ldr	r3, [pc, #468]	@ (8003024 <HAL_RCC_OscConfig+0x5e8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	21f8      	movs	r1, #248	@ 0xf8
 8002e62:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002e6a:	fa91 f1a1 	rbit	r1, r1
 8002e6e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002e72:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002e76:	fab1 f181 	clz	r1, r1
 8002e7a:	b2c9      	uxtb	r1, r1
 8002e7c:	408b      	lsls	r3, r1
 8002e7e:	4969      	ldr	r1, [pc, #420]	@ (8003024 <HAL_RCC_OscConfig+0x5e8>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e84:	e0fd      	b.n	8003082 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 8088 	beq.w	8002fa8 <HAL_RCC_OscConfig+0x56c>
 8002e98:	2301      	movs	r3, #1
 8002e9a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002eaa:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eae:	fab3 f383 	clz	r3, r3
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002eb8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7fd ff00 	bl	8000cc8 <HAL_GetTick>
 8002ec8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ecc:	e00a      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ece:	f7fd fefb 	bl	8000cc8 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d902      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	f000 bde2 	b.w	8003aa8 <HAL_RCC_OscConfig+0x106c>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002eee:	fa93 f3a3 	rbit	r3, r3
 8002ef2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002ef6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efa:	fab3 f383 	clz	r3, r3
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	095b      	lsrs	r3, r3, #5
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d102      	bne.n	8002f14 <HAL_RCC_OscConfig+0x4d8>
 8002f0e:	4b45      	ldr	r3, [pc, #276]	@ (8003024 <HAL_RCC_OscConfig+0x5e8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	e013      	b.n	8002f3c <HAL_RCC_OscConfig+0x500>
 8002f14:	2302      	movs	r3, #2
 8002f16:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002f1e:	fa93 f3a3 	rbit	r3, r3
 8002f22:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002f26:	2302      	movs	r3, #2
 8002f28:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002f2c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002f30:	fa93 f3a3 	rbit	r3, r3
 8002f34:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002f38:	4b3a      	ldr	r3, [pc, #232]	@ (8003024 <HAL_RCC_OscConfig+0x5e8>)
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002f42:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002f46:	fa92 f2a2 	rbit	r2, r2
 8002f4a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002f4e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002f52:	fab2 f282 	clz	r2, r2
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	f042 0220 	orr.w	r2, r2, #32
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	f002 021f 	and.w	r2, r2, #31
 8002f62:	2101      	movs	r1, #1
 8002f64:	fa01 f202 	lsl.w	r2, r1, r2
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0af      	beq.n	8002ece <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6e:	4b2d      	ldr	r3, [pc, #180]	@ (8003024 <HAL_RCC_OscConfig+0x5e8>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	21f8      	movs	r1, #248	@ 0xf8
 8002f84:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f88:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002f8c:	fa91 f1a1 	rbit	r1, r1
 8002f90:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002f94:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002f98:	fab1 f181 	clz	r1, r1
 8002f9c:	b2c9      	uxtb	r1, r1
 8002f9e:	408b      	lsls	r3, r1
 8002fa0:	4920      	ldr	r1, [pc, #128]	@ (8003024 <HAL_RCC_OscConfig+0x5e8>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]
 8002fa6:	e06c      	b.n	8003082 <HAL_RCC_OscConfig+0x646>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002fb2:	fa93 f3a3 	rbit	r3, r3
 8002fb6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002fba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002fc8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	461a      	mov	r2, r3
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd4:	f7fd fe78 	bl	8000cc8 <HAL_GetTick>
 8002fd8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fdc:	e00a      	b.n	8002ff4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fde:	f7fd fe73 	bl	8000cc8 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d902      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	f000 bd5a 	b.w	8003aa8 <HAL_RCC_OscConfig+0x106c>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002ffe:	fa93 f3a3 	rbit	r3, r3
 8003002:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003006:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800300a:	fab3 f383 	clz	r3, r3
 800300e:	b2db      	uxtb	r3, r3
 8003010:	095b      	lsrs	r3, r3, #5
 8003012:	b2db      	uxtb	r3, r3
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b01      	cmp	r3, #1
 800301c:	d104      	bne.n	8003028 <HAL_RCC_OscConfig+0x5ec>
 800301e:	4b01      	ldr	r3, [pc, #4]	@ (8003024 <HAL_RCC_OscConfig+0x5e8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	e015      	b.n	8003050 <HAL_RCC_OscConfig+0x614>
 8003024:	40021000 	.word	0x40021000
 8003028:	2302      	movs	r3, #2
 800302a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003032:	fa93 f3a3 	rbit	r3, r3
 8003036:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800303a:	2302      	movs	r3, #2
 800303c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003040:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003044:	fa93 f3a3 	rbit	r3, r3
 8003048:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800304c:	4bc8      	ldr	r3, [pc, #800]	@ (8003370 <HAL_RCC_OscConfig+0x934>)
 800304e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003050:	2202      	movs	r2, #2
 8003052:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003056:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800305a:	fa92 f2a2 	rbit	r2, r2
 800305e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003062:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003066:	fab2 f282 	clz	r2, r2
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	f042 0220 	orr.w	r2, r2, #32
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	f002 021f 	and.w	r2, r2, #31
 8003076:	2101      	movs	r1, #1
 8003078:	fa01 f202 	lsl.w	r2, r1, r2
 800307c:	4013      	ands	r3, r2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1ad      	bne.n	8002fde <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003082:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003086:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 8110 	beq.w	80032b8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003098:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800309c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d079      	beq.n	800319c <HAL_RCC_OscConfig+0x760>
 80030a8:	2301      	movs	r3, #1
 80030aa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80030b2:	fa93 f3a3 	rbit	r3, r3
 80030b6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80030ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030be:	fab3 f383 	clz	r3, r3
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	461a      	mov	r2, r3
 80030c6:	4bab      	ldr	r3, [pc, #684]	@ (8003374 <HAL_RCC_OscConfig+0x938>)
 80030c8:	4413      	add	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	461a      	mov	r2, r3
 80030ce:	2301      	movs	r3, #1
 80030d0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d2:	f7fd fdf9 	bl	8000cc8 <HAL_GetTick>
 80030d6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030da:	e00a      	b.n	80030f2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030dc:	f7fd fdf4 	bl	8000cc8 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d902      	bls.n	80030f2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	f000 bcdb 	b.w	8003aa8 <HAL_RCC_OscConfig+0x106c>
 80030f2:	2302      	movs	r3, #2
 80030f4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80030fc:	fa93 f3a3 	rbit	r3, r3
 8003100:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003108:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800310c:	2202      	movs	r2, #2
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003114:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	fa93 f2a3 	rbit	r2, r3
 800311e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003122:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003130:	2202      	movs	r2, #2
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003138:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	fa93 f2a3 	rbit	r2, r3
 8003142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003146:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800314a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800314c:	4b88      	ldr	r3, [pc, #544]	@ (8003370 <HAL_RCC_OscConfig+0x934>)
 800314e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003154:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003158:	2102      	movs	r1, #2
 800315a:	6019      	str	r1, [r3, #0]
 800315c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003160:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	fa93 f1a3 	rbit	r1, r3
 800316a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800316e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003172:	6019      	str	r1, [r3, #0]
  return result;
 8003174:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003178:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	fab3 f383 	clz	r3, r3
 8003182:	b2db      	uxtb	r3, r3
 8003184:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003188:	b2db      	uxtb	r3, r3
 800318a:	f003 031f 	and.w	r3, r3, #31
 800318e:	2101      	movs	r1, #1
 8003190:	fa01 f303 	lsl.w	r3, r1, r3
 8003194:	4013      	ands	r3, r2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0a0      	beq.n	80030dc <HAL_RCC_OscConfig+0x6a0>
 800319a:	e08d      	b.n	80032b8 <HAL_RCC_OscConfig+0x87c>
 800319c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80031a4:	2201      	movs	r2, #1
 80031a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ac:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	fa93 f2a3 	rbit	r2, r3
 80031b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ba:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80031be:	601a      	str	r2, [r3, #0]
  return result;
 80031c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80031c8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ca:	fab3 f383 	clz	r3, r3
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	461a      	mov	r2, r3
 80031d2:	4b68      	ldr	r3, [pc, #416]	@ (8003374 <HAL_RCC_OscConfig+0x938>)
 80031d4:	4413      	add	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	461a      	mov	r2, r3
 80031da:	2300      	movs	r3, #0
 80031dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031de:	f7fd fd73 	bl	8000cc8 <HAL_GetTick>
 80031e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e6:	e00a      	b.n	80031fe <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031e8:	f7fd fd6e 	bl	8000cc8 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d902      	bls.n	80031fe <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	f000 bc55 	b.w	8003aa8 <HAL_RCC_OscConfig+0x106c>
 80031fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003202:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003206:	2202      	movs	r2, #2
 8003208:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	fa93 f2a3 	rbit	r2, r3
 8003218:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800321c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003226:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800322a:	2202      	movs	r2, #2
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003232:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	fa93 f2a3 	rbit	r2, r3
 800323c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003240:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800324a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800324e:	2202      	movs	r2, #2
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003256:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	fa93 f2a3 	rbit	r2, r3
 8003260:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003264:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003268:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800326a:	4b41      	ldr	r3, [pc, #260]	@ (8003370 <HAL_RCC_OscConfig+0x934>)
 800326c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800326e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003272:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003276:	2102      	movs	r1, #2
 8003278:	6019      	str	r1, [r3, #0]
 800327a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800327e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	fa93 f1a3 	rbit	r1, r3
 8003288:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800328c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003290:	6019      	str	r1, [r3, #0]
  return result;
 8003292:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003296:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	fab3 f383 	clz	r3, r3
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	f003 031f 	and.w	r3, r3, #31
 80032ac:	2101      	movs	r1, #1
 80032ae:	fa01 f303 	lsl.w	r3, r1, r3
 80032b2:	4013      	ands	r3, r2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d197      	bne.n	80031e8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 81a1 	beq.w	8003610 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ce:	2300      	movs	r3, #0
 80032d0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032d4:	4b26      	ldr	r3, [pc, #152]	@ (8003370 <HAL_RCC_OscConfig+0x934>)
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d116      	bne.n	800330e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e0:	4b23      	ldr	r3, [pc, #140]	@ (8003370 <HAL_RCC_OscConfig+0x934>)
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	4a22      	ldr	r2, [pc, #136]	@ (8003370 <HAL_RCC_OscConfig+0x934>)
 80032e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032ea:	61d3      	str	r3, [r2, #28]
 80032ec:	4b20      	ldr	r3, [pc, #128]	@ (8003370 <HAL_RCC_OscConfig+0x934>)
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80032f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003302:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003306:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003308:	2301      	movs	r3, #1
 800330a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330e:	4b1a      	ldr	r3, [pc, #104]	@ (8003378 <HAL_RCC_OscConfig+0x93c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003316:	2b00      	cmp	r3, #0
 8003318:	d11a      	bne.n	8003350 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800331a:	4b17      	ldr	r3, [pc, #92]	@ (8003378 <HAL_RCC_OscConfig+0x93c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a16      	ldr	r2, [pc, #88]	@ (8003378 <HAL_RCC_OscConfig+0x93c>)
 8003320:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003324:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003326:	f7fd fccf 	bl	8000cc8 <HAL_GetTick>
 800332a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332e:	e009      	b.n	8003344 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003330:	f7fd fcca 	bl	8000cc8 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b64      	cmp	r3, #100	@ 0x64
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e3b1      	b.n	8003aa8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003344:	4b0c      	ldr	r3, [pc, #48]	@ (8003378 <HAL_RCC_OscConfig+0x93c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0ef      	beq.n	8003330 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003350:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003354:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d10d      	bne.n	800337c <HAL_RCC_OscConfig+0x940>
 8003360:	4b03      	ldr	r3, [pc, #12]	@ (8003370 <HAL_RCC_OscConfig+0x934>)
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	4a02      	ldr	r2, [pc, #8]	@ (8003370 <HAL_RCC_OscConfig+0x934>)
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	6213      	str	r3, [r2, #32]
 800336c:	e03c      	b.n	80033e8 <HAL_RCC_OscConfig+0x9ac>
 800336e:	bf00      	nop
 8003370:	40021000 	.word	0x40021000
 8003374:	10908120 	.word	0x10908120
 8003378:	40007000 	.word	0x40007000
 800337c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003380:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10c      	bne.n	80033a6 <HAL_RCC_OscConfig+0x96a>
 800338c:	4bc1      	ldr	r3, [pc, #772]	@ (8003694 <HAL_RCC_OscConfig+0xc58>)
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	4ac0      	ldr	r2, [pc, #768]	@ (8003694 <HAL_RCC_OscConfig+0xc58>)
 8003392:	f023 0301 	bic.w	r3, r3, #1
 8003396:	6213      	str	r3, [r2, #32]
 8003398:	4bbe      	ldr	r3, [pc, #760]	@ (8003694 <HAL_RCC_OscConfig+0xc58>)
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	4abd      	ldr	r2, [pc, #756]	@ (8003694 <HAL_RCC_OscConfig+0xc58>)
 800339e:	f023 0304 	bic.w	r3, r3, #4
 80033a2:	6213      	str	r3, [r2, #32]
 80033a4:	e020      	b.n	80033e8 <HAL_RCC_OscConfig+0x9ac>
 80033a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	2b05      	cmp	r3, #5
 80033b4:	d10c      	bne.n	80033d0 <HAL_RCC_OscConfig+0x994>
 80033b6:	4bb7      	ldr	r3, [pc, #732]	@ (8003694 <HAL_RCC_OscConfig+0xc58>)
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	4ab6      	ldr	r2, [pc, #728]	@ (8003694 <HAL_RCC_OscConfig+0xc58>)
 80033bc:	f043 0304 	orr.w	r3, r3, #4
 80033c0:	6213      	str	r3, [r2, #32]
 80033c2:	4bb4      	ldr	r3, [pc, #720]	@ (8003694 <HAL_RCC_OscConfig+0xc58>)
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	4ab3      	ldr	r2, [pc, #716]	@ (8003694 <HAL_RCC_OscConfig+0xc58>)
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	6213      	str	r3, [r2, #32]
 80033ce:	e00b      	b.n	80033e8 <HAL_RCC_OscConfig+0x9ac>
 80033d0:	4bb0      	ldr	r3, [pc, #704]	@ (8003694 <HAL_RCC_OscConfig+0xc58>)
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	4aaf      	ldr	r2, [pc, #700]	@ (8003694 <HAL_RCC_OscConfig+0xc58>)
 80033d6:	f023 0301 	bic.w	r3, r3, #1
 80033da:	6213      	str	r3, [r2, #32]
 80033dc:	4bad      	ldr	r3, [pc, #692]	@ (8003694 <HAL_RCC_OscConfig+0xc58>)
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	4aac      	ldr	r2, [pc, #688]	@ (8003694 <HAL_RCC_OscConfig+0xc58>)
 80033e2:	f023 0304 	bic.w	r3, r3, #4
 80033e6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 8081 	beq.w	80034fc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fa:	f7fd fc65 	bl	8000cc8 <HAL_GetTick>
 80033fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003402:	e00b      	b.n	800341c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003404:	f7fd fc60 	bl	8000cc8 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003414:	4293      	cmp	r3, r2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e345      	b.n	8003aa8 <HAL_RCC_OscConfig+0x106c>
 800341c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003420:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003424:	2202      	movs	r2, #2
 8003426:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003428:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800342c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	fa93 f2a3 	rbit	r2, r3
 8003436:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800343a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003444:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003448:	2202      	movs	r2, #2
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003450:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	fa93 f2a3 	rbit	r2, r3
 800345a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800345e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003462:	601a      	str	r2, [r3, #0]
  return result;
 8003464:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003468:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800346c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346e:	fab3 f383 	clz	r3, r3
 8003472:	b2db      	uxtb	r3, r3
 8003474:	095b      	lsrs	r3, r3, #5
 8003476:	b2db      	uxtb	r3, r3
 8003478:	f043 0302 	orr.w	r3, r3, #2
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d102      	bne.n	8003488 <HAL_RCC_OscConfig+0xa4c>
 8003482:	4b84      	ldr	r3, [pc, #528]	@ (8003694 <HAL_RCC_OscConfig+0xc58>)
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	e013      	b.n	80034b0 <HAL_RCC_OscConfig+0xa74>
 8003488:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800348c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003490:	2202      	movs	r2, #2
 8003492:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003494:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003498:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	fa93 f2a3 	rbit	r2, r3
 80034a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034a6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	4b79      	ldr	r3, [pc, #484]	@ (8003694 <HAL_RCC_OscConfig+0xc58>)
 80034ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034b4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80034b8:	2102      	movs	r1, #2
 80034ba:	6011      	str	r1, [r2, #0]
 80034bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034c0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80034c4:	6812      	ldr	r2, [r2, #0]
 80034c6:	fa92 f1a2 	rbit	r1, r2
 80034ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034ce:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80034d2:	6011      	str	r1, [r2, #0]
  return result;
 80034d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034d8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80034dc:	6812      	ldr	r2, [r2, #0]
 80034de:	fab2 f282 	clz	r2, r2
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034e8:	b2d2      	uxtb	r2, r2
 80034ea:	f002 021f 	and.w	r2, r2, #31
 80034ee:	2101      	movs	r1, #1
 80034f0:	fa01 f202 	lsl.w	r2, r1, r2
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d084      	beq.n	8003404 <HAL_RCC_OscConfig+0x9c8>
 80034fa:	e07f      	b.n	80035fc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034fc:	f7fd fbe4 	bl	8000cc8 <HAL_GetTick>
 8003500:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003504:	e00b      	b.n	800351e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003506:	f7fd fbdf 	bl	8000cc8 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003516:	4293      	cmp	r3, r2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e2c4      	b.n	8003aa8 <HAL_RCC_OscConfig+0x106c>
 800351e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003522:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003526:	2202      	movs	r2, #2
 8003528:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800352e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	fa93 f2a3 	rbit	r2, r3
 8003538:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800353c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003546:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800354a:	2202      	movs	r2, #2
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003552:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	fa93 f2a3 	rbit	r2, r3
 800355c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003560:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003564:	601a      	str	r2, [r3, #0]
  return result;
 8003566:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800356a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800356e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003570:	fab3 f383 	clz	r3, r3
 8003574:	b2db      	uxtb	r3, r3
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	b2db      	uxtb	r3, r3
 800357a:	f043 0302 	orr.w	r3, r3, #2
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d102      	bne.n	800358a <HAL_RCC_OscConfig+0xb4e>
 8003584:	4b43      	ldr	r3, [pc, #268]	@ (8003694 <HAL_RCC_OscConfig+0xc58>)
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	e013      	b.n	80035b2 <HAL_RCC_OscConfig+0xb76>
 800358a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800358e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003592:	2202      	movs	r2, #2
 8003594:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003596:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800359a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	fa93 f2a3 	rbit	r2, r3
 80035a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035a8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	4b39      	ldr	r3, [pc, #228]	@ (8003694 <HAL_RCC_OscConfig+0xc58>)
 80035b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035b6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80035ba:	2102      	movs	r1, #2
 80035bc:	6011      	str	r1, [r2, #0]
 80035be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035c2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80035c6:	6812      	ldr	r2, [r2, #0]
 80035c8:	fa92 f1a2 	rbit	r1, r2
 80035cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035d0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80035d4:	6011      	str	r1, [r2, #0]
  return result;
 80035d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035da:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80035de:	6812      	ldr	r2, [r2, #0]
 80035e0:	fab2 f282 	clz	r2, r2
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	f002 021f 	and.w	r2, r2, #31
 80035f0:	2101      	movs	r1, #1
 80035f2:	fa01 f202 	lsl.w	r2, r1, r2
 80035f6:	4013      	ands	r3, r2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d184      	bne.n	8003506 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035fc:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003600:	2b01      	cmp	r3, #1
 8003602:	d105      	bne.n	8003610 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003604:	4b23      	ldr	r3, [pc, #140]	@ (8003694 <HAL_RCC_OscConfig+0xc58>)
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	4a22      	ldr	r2, [pc, #136]	@ (8003694 <HAL_RCC_OscConfig+0xc58>)
 800360a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800360e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003610:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003614:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 8242 	beq.w	8003aa6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003622:	4b1c      	ldr	r3, [pc, #112]	@ (8003694 <HAL_RCC_OscConfig+0xc58>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f003 030c 	and.w	r3, r3, #12
 800362a:	2b08      	cmp	r3, #8
 800362c:	f000 8213 	beq.w	8003a56 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003634:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	2b02      	cmp	r3, #2
 800363e:	f040 8162 	bne.w	8003906 <HAL_RCC_OscConfig+0xeca>
 8003642:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003646:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800364a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800364e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003650:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003654:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	fa93 f2a3 	rbit	r2, r3
 800365e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003662:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003666:	601a      	str	r2, [r3, #0]
  return result;
 8003668:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800366c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003670:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003672:	fab3 f383 	clz	r3, r3
 8003676:	b2db      	uxtb	r3, r3
 8003678:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800367c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	461a      	mov	r2, r3
 8003684:	2300      	movs	r3, #0
 8003686:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003688:	f7fd fb1e 	bl	8000cc8 <HAL_GetTick>
 800368c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003690:	e00c      	b.n	80036ac <HAL_RCC_OscConfig+0xc70>
 8003692:	bf00      	nop
 8003694:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003698:	f7fd fb16 	bl	8000cc8 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e1fd      	b.n	8003aa8 <HAL_RCC_OscConfig+0x106c>
 80036ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036b0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80036b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036be:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	fa93 f2a3 	rbit	r2, r3
 80036c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036cc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80036d0:	601a      	str	r2, [r3, #0]
  return result;
 80036d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80036da:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036dc:	fab3 f383 	clz	r3, r3
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	095b      	lsrs	r3, r3, #5
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	f043 0301 	orr.w	r3, r3, #1
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d102      	bne.n	80036f6 <HAL_RCC_OscConfig+0xcba>
 80036f0:	4bb0      	ldr	r3, [pc, #704]	@ (80039b4 <HAL_RCC_OscConfig+0xf78>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	e027      	b.n	8003746 <HAL_RCC_OscConfig+0xd0a>
 80036f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036fa:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80036fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003702:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003704:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003708:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	fa93 f2a3 	rbit	r2, r3
 8003712:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003716:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003720:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003724:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800372e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	fa93 f2a3 	rbit	r2, r3
 8003738:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800373c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	4b9c      	ldr	r3, [pc, #624]	@ (80039b4 <HAL_RCC_OscConfig+0xf78>)
 8003744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003746:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800374a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800374e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003752:	6011      	str	r1, [r2, #0]
 8003754:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003758:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800375c:	6812      	ldr	r2, [r2, #0]
 800375e:	fa92 f1a2 	rbit	r1, r2
 8003762:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003766:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800376a:	6011      	str	r1, [r2, #0]
  return result;
 800376c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003770:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003774:	6812      	ldr	r2, [r2, #0]
 8003776:	fab2 f282 	clz	r2, r2
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	f042 0220 	orr.w	r2, r2, #32
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	f002 021f 	and.w	r2, r2, #31
 8003786:	2101      	movs	r1, #1
 8003788:	fa01 f202 	lsl.w	r2, r1, r2
 800378c:	4013      	ands	r3, r2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d182      	bne.n	8003698 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003792:	4b88      	ldr	r3, [pc, #544]	@ (80039b4 <HAL_RCC_OscConfig+0xf78>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800379a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800379e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80037a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	430b      	orrs	r3, r1
 80037b4:	497f      	ldr	r1, [pc, #508]	@ (80039b4 <HAL_RCC_OscConfig+0xf78>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	604b      	str	r3, [r1, #4]
 80037ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037be:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80037c2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80037c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037cc:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	fa93 f2a3 	rbit	r2, r3
 80037d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037da:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80037de:	601a      	str	r2, [r3, #0]
  return result;
 80037e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037e4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80037e8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037ea:	fab3 f383 	clz	r3, r3
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80037f4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	461a      	mov	r2, r3
 80037fc:	2301      	movs	r3, #1
 80037fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003800:	f7fd fa62 	bl	8000cc8 <HAL_GetTick>
 8003804:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003808:	e009      	b.n	800381e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800380a:	f7fd fa5d 	bl	8000cc8 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e144      	b.n	8003aa8 <HAL_RCC_OscConfig+0x106c>
 800381e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003822:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003826:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800382a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003830:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	fa93 f2a3 	rbit	r2, r3
 800383a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800383e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003842:	601a      	str	r2, [r3, #0]
  return result;
 8003844:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003848:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800384c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800384e:	fab3 f383 	clz	r3, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	095b      	lsrs	r3, r3, #5
 8003856:	b2db      	uxtb	r3, r3
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b01      	cmp	r3, #1
 8003860:	d102      	bne.n	8003868 <HAL_RCC_OscConfig+0xe2c>
 8003862:	4b54      	ldr	r3, [pc, #336]	@ (80039b4 <HAL_RCC_OscConfig+0xf78>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	e027      	b.n	80038b8 <HAL_RCC_OscConfig+0xe7c>
 8003868:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800386c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003870:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003874:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003876:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800387a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	fa93 f2a3 	rbit	r2, r3
 8003884:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003888:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003892:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003896:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038a0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	fa93 f2a3 	rbit	r2, r3
 80038aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ae:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	4b3f      	ldr	r3, [pc, #252]	@ (80039b4 <HAL_RCC_OscConfig+0xf78>)
 80038b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038bc:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80038c0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80038c4:	6011      	str	r1, [r2, #0]
 80038c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038ca:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80038ce:	6812      	ldr	r2, [r2, #0]
 80038d0:	fa92 f1a2 	rbit	r1, r2
 80038d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038d8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80038dc:	6011      	str	r1, [r2, #0]
  return result;
 80038de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038e2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80038e6:	6812      	ldr	r2, [r2, #0]
 80038e8:	fab2 f282 	clz	r2, r2
 80038ec:	b2d2      	uxtb	r2, r2
 80038ee:	f042 0220 	orr.w	r2, r2, #32
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	f002 021f 	and.w	r2, r2, #31
 80038f8:	2101      	movs	r1, #1
 80038fa:	fa01 f202 	lsl.w	r2, r1, r2
 80038fe:	4013      	ands	r3, r2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d082      	beq.n	800380a <HAL_RCC_OscConfig+0xdce>
 8003904:	e0cf      	b.n	8003aa6 <HAL_RCC_OscConfig+0x106a>
 8003906:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800390a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800390e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003912:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003918:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	fa93 f2a3 	rbit	r2, r3
 8003922:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003926:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800392a:	601a      	str	r2, [r3, #0]
  return result;
 800392c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003930:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003934:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003936:	fab3 f383 	clz	r3, r3
 800393a:	b2db      	uxtb	r3, r3
 800393c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003940:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	461a      	mov	r2, r3
 8003948:	2300      	movs	r3, #0
 800394a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394c:	f7fd f9bc 	bl	8000cc8 <HAL_GetTick>
 8003950:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003954:	e009      	b.n	800396a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003956:	f7fd f9b7 	bl	8000cc8 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e09e      	b.n	8003aa8 <HAL_RCC_OscConfig+0x106c>
 800396a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800396e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003972:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003976:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003978:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800397c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	fa93 f2a3 	rbit	r2, r3
 8003986:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800398a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800398e:	601a      	str	r2, [r3, #0]
  return result;
 8003990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003994:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003998:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800399a:	fab3 f383 	clz	r3, r3
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	095b      	lsrs	r3, r3, #5
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d104      	bne.n	80039b8 <HAL_RCC_OscConfig+0xf7c>
 80039ae:	4b01      	ldr	r3, [pc, #4]	@ (80039b4 <HAL_RCC_OscConfig+0xf78>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	e029      	b.n	8003a08 <HAL_RCC_OscConfig+0xfcc>
 80039b4:	40021000 	.word	0x40021000
 80039b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039bc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80039c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ca:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	fa93 f2a3 	rbit	r2, r3
 80039d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039d8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039e2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80039e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039f0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	fa93 f2a3 	rbit	r2, r3
 80039fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039fe:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	4b2b      	ldr	r3, [pc, #172]	@ (8003ab4 <HAL_RCC_OscConfig+0x1078>)
 8003a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a08:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a0c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003a10:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003a14:	6011      	str	r1, [r2, #0]
 8003a16:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a1a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003a1e:	6812      	ldr	r2, [r2, #0]
 8003a20:	fa92 f1a2 	rbit	r1, r2
 8003a24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a28:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003a2c:	6011      	str	r1, [r2, #0]
  return result;
 8003a2e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a32:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	fab2 f282 	clz	r2, r2
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	f042 0220 	orr.w	r2, r2, #32
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	f002 021f 	and.w	r2, r2, #31
 8003a48:	2101      	movs	r1, #1
 8003a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d180      	bne.n	8003956 <HAL_RCC_OscConfig+0xf1a>
 8003a54:	e027      	b.n	8003aa6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e01e      	b.n	8003aa8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a6a:	4b12      	ldr	r3, [pc, #72]	@ (8003ab4 <HAL_RCC_OscConfig+0x1078>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a72:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003a76:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003a7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d10b      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003a8a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003a8e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d001      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40021000 	.word	0x40021000

08003ab8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b09e      	sub	sp, #120	@ 0x78
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e162      	b.n	8003d96 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad0:	4b90      	ldr	r3, [pc, #576]	@ (8003d14 <HAL_RCC_ClockConfig+0x25c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d910      	bls.n	8003b00 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ade:	4b8d      	ldr	r3, [pc, #564]	@ (8003d14 <HAL_RCC_ClockConfig+0x25c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f023 0207 	bic.w	r2, r3, #7
 8003ae6:	498b      	ldr	r1, [pc, #556]	@ (8003d14 <HAL_RCC_ClockConfig+0x25c>)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aee:	4b89      	ldr	r3, [pc, #548]	@ (8003d14 <HAL_RCC_ClockConfig+0x25c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d001      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e14a      	b.n	8003d96 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d008      	beq.n	8003b1e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b0c:	4b82      	ldr	r3, [pc, #520]	@ (8003d18 <HAL_RCC_ClockConfig+0x260>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	497f      	ldr	r1, [pc, #508]	@ (8003d18 <HAL_RCC_ClockConfig+0x260>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 80dc 	beq.w	8003ce4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d13c      	bne.n	8003bae <HAL_RCC_ClockConfig+0xf6>
 8003b34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b38:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b3c:	fa93 f3a3 	rbit	r3, r3
 8003b40:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003b42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b44:	fab3 f383 	clz	r3, r3
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d102      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xa6>
 8003b58:	4b6f      	ldr	r3, [pc, #444]	@ (8003d18 <HAL_RCC_ClockConfig+0x260>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	e00f      	b.n	8003b7e <HAL_RCC_ClockConfig+0xc6>
 8003b5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b62:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b66:	fa93 f3a3 	rbit	r3, r3
 8003b6a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b70:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b74:	fa93 f3a3 	rbit	r3, r3
 8003b78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b7a:	4b67      	ldr	r3, [pc, #412]	@ (8003d18 <HAL_RCC_ClockConfig+0x260>)
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b82:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003b84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b86:	fa92 f2a2 	rbit	r2, r2
 8003b8a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003b8c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003b8e:	fab2 f282 	clz	r2, r2
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	f042 0220 	orr.w	r2, r2, #32
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	f002 021f 	and.w	r2, r2, #31
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d17b      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e0f3      	b.n	8003d96 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d13c      	bne.n	8003c30 <HAL_RCC_ClockConfig+0x178>
 8003bb6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bba:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bbe:	fa93 f3a3 	rbit	r3, r3
 8003bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003bc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc6:	fab3 f383 	clz	r3, r3
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	095b      	lsrs	r3, r3, #5
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	f043 0301 	orr.w	r3, r3, #1
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d102      	bne.n	8003be0 <HAL_RCC_ClockConfig+0x128>
 8003bda:	4b4f      	ldr	r3, [pc, #316]	@ (8003d18 <HAL_RCC_ClockConfig+0x260>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	e00f      	b.n	8003c00 <HAL_RCC_ClockConfig+0x148>
 8003be0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003be4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003be8:	fa93 f3a3 	rbit	r3, r3
 8003bec:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bf2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bf6:	fa93 f3a3 	rbit	r3, r3
 8003bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bfc:	4b46      	ldr	r3, [pc, #280]	@ (8003d18 <HAL_RCC_ClockConfig+0x260>)
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c04:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003c06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c08:	fa92 f2a2 	rbit	r2, r2
 8003c0c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003c0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c10:	fab2 f282 	clz	r2, r2
 8003c14:	b2d2      	uxtb	r2, r2
 8003c16:	f042 0220 	orr.w	r2, r2, #32
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	f002 021f 	and.w	r2, r2, #31
 8003c20:	2101      	movs	r1, #1
 8003c22:	fa01 f202 	lsl.w	r2, r1, r2
 8003c26:	4013      	ands	r3, r2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d13a      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0b2      	b.n	8003d96 <HAL_RCC_ClockConfig+0x2de>
 8003c30:	2302      	movs	r3, #2
 8003c32:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c36:	fa93 f3a3 	rbit	r3, r3
 8003c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c3e:	fab3 f383 	clz	r3, r3
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	095b      	lsrs	r3, r3, #5
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	f043 0301 	orr.w	r3, r3, #1
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d102      	bne.n	8003c58 <HAL_RCC_ClockConfig+0x1a0>
 8003c52:	4b31      	ldr	r3, [pc, #196]	@ (8003d18 <HAL_RCC_ClockConfig+0x260>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	e00d      	b.n	8003c74 <HAL_RCC_ClockConfig+0x1bc>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5e:	fa93 f3a3 	rbit	r3, r3
 8003c62:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c64:	2302      	movs	r3, #2
 8003c66:	623b      	str	r3, [r7, #32]
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	fa93 f3a3 	rbit	r3, r3
 8003c6e:	61fb      	str	r3, [r7, #28]
 8003c70:	4b29      	ldr	r3, [pc, #164]	@ (8003d18 <HAL_RCC_ClockConfig+0x260>)
 8003c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c74:	2202      	movs	r2, #2
 8003c76:	61ba      	str	r2, [r7, #24]
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	fa92 f2a2 	rbit	r2, r2
 8003c7e:	617a      	str	r2, [r7, #20]
  return result;
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	fab2 f282 	clz	r2, r2
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	f042 0220 	orr.w	r2, r2, #32
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	f002 021f 	and.w	r2, r2, #31
 8003c92:	2101      	movs	r1, #1
 8003c94:	fa01 f202 	lsl.w	r2, r1, r2
 8003c98:	4013      	ands	r3, r2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e079      	b.n	8003d96 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8003d18 <HAL_RCC_ClockConfig+0x260>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f023 0203 	bic.w	r2, r3, #3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	491a      	ldr	r1, [pc, #104]	@ (8003d18 <HAL_RCC_ClockConfig+0x260>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cb4:	f7fd f808 	bl	8000cc8 <HAL_GetTick>
 8003cb8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cba:	e00a      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cbc:	f7fd f804 	bl	8000cc8 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e061      	b.n	8003d96 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd2:	4b11      	ldr	r3, [pc, #68]	@ (8003d18 <HAL_RCC_ClockConfig+0x260>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f003 020c 	and.w	r2, r3, #12
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d1eb      	bne.n	8003cbc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8003d14 <HAL_RCC_ClockConfig+0x25c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0307 	and.w	r3, r3, #7
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d214      	bcs.n	8003d1c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf2:	4b08      	ldr	r3, [pc, #32]	@ (8003d14 <HAL_RCC_ClockConfig+0x25c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f023 0207 	bic.w	r2, r3, #7
 8003cfa:	4906      	ldr	r1, [pc, #24]	@ (8003d14 <HAL_RCC_ClockConfig+0x25c>)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d02:	4b04      	ldr	r3, [pc, #16]	@ (8003d14 <HAL_RCC_ClockConfig+0x25c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d005      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e040      	b.n	8003d96 <HAL_RCC_ClockConfig+0x2de>
 8003d14:	40022000 	.word	0x40022000
 8003d18:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d28:	4b1d      	ldr	r3, [pc, #116]	@ (8003da0 <HAL_RCC_ClockConfig+0x2e8>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	491a      	ldr	r1, [pc, #104]	@ (8003da0 <HAL_RCC_ClockConfig+0x2e8>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d009      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d46:	4b16      	ldr	r3, [pc, #88]	@ (8003da0 <HAL_RCC_ClockConfig+0x2e8>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	4912      	ldr	r1, [pc, #72]	@ (8003da0 <HAL_RCC_ClockConfig+0x2e8>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d5a:	f000 f829 	bl	8003db0 <HAL_RCC_GetSysClockFreq>
 8003d5e:	4601      	mov	r1, r0
 8003d60:	4b0f      	ldr	r3, [pc, #60]	@ (8003da0 <HAL_RCC_ClockConfig+0x2e8>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d68:	22f0      	movs	r2, #240	@ 0xf0
 8003d6a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	fa92 f2a2 	rbit	r2, r2
 8003d72:	60fa      	str	r2, [r7, #12]
  return result;
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	fab2 f282 	clz	r2, r2
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	40d3      	lsrs	r3, r2
 8003d7e:	4a09      	ldr	r2, [pc, #36]	@ (8003da4 <HAL_RCC_ClockConfig+0x2ec>)
 8003d80:	5cd3      	ldrb	r3, [r2, r3]
 8003d82:	fa21 f303 	lsr.w	r3, r1, r3
 8003d86:	4a08      	ldr	r2, [pc, #32]	@ (8003da8 <HAL_RCC_ClockConfig+0x2f0>)
 8003d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003d8a:	4b08      	ldr	r3, [pc, #32]	@ (8003dac <HAL_RCC_ClockConfig+0x2f4>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fc fe40 	bl	8000a14 <HAL_InitTick>
  
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3778      	adds	r7, #120	@ 0x78
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40021000 	.word	0x40021000
 8003da4:	08009654 	.word	0x08009654
 8003da8:	20000000 	.word	0x20000000
 8003dac:	20000004 	.word	0x20000004

08003db0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	60fb      	str	r3, [r7, #12]
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	617b      	str	r3, [r7, #20]
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003dca:	4b1e      	ldr	r3, [pc, #120]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x94>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f003 030c 	and.w	r3, r3, #12
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d002      	beq.n	8003de0 <HAL_RCC_GetSysClockFreq+0x30>
 8003dda:	2b08      	cmp	r3, #8
 8003ddc:	d003      	beq.n	8003de6 <HAL_RCC_GetSysClockFreq+0x36>
 8003dde:	e026      	b.n	8003e2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003de0:	4b19      	ldr	r3, [pc, #100]	@ (8003e48 <HAL_RCC_GetSysClockFreq+0x98>)
 8003de2:	613b      	str	r3, [r7, #16]
      break;
 8003de4:	e026      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	0c9b      	lsrs	r3, r3, #18
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	4a17      	ldr	r2, [pc, #92]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003df0:	5cd3      	ldrb	r3, [r2, r3]
 8003df2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003df4:	4b13      	ldr	r3, [pc, #76]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x94>)
 8003df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df8:	f003 030f 	and.w	r3, r3, #15
 8003dfc:	4a14      	ldr	r2, [pc, #80]	@ (8003e50 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003dfe:	5cd3      	ldrb	r3, [r2, r3]
 8003e00:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d008      	beq.n	8003e1e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e0c:	4a0e      	ldr	r2, [pc, #56]	@ (8003e48 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	fb02 f303 	mul.w	r3, r2, r3
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	e004      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a0c      	ldr	r2, [pc, #48]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e22:	fb02 f303 	mul.w	r3, r2, r3
 8003e26:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	613b      	str	r3, [r7, #16]
      break;
 8003e2c:	e002      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e2e:	4b06      	ldr	r3, [pc, #24]	@ (8003e48 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e30:	613b      	str	r3, [r7, #16]
      break;
 8003e32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e34:	693b      	ldr	r3, [r7, #16]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	371c      	adds	r7, #28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40021000 	.word	0x40021000
 8003e48:	007a1200 	.word	0x007a1200
 8003e4c:	0800966c 	.word	0x0800966c
 8003e50:	0800967c 	.word	0x0800967c
 8003e54:	003d0900 	.word	0x003d0900

08003e58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e5c:	4b03      	ldr	r3, [pc, #12]	@ (8003e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	20000000 	.word	0x20000000

08003e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003e76:	f7ff ffef 	bl	8003e58 <HAL_RCC_GetHCLKFreq>
 8003e7a:	4601      	mov	r1, r0
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003eac <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003e84:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003e88:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	fa92 f2a2 	rbit	r2, r2
 8003e90:	603a      	str	r2, [r7, #0]
  return result;
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	fab2 f282 	clz	r2, r2
 8003e98:	b2d2      	uxtb	r2, r2
 8003e9a:	40d3      	lsrs	r3, r2
 8003e9c:	4a04      	ldr	r2, [pc, #16]	@ (8003eb0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003e9e:	5cd3      	ldrb	r3, [r2, r3]
 8003ea0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	08009664 	.word	0x08009664

08003eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003eba:	f7ff ffcd 	bl	8003e58 <HAL_RCC_GetHCLKFreq>
 8003ebe:	4601      	mov	r1, r0
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003ec8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003ecc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	fa92 f2a2 	rbit	r2, r2
 8003ed4:	603a      	str	r2, [r7, #0]
  return result;
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	fab2 f282 	clz	r2, r2
 8003edc:	b2d2      	uxtb	r2, r2
 8003ede:	40d3      	lsrs	r3, r2
 8003ee0:	4a04      	ldr	r2, [pc, #16]	@ (8003ef4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003ee2:	5cd3      	ldrb	r3, [r2, r3]
 8003ee4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	08009664 	.word	0x08009664

08003ef8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	220f      	movs	r2, #15
 8003f06:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f08:	4b12      	ldr	r3, [pc, #72]	@ (8003f54 <HAL_RCC_GetClockConfig+0x5c>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f003 0203 	and.w	r2, r3, #3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003f14:	4b0f      	ldr	r3, [pc, #60]	@ (8003f54 <HAL_RCC_GetClockConfig+0x5c>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003f20:	4b0c      	ldr	r3, [pc, #48]	@ (8003f54 <HAL_RCC_GetClockConfig+0x5c>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f2c:	4b09      	ldr	r3, [pc, #36]	@ (8003f54 <HAL_RCC_GetClockConfig+0x5c>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	08db      	lsrs	r3, r3, #3
 8003f32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003f3a:	4b07      	ldr	r3, [pc, #28]	@ (8003f58 <HAL_RCC_GetClockConfig+0x60>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0207 	and.w	r2, r3, #7
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	601a      	str	r2, [r3, #0]
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40021000 	.word	0x40021000
 8003f58:	40022000 	.word	0x40022000

08003f5c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b092      	sub	sp, #72	@ 0x48
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 80cd 	beq.w	800411a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f80:	4b8e      	ldr	r3, [pc, #568]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10e      	bne.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f8c:	4b8b      	ldr	r3, [pc, #556]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	4a8a      	ldr	r2, [pc, #552]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f96:	61d3      	str	r3, [r2, #28]
 8003f98:	4b88      	ldr	r3, [pc, #544]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003faa:	4b85      	ldr	r3, [pc, #532]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d118      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fb6:	4b82      	ldr	r3, [pc, #520]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a81      	ldr	r2, [pc, #516]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fc0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fc2:	f7fc fe81 	bl	8000cc8 <HAL_GetTick>
 8003fc6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc8:	e008      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fca:	f7fc fe7d 	bl	8000cc8 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b64      	cmp	r3, #100	@ 0x64
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e0ea      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fdc:	4b78      	ldr	r3, [pc, #480]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d0f0      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fe8:	4b74      	ldr	r3, [pc, #464]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d07d      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004000:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004002:	429a      	cmp	r2, r3
 8004004:	d076      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004006:	4b6d      	ldr	r3, [pc, #436]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800400e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004010:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004014:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004018:	fa93 f3a3 	rbit	r3, r3
 800401c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800401e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004020:	fab3 f383 	clz	r3, r3
 8004024:	b2db      	uxtb	r3, r3
 8004026:	461a      	mov	r2, r3
 8004028:	4b66      	ldr	r3, [pc, #408]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800402a:	4413      	add	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	461a      	mov	r2, r3
 8004030:	2301      	movs	r3, #1
 8004032:	6013      	str	r3, [r2, #0]
 8004034:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004038:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800403c:	fa93 f3a3 	rbit	r3, r3
 8004040:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004044:	fab3 f383 	clz	r3, r3
 8004048:	b2db      	uxtb	r3, r3
 800404a:	461a      	mov	r2, r3
 800404c:	4b5d      	ldr	r3, [pc, #372]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800404e:	4413      	add	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	461a      	mov	r2, r3
 8004054:	2300      	movs	r3, #0
 8004056:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004058:	4a58      	ldr	r2, [pc, #352]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800405a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800405c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800405e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d045      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004068:	f7fc fe2e 	bl	8000cc8 <HAL_GetTick>
 800406c:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406e:	e00a      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004070:	f7fc fe2a 	bl	8000cc8 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e095      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004086:	2302      	movs	r3, #2
 8004088:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800408c:	fa93 f3a3 	rbit	r3, r3
 8004090:	627b      	str	r3, [r7, #36]	@ 0x24
 8004092:	2302      	movs	r3, #2
 8004094:	623b      	str	r3, [r7, #32]
 8004096:	6a3b      	ldr	r3, [r7, #32]
 8004098:	fa93 f3a3 	rbit	r3, r3
 800409c:	61fb      	str	r3, [r7, #28]
  return result;
 800409e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a0:	fab3 f383 	clz	r3, r3
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	f043 0302 	orr.w	r3, r3, #2
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d102      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80040b4:	4b41      	ldr	r3, [pc, #260]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	e007      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80040ba:	2302      	movs	r3, #2
 80040bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	fa93 f3a3 	rbit	r3, r3
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	4b3d      	ldr	r3, [pc, #244]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ca:	2202      	movs	r2, #2
 80040cc:	613a      	str	r2, [r7, #16]
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	fa92 f2a2 	rbit	r2, r2
 80040d4:	60fa      	str	r2, [r7, #12]
  return result;
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	fab2 f282 	clz	r2, r2
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	f002 021f 	and.w	r2, r2, #31
 80040e8:	2101      	movs	r1, #1
 80040ea:	fa01 f202 	lsl.w	r2, r1, r2
 80040ee:	4013      	ands	r3, r2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0bd      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80040f4:	4b31      	ldr	r3, [pc, #196]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	492e      	ldr	r1, [pc, #184]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004102:	4313      	orrs	r3, r2
 8004104:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004106:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800410a:	2b01      	cmp	r3, #1
 800410c:	d105      	bne.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800410e:	4b2b      	ldr	r3, [pc, #172]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	4a2a      	ldr	r2, [pc, #168]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004114:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004118:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d008      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004126:	4b25      	ldr	r3, [pc, #148]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412a:	f023 0203 	bic.w	r2, r3, #3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	4922      	ldr	r1, [pc, #136]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004134:	4313      	orrs	r3, r2
 8004136:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0320 	and.w	r3, r3, #32
 8004140:	2b00      	cmp	r3, #0
 8004142:	d008      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004144:	4b1d      	ldr	r3, [pc, #116]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004148:	f023 0210 	bic.w	r2, r3, #16
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	491a      	ldr	r1, [pc, #104]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004152:	4313      	orrs	r3, r2
 8004154:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800415e:	2b00      	cmp	r3, #0
 8004160:	d008      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004162:	4b16      	ldr	r3, [pc, #88]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004166:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	4913      	ldr	r1, [pc, #76]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004170:	4313      	orrs	r3, r2
 8004172:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d008      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004180:	4b0e      	ldr	r3, [pc, #56]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004184:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	490b      	ldr	r1, [pc, #44]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800418e:	4313      	orrs	r3, r2
 8004190:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d008      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800419e:	4b07      	ldr	r3, [pc, #28]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	4904      	ldr	r1, [pc, #16]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3748      	adds	r7, #72	@ 0x48
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	40021000 	.word	0x40021000
 80041c0:	40007000 	.word	0x40007000
 80041c4:	10908100 	.word	0x10908100

080041c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e049      	b.n	800426e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d106      	bne.n	80041f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f841 	bl	8004276 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3304      	adds	r3, #4
 8004204:	4619      	mov	r1, r3
 8004206:	4610      	mov	r0, r2
 8004208:	f000 fbee 	bl	80049e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
	...

0800428c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b01      	cmp	r3, #1
 800429e:	d001      	beq.n	80042a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e040      	b.n	8004326 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68da      	ldr	r2, [r3, #12]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0201 	orr.w	r2, r2, #1
 80042ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004334 <HAL_TIM_Base_Start_IT+0xa8>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00e      	beq.n	80042e4 <HAL_TIM_Base_Start_IT+0x58>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042ce:	d009      	beq.n	80042e4 <HAL_TIM_Base_Start_IT+0x58>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a18      	ldr	r2, [pc, #96]	@ (8004338 <HAL_TIM_Base_Start_IT+0xac>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d004      	beq.n	80042e4 <HAL_TIM_Base_Start_IT+0x58>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a17      	ldr	r2, [pc, #92]	@ (800433c <HAL_TIM_Base_Start_IT+0xb0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d115      	bne.n	8004310 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689a      	ldr	r2, [r3, #8]
 80042ea:	4b15      	ldr	r3, [pc, #84]	@ (8004340 <HAL_TIM_Base_Start_IT+0xb4>)
 80042ec:	4013      	ands	r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2b06      	cmp	r3, #6
 80042f4:	d015      	beq.n	8004322 <HAL_TIM_Base_Start_IT+0x96>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042fc:	d011      	beq.n	8004322 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f042 0201 	orr.w	r2, r2, #1
 800430c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800430e:	e008      	b.n	8004322 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0201 	orr.w	r2, r2, #1
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	e000      	b.n	8004324 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004322:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40012c00 	.word	0x40012c00
 8004338:	40000400 	.word	0x40000400
 800433c:	40014000 	.word	0x40014000
 8004340:	00010007 	.word	0x00010007

08004344 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e049      	b.n	80043ea <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fc fac4 	bl	80008f8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3304      	adds	r3, #4
 8004380:	4619      	mov	r1, r3
 8004382:	4610      	mov	r0, r2
 8004384:	f000 fb30 	bl	80049e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
	...

080043f4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d104      	bne.n	8004412 <HAL_TIM_IC_Start_IT+0x1e>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800440e:	b2db      	uxtb	r3, r3
 8004410:	e023      	b.n	800445a <HAL_TIM_IC_Start_IT+0x66>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b04      	cmp	r3, #4
 8004416:	d104      	bne.n	8004422 <HAL_TIM_IC_Start_IT+0x2e>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800441e:	b2db      	uxtb	r3, r3
 8004420:	e01b      	b.n	800445a <HAL_TIM_IC_Start_IT+0x66>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	2b08      	cmp	r3, #8
 8004426:	d104      	bne.n	8004432 <HAL_TIM_IC_Start_IT+0x3e>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800442e:	b2db      	uxtb	r3, r3
 8004430:	e013      	b.n	800445a <HAL_TIM_IC_Start_IT+0x66>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b0c      	cmp	r3, #12
 8004436:	d104      	bne.n	8004442 <HAL_TIM_IC_Start_IT+0x4e>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800443e:	b2db      	uxtb	r3, r3
 8004440:	e00b      	b.n	800445a <HAL_TIM_IC_Start_IT+0x66>
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b10      	cmp	r3, #16
 8004446:	d104      	bne.n	8004452 <HAL_TIM_IC_Start_IT+0x5e>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800444e:	b2db      	uxtb	r3, r3
 8004450:	e003      	b.n	800445a <HAL_TIM_IC_Start_IT+0x66>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004458:	b2db      	uxtb	r3, r3
 800445a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d104      	bne.n	800446c <HAL_TIM_IC_Start_IT+0x78>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004468:	b2db      	uxtb	r3, r3
 800446a:	e013      	b.n	8004494 <HAL_TIM_IC_Start_IT+0xa0>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	2b04      	cmp	r3, #4
 8004470:	d104      	bne.n	800447c <HAL_TIM_IC_Start_IT+0x88>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004478:	b2db      	uxtb	r3, r3
 800447a:	e00b      	b.n	8004494 <HAL_TIM_IC_Start_IT+0xa0>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	2b08      	cmp	r3, #8
 8004480:	d104      	bne.n	800448c <HAL_TIM_IC_Start_IT+0x98>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004488:	b2db      	uxtb	r3, r3
 800448a:	e003      	b.n	8004494 <HAL_TIM_IC_Start_IT+0xa0>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004492:	b2db      	uxtb	r3, r3
 8004494:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004496:	7bbb      	ldrb	r3, [r7, #14]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d102      	bne.n	80044a2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800449c:	7b7b      	ldrb	r3, [r7, #13]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d001      	beq.n	80044a6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e0ce      	b.n	8004644 <HAL_TIM_IC_Start_IT+0x250>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d104      	bne.n	80044b6 <HAL_TIM_IC_Start_IT+0xc2>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044b4:	e023      	b.n	80044fe <HAL_TIM_IC_Start_IT+0x10a>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b04      	cmp	r3, #4
 80044ba:	d104      	bne.n	80044c6 <HAL_TIM_IC_Start_IT+0xd2>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044c4:	e01b      	b.n	80044fe <HAL_TIM_IC_Start_IT+0x10a>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d104      	bne.n	80044d6 <HAL_TIM_IC_Start_IT+0xe2>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044d4:	e013      	b.n	80044fe <HAL_TIM_IC_Start_IT+0x10a>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b0c      	cmp	r3, #12
 80044da:	d104      	bne.n	80044e6 <HAL_TIM_IC_Start_IT+0xf2>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80044e4:	e00b      	b.n	80044fe <HAL_TIM_IC_Start_IT+0x10a>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b10      	cmp	r3, #16
 80044ea:	d104      	bne.n	80044f6 <HAL_TIM_IC_Start_IT+0x102>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044f4:	e003      	b.n	80044fe <HAL_TIM_IC_Start_IT+0x10a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2202      	movs	r2, #2
 80044fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d104      	bne.n	800450e <HAL_TIM_IC_Start_IT+0x11a>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800450c:	e013      	b.n	8004536 <HAL_TIM_IC_Start_IT+0x142>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b04      	cmp	r3, #4
 8004512:	d104      	bne.n	800451e <HAL_TIM_IC_Start_IT+0x12a>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800451c:	e00b      	b.n	8004536 <HAL_TIM_IC_Start_IT+0x142>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b08      	cmp	r3, #8
 8004522:	d104      	bne.n	800452e <HAL_TIM_IC_Start_IT+0x13a>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800452c:	e003      	b.n	8004536 <HAL_TIM_IC_Start_IT+0x142>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2202      	movs	r2, #2
 8004532:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b0c      	cmp	r3, #12
 800453a:	d841      	bhi.n	80045c0 <HAL_TIM_IC_Start_IT+0x1cc>
 800453c:	a201      	add	r2, pc, #4	@ (adr r2, 8004544 <HAL_TIM_IC_Start_IT+0x150>)
 800453e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004542:	bf00      	nop
 8004544:	08004579 	.word	0x08004579
 8004548:	080045c1 	.word	0x080045c1
 800454c:	080045c1 	.word	0x080045c1
 8004550:	080045c1 	.word	0x080045c1
 8004554:	0800458b 	.word	0x0800458b
 8004558:	080045c1 	.word	0x080045c1
 800455c:	080045c1 	.word	0x080045c1
 8004560:	080045c1 	.word	0x080045c1
 8004564:	0800459d 	.word	0x0800459d
 8004568:	080045c1 	.word	0x080045c1
 800456c:	080045c1 	.word	0x080045c1
 8004570:	080045c1 	.word	0x080045c1
 8004574:	080045af 	.word	0x080045af
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 0202 	orr.w	r2, r2, #2
 8004586:	60da      	str	r2, [r3, #12]
      break;
 8004588:	e01d      	b.n	80045c6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f042 0204 	orr.w	r2, r2, #4
 8004598:	60da      	str	r2, [r3, #12]
      break;
 800459a:	e014      	b.n	80045c6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f042 0208 	orr.w	r2, r2, #8
 80045aa:	60da      	str	r2, [r3, #12]
      break;
 80045ac:	e00b      	b.n	80045c6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f042 0210 	orr.w	r2, r2, #16
 80045bc:	60da      	str	r2, [r3, #12]
      break;
 80045be:	e002      	b.n	80045c6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	73fb      	strb	r3, [r7, #15]
      break;
 80045c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80045c6:	7bfb      	ldrb	r3, [r7, #15]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d13a      	bne.n	8004642 <HAL_TIM_IC_Start_IT+0x24e>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2201      	movs	r2, #1
 80045d2:	6839      	ldr	r1, [r7, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 fb9d 	bl	8004d14 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a1b      	ldr	r2, [pc, #108]	@ (800464c <HAL_TIM_IC_Start_IT+0x258>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d00e      	beq.n	8004602 <HAL_TIM_IC_Start_IT+0x20e>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ec:	d009      	beq.n	8004602 <HAL_TIM_IC_Start_IT+0x20e>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a17      	ldr	r2, [pc, #92]	@ (8004650 <HAL_TIM_IC_Start_IT+0x25c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d004      	beq.n	8004602 <HAL_TIM_IC_Start_IT+0x20e>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a15      	ldr	r2, [pc, #84]	@ (8004654 <HAL_TIM_IC_Start_IT+0x260>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d115      	bne.n	800462e <HAL_TIM_IC_Start_IT+0x23a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	4b13      	ldr	r3, [pc, #76]	@ (8004658 <HAL_TIM_IC_Start_IT+0x264>)
 800460a:	4013      	ands	r3, r2
 800460c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2b06      	cmp	r3, #6
 8004612:	d015      	beq.n	8004640 <HAL_TIM_IC_Start_IT+0x24c>
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800461a:	d011      	beq.n	8004640 <HAL_TIM_IC_Start_IT+0x24c>
      {
        __HAL_TIM_ENABLE(htim);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0201 	orr.w	r2, r2, #1
 800462a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462c:	e008      	b.n	8004640 <HAL_TIM_IC_Start_IT+0x24c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f042 0201 	orr.w	r2, r2, #1
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	e000      	b.n	8004642 <HAL_TIM_IC_Start_IT+0x24e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004640:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004642:	7bfb      	ldrb	r3, [r7, #15]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	40012c00 	.word	0x40012c00
 8004650:	40000400 	.word	0x40000400
 8004654:	40014000 	.word	0x40014000
 8004658:	00010007 	.word	0x00010007

0800465c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d020      	beq.n	80046c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d01b      	beq.n	80046c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f06f 0202 	mvn.w	r2, #2
 8004690:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f980 	bl	80049ac <HAL_TIM_IC_CaptureCallback>
 80046ac:	e005      	b.n	80046ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f972 	bl	8004998 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f983 	bl	80049c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d020      	beq.n	800470c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01b      	beq.n	800470c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f06f 0204 	mvn.w	r2, #4
 80046dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2202      	movs	r2, #2
 80046e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f95a 	bl	80049ac <HAL_TIM_IC_CaptureCallback>
 80046f8:	e005      	b.n	8004706 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f94c 	bl	8004998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 f95d 	bl	80049c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f003 0308 	and.w	r3, r3, #8
 8004712:	2b00      	cmp	r3, #0
 8004714:	d020      	beq.n	8004758 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01b      	beq.n	8004758 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0208 	mvn.w	r2, #8
 8004728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2204      	movs	r2, #4
 800472e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f934 	bl	80049ac <HAL_TIM_IC_CaptureCallback>
 8004744:	e005      	b.n	8004752 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f926 	bl	8004998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f937 	bl	80049c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f003 0310 	and.w	r3, r3, #16
 800475e:	2b00      	cmp	r3, #0
 8004760:	d020      	beq.n	80047a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f003 0310 	and.w	r3, r3, #16
 8004768:	2b00      	cmp	r3, #0
 800476a:	d01b      	beq.n	80047a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f06f 0210 	mvn.w	r2, #16
 8004774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2208      	movs	r2, #8
 800477a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f90e 	bl	80049ac <HAL_TIM_IC_CaptureCallback>
 8004790:	e005      	b.n	800479e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f900 	bl	8004998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f911 	bl	80049c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00c      	beq.n	80047c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d007      	beq.n	80047c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f06f 0201 	mvn.w	r2, #1
 80047c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7fc f804 	bl	80007d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00c      	beq.n	80047ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d007      	beq.n	80047ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80047e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 fb32 	bl	8004e50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00c      	beq.n	8004810 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d007      	beq.n	8004810 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fb2a 	bl	8004e64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00c      	beq.n	8004834 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004820:	2b00      	cmp	r3, #0
 8004822:	d007      	beq.n	8004834 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800482c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f8d0 	bl	80049d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f003 0320 	and.w	r3, r3, #32
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00c      	beq.n	8004858 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f003 0320 	and.w	r3, r3, #32
 8004844:	2b00      	cmp	r3, #0
 8004846:	d007      	beq.n	8004858 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f06f 0220 	mvn.w	r2, #32
 8004850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 faf2 	bl	8004e3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004858:	bf00      	nop
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800486c:	2300      	movs	r3, #0
 800486e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004876:	2b01      	cmp	r3, #1
 8004878:	d101      	bne.n	800487e <HAL_TIM_IC_ConfigChannel+0x1e>
 800487a:	2302      	movs	r3, #2
 800487c:	e088      	b.n	8004990 <HAL_TIM_IC_ConfigChannel+0x130>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d11b      	bne.n	80048c4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800489c:	f000 f928 	bl	8004af0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699a      	ldr	r2, [r3, #24]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 020c 	bic.w	r2, r2, #12
 80048ae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6999      	ldr	r1, [r3, #24]
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	689a      	ldr	r2, [r3, #8]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	619a      	str	r2, [r3, #24]
 80048c2:	e060      	b.n	8004986 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d11c      	bne.n	8004904 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80048da:	f000 f965 	bl	8004ba8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	699a      	ldr	r2, [r3, #24]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80048ec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6999      	ldr	r1, [r3, #24]
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	021a      	lsls	r2, r3, #8
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	619a      	str	r2, [r3, #24]
 8004902:	e040      	b.n	8004986 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b08      	cmp	r3, #8
 8004908:	d11b      	bne.n	8004942 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800491a:	f000 f982 	bl	8004c22 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	69da      	ldr	r2, [r3, #28]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 020c 	bic.w	r2, r2, #12
 800492c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69d9      	ldr	r1, [r3, #28]
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	61da      	str	r2, [r3, #28]
 8004940:	e021      	b.n	8004986 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b0c      	cmp	r3, #12
 8004946:	d11c      	bne.n	8004982 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004958:	f000 f99f 	bl	8004c9a <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	69da      	ldr	r2, [r3, #28]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800496a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	69d9      	ldr	r1, [r3, #28]
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	021a      	lsls	r2, r3, #8
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	430a      	orrs	r2, r1
 800497e:	61da      	str	r2, [r3, #28]
 8004980:	e001      	b.n	8004986 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800498e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a38      	ldr	r2, [pc, #224]	@ (8004adc <TIM_Base_SetConfig+0xf4>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d007      	beq.n	8004a10 <TIM_Base_SetConfig+0x28>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a06:	d003      	beq.n	8004a10 <TIM_Base_SetConfig+0x28>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a35      	ldr	r2, [pc, #212]	@ (8004ae0 <TIM_Base_SetConfig+0xf8>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d108      	bne.n	8004a22 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a2d      	ldr	r2, [pc, #180]	@ (8004adc <TIM_Base_SetConfig+0xf4>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d013      	beq.n	8004a52 <TIM_Base_SetConfig+0x6a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a30:	d00f      	beq.n	8004a52 <TIM_Base_SetConfig+0x6a>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a2a      	ldr	r2, [pc, #168]	@ (8004ae0 <TIM_Base_SetConfig+0xf8>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00b      	beq.n	8004a52 <TIM_Base_SetConfig+0x6a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a29      	ldr	r2, [pc, #164]	@ (8004ae4 <TIM_Base_SetConfig+0xfc>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d007      	beq.n	8004a52 <TIM_Base_SetConfig+0x6a>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a28      	ldr	r2, [pc, #160]	@ (8004ae8 <TIM_Base_SetConfig+0x100>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d003      	beq.n	8004a52 <TIM_Base_SetConfig+0x6a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a27      	ldr	r2, [pc, #156]	@ (8004aec <TIM_Base_SetConfig+0x104>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d108      	bne.n	8004a64 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a14      	ldr	r2, [pc, #80]	@ (8004adc <TIM_Base_SetConfig+0xf4>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d00b      	beq.n	8004aa8 <TIM_Base_SetConfig+0xc0>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a14      	ldr	r2, [pc, #80]	@ (8004ae4 <TIM_Base_SetConfig+0xfc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d007      	beq.n	8004aa8 <TIM_Base_SetConfig+0xc0>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a13      	ldr	r2, [pc, #76]	@ (8004ae8 <TIM_Base_SetConfig+0x100>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d003      	beq.n	8004aa8 <TIM_Base_SetConfig+0xc0>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a12      	ldr	r2, [pc, #72]	@ (8004aec <TIM_Base_SetConfig+0x104>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d103      	bne.n	8004ab0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	691a      	ldr	r2, [r3, #16]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d105      	bne.n	8004ace <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	f023 0201 	bic.w	r2, r3, #1
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	611a      	str	r2, [r3, #16]
  }
}
 8004ace:	bf00      	nop
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	40012c00 	.word	0x40012c00
 8004ae0:	40000400 	.word	0x40000400
 8004ae4:	40014000 	.word	0x40014000
 8004ae8:	40014400 	.word	0x40014400
 8004aec:	40014800 	.word	0x40014800

08004af0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
 8004afc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	f023 0201 	bic.w	r2, r3, #1
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4a20      	ldr	r2, [pc, #128]	@ (8004b9c <TIM_TI1_SetConfig+0xac>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00b      	beq.n	8004b36 <TIM_TI1_SetConfig+0x46>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b24:	d007      	beq.n	8004b36 <TIM_TI1_SetConfig+0x46>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4a1d      	ldr	r2, [pc, #116]	@ (8004ba0 <TIM_TI1_SetConfig+0xb0>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d003      	beq.n	8004b36 <TIM_TI1_SetConfig+0x46>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4a1c      	ldr	r2, [pc, #112]	@ (8004ba4 <TIM_TI1_SetConfig+0xb4>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d101      	bne.n	8004b3a <TIM_TI1_SetConfig+0x4a>
 8004b36:	2301      	movs	r3, #1
 8004b38:	e000      	b.n	8004b3c <TIM_TI1_SetConfig+0x4c>
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d008      	beq.n	8004b52 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f023 0303 	bic.w	r3, r3, #3
 8004b46:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	e003      	b.n	8004b5a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f043 0301 	orr.w	r3, r3, #1
 8004b58:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f023 030a 	bic.w	r3, r3, #10
 8004b74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f003 030a 	and.w	r3, r3, #10
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	621a      	str	r2, [r3, #32]
}
 8004b8e:	bf00      	nop
 8004b90:	371c      	adds	r7, #28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	40012c00 	.word	0x40012c00
 8004ba0:	40000400 	.word	0x40000400
 8004ba4:	40014000 	.word	0x40014000

08004ba8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b087      	sub	sp, #28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
 8004bb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	f023 0210 	bic.w	r2, r3, #16
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	021b      	lsls	r3, r3, #8
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	031b      	lsls	r3, r3, #12
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004bfa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	621a      	str	r2, [r3, #32]
}
 8004c16:	bf00      	nop
 8004c18:	371c      	adds	r7, #28
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b087      	sub	sp, #28
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	60f8      	str	r0, [r7, #12]
 8004c2a:	60b9      	str	r1, [r7, #8]
 8004c2c:	607a      	str	r2, [r7, #4]
 8004c2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	f023 0303 	bic.w	r3, r3, #3
 8004c4e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c5e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004c72:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	021b      	lsls	r3, r3, #8
 8004c78:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	621a      	str	r2, [r3, #32]
}
 8004c8e:	bf00      	nop
 8004c90:	371c      	adds	r7, #28
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b087      	sub	sp, #28
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	60f8      	str	r0, [r7, #12]
 8004ca2:	60b9      	str	r1, [r7, #8]
 8004ca4:	607a      	str	r2, [r7, #4]
 8004ca6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cc6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	021b      	lsls	r3, r3, #8
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004cd8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	031b      	lsls	r3, r3, #12
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004cec:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	031b      	lsls	r3, r3, #12
 8004cf2:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	621a      	str	r2, [r3, #32]
}
 8004d08:	bf00      	nop
 8004d0a:	371c      	adds	r7, #28
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f003 031f 	and.w	r3, r3, #31
 8004d26:	2201      	movs	r2, #1
 8004d28:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6a1a      	ldr	r2, [r3, #32]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	43db      	mvns	r3, r3
 8004d36:	401a      	ands	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a1a      	ldr	r2, [r3, #32]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f003 031f 	and.w	r3, r3, #31
 8004d46:	6879      	ldr	r1, [r7, #4]
 8004d48:	fa01 f303 	lsl.w	r3, r1, r3
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	621a      	str	r2, [r3, #32]
}
 8004d52:	bf00      	nop
 8004d54:	371c      	adds	r7, #28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
	...

08004d60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d74:	2302      	movs	r3, #2
 8004d76:	e054      	b.n	8004e22 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a24      	ldr	r2, [pc, #144]	@ (8004e30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d108      	bne.n	8004db4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004da8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a17      	ldr	r2, [pc, #92]	@ (8004e30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d00e      	beq.n	8004df6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004de0:	d009      	beq.n	8004df6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a13      	ldr	r2, [pc, #76]	@ (8004e34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d004      	beq.n	8004df6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a11      	ldr	r2, [pc, #68]	@ (8004e38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d10c      	bne.n	8004e10 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40012c00 	.word	0x40012c00
 8004e34:	40000400 	.word	0x40000400
 8004e38:	40014000 	.word	0x40014000

08004e3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e040      	b.n	8004f0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d106      	bne.n	8004ea0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7fb fd78 	bl	8000990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2224      	movs	r2, #36	@ 0x24
 8004ea4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0201 	bic.w	r2, r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f9e8 	bl	8005294 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f8af 	bl	8005028 <UART_SetConfig>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e01b      	b.n	8004f0c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ee2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ef2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0201 	orr.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 fa67 	bl	80053d8 <UART_CheckIdleState>
 8004f0a:	4603      	mov	r3, r0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08a      	sub	sp, #40	@ 0x28
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	603b      	str	r3, [r7, #0]
 8004f20:	4613      	mov	r3, r2
 8004f22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d177      	bne.n	800501c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <HAL_UART_Transmit+0x24>
 8004f32:	88fb      	ldrh	r3, [r7, #6]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d101      	bne.n	8004f3c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e070      	b.n	800501e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2221      	movs	r2, #33	@ 0x21
 8004f48:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f4a:	f7fb febd 	bl	8000cc8 <HAL_GetTick>
 8004f4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	88fa      	ldrh	r2, [r7, #6]
 8004f54:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	88fa      	ldrh	r2, [r7, #6]
 8004f5c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f68:	d108      	bne.n	8004f7c <HAL_UART_Transmit+0x68>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d104      	bne.n	8004f7c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004f72:	2300      	movs	r3, #0
 8004f74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	61bb      	str	r3, [r7, #24]
 8004f7a:	e003      	b.n	8004f84 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f80:	2300      	movs	r3, #0
 8004f82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f84:	e02f      	b.n	8004fe6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	2180      	movs	r1, #128	@ 0x80
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 fac9 	bl	8005528 <UART_WaitOnFlagUntilTimeout>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d004      	beq.n	8004fa6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e03b      	b.n	800501e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10b      	bne.n	8004fc4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	881a      	ldrh	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fb8:	b292      	uxth	r2, r2
 8004fba:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	3302      	adds	r3, #2
 8004fc0:	61bb      	str	r3, [r7, #24]
 8004fc2:	e007      	b.n	8004fd4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	781a      	ldrb	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1c9      	bne.n	8004f86 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	2140      	movs	r1, #64	@ 0x40
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 fa93 	bl	8005528 <UART_WaitOnFlagUntilTimeout>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d004      	beq.n	8005012 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2220      	movs	r2, #32
 800500c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e005      	b.n	800501e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2220      	movs	r2, #32
 8005016:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005018:	2300      	movs	r3, #0
 800501a:	e000      	b.n	800501e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800501c:	2302      	movs	r3, #2
  }
}
 800501e:	4618      	mov	r0, r3
 8005020:	3720      	adds	r7, #32
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b088      	sub	sp, #32
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005030:	2300      	movs	r3, #0
 8005032:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	431a      	orrs	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	4313      	orrs	r3, r2
 800504a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	4b8a      	ldr	r3, [pc, #552]	@ (800527c <UART_SetConfig+0x254>)
 8005054:	4013      	ands	r3, r2
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6812      	ldr	r2, [r2, #0]
 800505a:	6979      	ldr	r1, [r7, #20]
 800505c:	430b      	orrs	r3, r1
 800505e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	4313      	orrs	r3, r2
 8005084:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	430a      	orrs	r2, r1
 8005098:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a78      	ldr	r2, [pc, #480]	@ (8005280 <UART_SetConfig+0x258>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d120      	bne.n	80050e6 <UART_SetConfig+0xbe>
 80050a4:	4b77      	ldr	r3, [pc, #476]	@ (8005284 <UART_SetConfig+0x25c>)
 80050a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a8:	f003 0303 	and.w	r3, r3, #3
 80050ac:	2b03      	cmp	r3, #3
 80050ae:	d817      	bhi.n	80050e0 <UART_SetConfig+0xb8>
 80050b0:	a201      	add	r2, pc, #4	@ (adr r2, 80050b8 <UART_SetConfig+0x90>)
 80050b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b6:	bf00      	nop
 80050b8:	080050c9 	.word	0x080050c9
 80050bc:	080050d5 	.word	0x080050d5
 80050c0:	080050db 	.word	0x080050db
 80050c4:	080050cf 	.word	0x080050cf
 80050c8:	2300      	movs	r3, #0
 80050ca:	77fb      	strb	r3, [r7, #31]
 80050cc:	e01d      	b.n	800510a <UART_SetConfig+0xe2>
 80050ce:	2302      	movs	r3, #2
 80050d0:	77fb      	strb	r3, [r7, #31]
 80050d2:	e01a      	b.n	800510a <UART_SetConfig+0xe2>
 80050d4:	2304      	movs	r3, #4
 80050d6:	77fb      	strb	r3, [r7, #31]
 80050d8:	e017      	b.n	800510a <UART_SetConfig+0xe2>
 80050da:	2308      	movs	r3, #8
 80050dc:	77fb      	strb	r3, [r7, #31]
 80050de:	e014      	b.n	800510a <UART_SetConfig+0xe2>
 80050e0:	2310      	movs	r3, #16
 80050e2:	77fb      	strb	r3, [r7, #31]
 80050e4:	e011      	b.n	800510a <UART_SetConfig+0xe2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a67      	ldr	r2, [pc, #412]	@ (8005288 <UART_SetConfig+0x260>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d102      	bne.n	80050f6 <UART_SetConfig+0xce>
 80050f0:	2300      	movs	r3, #0
 80050f2:	77fb      	strb	r3, [r7, #31]
 80050f4:	e009      	b.n	800510a <UART_SetConfig+0xe2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a64      	ldr	r2, [pc, #400]	@ (800528c <UART_SetConfig+0x264>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d102      	bne.n	8005106 <UART_SetConfig+0xde>
 8005100:	2300      	movs	r3, #0
 8005102:	77fb      	strb	r3, [r7, #31]
 8005104:	e001      	b.n	800510a <UART_SetConfig+0xe2>
 8005106:	2310      	movs	r3, #16
 8005108:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005112:	d15a      	bne.n	80051ca <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005114:	7ffb      	ldrb	r3, [r7, #31]
 8005116:	2b08      	cmp	r3, #8
 8005118:	d827      	bhi.n	800516a <UART_SetConfig+0x142>
 800511a:	a201      	add	r2, pc, #4	@ (adr r2, 8005120 <UART_SetConfig+0xf8>)
 800511c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005120:	08005145 	.word	0x08005145
 8005124:	0800514d 	.word	0x0800514d
 8005128:	08005155 	.word	0x08005155
 800512c:	0800516b 	.word	0x0800516b
 8005130:	0800515b 	.word	0x0800515b
 8005134:	0800516b 	.word	0x0800516b
 8005138:	0800516b 	.word	0x0800516b
 800513c:	0800516b 	.word	0x0800516b
 8005140:	08005163 	.word	0x08005163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005144:	f7fe fe94 	bl	8003e70 <HAL_RCC_GetPCLK1Freq>
 8005148:	61b8      	str	r0, [r7, #24]
        break;
 800514a:	e013      	b.n	8005174 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800514c:	f7fe feb2 	bl	8003eb4 <HAL_RCC_GetPCLK2Freq>
 8005150:	61b8      	str	r0, [r7, #24]
        break;
 8005152:	e00f      	b.n	8005174 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005154:	4b4e      	ldr	r3, [pc, #312]	@ (8005290 <UART_SetConfig+0x268>)
 8005156:	61bb      	str	r3, [r7, #24]
        break;
 8005158:	e00c      	b.n	8005174 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800515a:	f7fe fe29 	bl	8003db0 <HAL_RCC_GetSysClockFreq>
 800515e:	61b8      	str	r0, [r7, #24]
        break;
 8005160:	e008      	b.n	8005174 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005162:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005166:	61bb      	str	r3, [r7, #24]
        break;
 8005168:	e004      	b.n	8005174 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800516a:	2300      	movs	r3, #0
 800516c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	77bb      	strb	r3, [r7, #30]
        break;
 8005172:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d074      	beq.n	8005264 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	005a      	lsls	r2, r3, #1
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	085b      	lsrs	r3, r3, #1
 8005184:	441a      	add	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	fbb2 f3f3 	udiv	r3, r2, r3
 800518e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	2b0f      	cmp	r3, #15
 8005194:	d916      	bls.n	80051c4 <UART_SetConfig+0x19c>
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800519c:	d212      	bcs.n	80051c4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	f023 030f 	bic.w	r3, r3, #15
 80051a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	085b      	lsrs	r3, r3, #1
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	f003 0307 	and.w	r3, r3, #7
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	89fb      	ldrh	r3, [r7, #14]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	89fa      	ldrh	r2, [r7, #14]
 80051c0:	60da      	str	r2, [r3, #12]
 80051c2:	e04f      	b.n	8005264 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	77bb      	strb	r3, [r7, #30]
 80051c8:	e04c      	b.n	8005264 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051ca:	7ffb      	ldrb	r3, [r7, #31]
 80051cc:	2b08      	cmp	r3, #8
 80051ce:	d828      	bhi.n	8005222 <UART_SetConfig+0x1fa>
 80051d0:	a201      	add	r2, pc, #4	@ (adr r2, 80051d8 <UART_SetConfig+0x1b0>)
 80051d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d6:	bf00      	nop
 80051d8:	080051fd 	.word	0x080051fd
 80051dc:	08005205 	.word	0x08005205
 80051e0:	0800520d 	.word	0x0800520d
 80051e4:	08005223 	.word	0x08005223
 80051e8:	08005213 	.word	0x08005213
 80051ec:	08005223 	.word	0x08005223
 80051f0:	08005223 	.word	0x08005223
 80051f4:	08005223 	.word	0x08005223
 80051f8:	0800521b 	.word	0x0800521b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051fc:	f7fe fe38 	bl	8003e70 <HAL_RCC_GetPCLK1Freq>
 8005200:	61b8      	str	r0, [r7, #24]
        break;
 8005202:	e013      	b.n	800522c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005204:	f7fe fe56 	bl	8003eb4 <HAL_RCC_GetPCLK2Freq>
 8005208:	61b8      	str	r0, [r7, #24]
        break;
 800520a:	e00f      	b.n	800522c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800520c:	4b20      	ldr	r3, [pc, #128]	@ (8005290 <UART_SetConfig+0x268>)
 800520e:	61bb      	str	r3, [r7, #24]
        break;
 8005210:	e00c      	b.n	800522c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005212:	f7fe fdcd 	bl	8003db0 <HAL_RCC_GetSysClockFreq>
 8005216:	61b8      	str	r0, [r7, #24]
        break;
 8005218:	e008      	b.n	800522c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800521a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800521e:	61bb      	str	r3, [r7, #24]
        break;
 8005220:	e004      	b.n	800522c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	77bb      	strb	r3, [r7, #30]
        break;
 800522a:	bf00      	nop
    }

    if (pclk != 0U)
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d018      	beq.n	8005264 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	085a      	lsrs	r2, r3, #1
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	441a      	add	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	fbb2 f3f3 	udiv	r3, r2, r3
 8005244:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	2b0f      	cmp	r3, #15
 800524a:	d909      	bls.n	8005260 <UART_SetConfig+0x238>
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005252:	d205      	bcs.n	8005260 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	b29a      	uxth	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	60da      	str	r2, [r3, #12]
 800525e:	e001      	b.n	8005264 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005270:	7fbb      	ldrb	r3, [r7, #30]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3720      	adds	r7, #32
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	efff69f3 	.word	0xefff69f3
 8005280:	40013800 	.word	0x40013800
 8005284:	40021000 	.word	0x40021000
 8005288:	40004400 	.word	0x40004400
 800528c:	40004800 	.word	0x40004800
 8005290:	007a1200 	.word	0x007a1200

08005294 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00a      	beq.n	80052be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00a      	beq.n	8005302 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005306:	f003 0304 	and.w	r3, r3, #4
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00a      	beq.n	8005324 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005328:	f003 0310 	and.w	r3, r3, #16
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00a      	beq.n	8005346 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534a:	f003 0320 	and.w	r3, r3, #32
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005370:	2b00      	cmp	r3, #0
 8005372:	d01a      	beq.n	80053aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005392:	d10a      	bne.n	80053aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	605a      	str	r2, [r3, #4]
  }
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b098      	sub	sp, #96	@ 0x60
 80053dc:	af02      	add	r7, sp, #8
 80053de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053e8:	f7fb fc6e 	bl	8000cc8 <HAL_GetTick>
 80053ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0308 	and.w	r3, r3, #8
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	d12e      	bne.n	800545a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005404:	2200      	movs	r2, #0
 8005406:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f88c 	bl	8005528 <UART_WaitOnFlagUntilTimeout>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d021      	beq.n	800545a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800541e:	e853 3f00 	ldrex	r3, [r3]
 8005422:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005426:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800542a:	653b      	str	r3, [r7, #80]	@ 0x50
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	461a      	mov	r2, r3
 8005432:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005434:	647b      	str	r3, [r7, #68]	@ 0x44
 8005436:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005438:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800543a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800543c:	e841 2300 	strex	r3, r2, [r1]
 8005440:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1e6      	bne.n	8005416 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2220      	movs	r2, #32
 800544c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e062      	b.n	8005520 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b04      	cmp	r3, #4
 8005466:	d149      	bne.n	80054fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005468:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005470:	2200      	movs	r2, #0
 8005472:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f856 	bl	8005528 <UART_WaitOnFlagUntilTimeout>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d03c      	beq.n	80054fc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548a:	e853 3f00 	ldrex	r3, [r3]
 800548e:	623b      	str	r3, [r7, #32]
   return(result);
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005496:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	461a      	mov	r2, r3
 800549e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80054a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054a8:	e841 2300 	strex	r3, r2, [r1]
 80054ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1e6      	bne.n	8005482 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	3308      	adds	r3, #8
 80054ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	e853 3f00 	ldrex	r3, [r3]
 80054c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f023 0301 	bic.w	r3, r3, #1
 80054ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3308      	adds	r3, #8
 80054d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054d4:	61fa      	str	r2, [r7, #28]
 80054d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d8:	69b9      	ldr	r1, [r7, #24]
 80054da:	69fa      	ldr	r2, [r7, #28]
 80054dc:	e841 2300 	strex	r3, r2, [r1]
 80054e0:	617b      	str	r3, [r7, #20]
   return(result);
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1e5      	bne.n	80054b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e011      	b.n	8005520 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2220      	movs	r2, #32
 8005500:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2220      	movs	r2, #32
 8005506:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3758      	adds	r7, #88	@ 0x58
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	603b      	str	r3, [r7, #0]
 8005534:	4613      	mov	r3, r2
 8005536:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005538:	e04f      	b.n	80055da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005540:	d04b      	beq.n	80055da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005542:	f7fb fbc1 	bl	8000cc8 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	429a      	cmp	r2, r3
 8005550:	d302      	bcc.n	8005558 <UART_WaitOnFlagUntilTimeout+0x30>
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e04e      	b.n	80055fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0304 	and.w	r3, r3, #4
 8005566:	2b00      	cmp	r3, #0
 8005568:	d037      	beq.n	80055da <UART_WaitOnFlagUntilTimeout+0xb2>
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2b80      	cmp	r3, #128	@ 0x80
 800556e:	d034      	beq.n	80055da <UART_WaitOnFlagUntilTimeout+0xb2>
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	2b40      	cmp	r3, #64	@ 0x40
 8005574:	d031      	beq.n	80055da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	f003 0308 	and.w	r3, r3, #8
 8005580:	2b08      	cmp	r3, #8
 8005582:	d110      	bne.n	80055a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2208      	movs	r2, #8
 800558a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 f838 	bl	8005602 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2208      	movs	r2, #8
 8005596:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e029      	b.n	80055fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	69db      	ldr	r3, [r3, #28]
 80055ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055b4:	d111      	bne.n	80055da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 f81e 	bl	8005602 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2220      	movs	r2, #32
 80055ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e00f      	b.n	80055fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69da      	ldr	r2, [r3, #28]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	4013      	ands	r3, r2
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	bf0c      	ite	eq
 80055ea:	2301      	moveq	r3, #1
 80055ec:	2300      	movne	r3, #0
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	461a      	mov	r2, r3
 80055f2:	79fb      	ldrb	r3, [r7, #7]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d0a0      	beq.n	800553a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005602:	b480      	push	{r7}
 8005604:	b095      	sub	sp, #84	@ 0x54
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005612:	e853 3f00 	ldrex	r3, [r3]
 8005616:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800561e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	461a      	mov	r2, r3
 8005626:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005628:	643b      	str	r3, [r7, #64]	@ 0x40
 800562a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800562e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005630:	e841 2300 	strex	r3, r2, [r1]
 8005634:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1e6      	bne.n	800560a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	3308      	adds	r3, #8
 8005642:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	e853 3f00 	ldrex	r3, [r3]
 800564a:	61fb      	str	r3, [r7, #28]
   return(result);
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	f023 0301 	bic.w	r3, r3, #1
 8005652:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3308      	adds	r3, #8
 800565a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800565c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800565e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005660:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005662:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005664:	e841 2300 	strex	r3, r2, [r1]
 8005668:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800566a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1e5      	bne.n	800563c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005674:	2b01      	cmp	r3, #1
 8005676:	d118      	bne.n	80056aa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	e853 3f00 	ldrex	r3, [r3]
 8005684:	60bb      	str	r3, [r7, #8]
   return(result);
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	f023 0310 	bic.w	r3, r3, #16
 800568c:	647b      	str	r3, [r7, #68]	@ 0x44
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	461a      	mov	r2, r3
 8005694:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005696:	61bb      	str	r3, [r7, #24]
 8005698:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569a:	6979      	ldr	r1, [r7, #20]
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	e841 2300 	strex	r3, r2, [r1]
 80056a2:	613b      	str	r3, [r7, #16]
   return(result);
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1e6      	bne.n	8005678 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2220      	movs	r2, #32
 80056ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80056be:	bf00      	nop
 80056c0:	3754      	adds	r7, #84	@ 0x54
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
	...

080056cc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056d2:	f3ef 8305 	mrs	r3, IPSR
 80056d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80056d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10f      	bne.n	80056fe <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056de:	f3ef 8310 	mrs	r3, PRIMASK
 80056e2:	607b      	str	r3, [r7, #4]
  return(result);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d109      	bne.n	80056fe <osKernelInitialize+0x32>
 80056ea:	4b11      	ldr	r3, [pc, #68]	@ (8005730 <osKernelInitialize+0x64>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d109      	bne.n	8005706 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056f2:	f3ef 8311 	mrs	r3, BASEPRI
 80056f6:	603b      	str	r3, [r7, #0]
  return(result);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80056fe:	f06f 0305 	mvn.w	r3, #5
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	e00c      	b.n	8005720 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005706:	4b0a      	ldr	r3, [pc, #40]	@ (8005730 <osKernelInitialize+0x64>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d105      	bne.n	800571a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800570e:	4b08      	ldr	r3, [pc, #32]	@ (8005730 <osKernelInitialize+0x64>)
 8005710:	2201      	movs	r2, #1
 8005712:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005714:	2300      	movs	r3, #0
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	e002      	b.n	8005720 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800571a:	f04f 33ff 	mov.w	r3, #4294967295
 800571e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005720:	68fb      	ldr	r3, [r7, #12]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	20000218 	.word	0x20000218

08005734 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800573a:	f3ef 8305 	mrs	r3, IPSR
 800573e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005740:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10f      	bne.n	8005766 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005746:	f3ef 8310 	mrs	r3, PRIMASK
 800574a:	607b      	str	r3, [r7, #4]
  return(result);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d109      	bne.n	8005766 <osKernelStart+0x32>
 8005752:	4b11      	ldr	r3, [pc, #68]	@ (8005798 <osKernelStart+0x64>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b02      	cmp	r3, #2
 8005758:	d109      	bne.n	800576e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800575a:	f3ef 8311 	mrs	r3, BASEPRI
 800575e:	603b      	str	r3, [r7, #0]
  return(result);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <osKernelStart+0x3a>
    stat = osErrorISR;
 8005766:	f06f 0305 	mvn.w	r3, #5
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	e00e      	b.n	800578c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800576e:	4b0a      	ldr	r3, [pc, #40]	@ (8005798 <osKernelStart+0x64>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d107      	bne.n	8005786 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005776:	4b08      	ldr	r3, [pc, #32]	@ (8005798 <osKernelStart+0x64>)
 8005778:	2202      	movs	r2, #2
 800577a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800577c:	f001 fc18 	bl	8006fb0 <vTaskStartScheduler>
      stat = osOK;
 8005780:	2300      	movs	r3, #0
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	e002      	b.n	800578c <osKernelStart+0x58>
    } else {
      stat = osError;
 8005786:	f04f 33ff 	mov.w	r3, #4294967295
 800578a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800578c:	68fb      	ldr	r3, [r7, #12]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	20000218 	.word	0x20000218

0800579c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800579c:	b580      	push	{r7, lr}
 800579e:	b092      	sub	sp, #72	@ 0x48
 80057a0:	af04      	add	r7, sp, #16
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80057a8:	2300      	movs	r3, #0
 80057aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057ac:	f3ef 8305 	mrs	r3, IPSR
 80057b0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80057b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f040 8094 	bne.w	80058e2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057ba:	f3ef 8310 	mrs	r3, PRIMASK
 80057be:	623b      	str	r3, [r7, #32]
  return(result);
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f040 808d 	bne.w	80058e2 <osThreadNew+0x146>
 80057c8:	4b48      	ldr	r3, [pc, #288]	@ (80058ec <osThreadNew+0x150>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d106      	bne.n	80057de <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057d0:	f3ef 8311 	mrs	r3, BASEPRI
 80057d4:	61fb      	str	r3, [r7, #28]
  return(result);
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f040 8082 	bne.w	80058e2 <osThreadNew+0x146>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d07e      	beq.n	80058e2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80057e4:	2380      	movs	r3, #128	@ 0x80
 80057e6:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80057e8:	2318      	movs	r3, #24
 80057ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 80057ec:	2300      	movs	r3, #0
 80057ee:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80057f0:	f107 031b 	add.w	r3, r7, #27
 80057f4:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 80057f6:	f04f 33ff 	mov.w	r3, #4294967295
 80057fa:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d045      	beq.n	800588e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <osThreadNew+0x74>
        name = attr->name;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800581e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005820:	2b00      	cmp	r3, #0
 8005822:	d008      	beq.n	8005836 <osThreadNew+0x9a>
 8005824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005826:	2b38      	cmp	r3, #56	@ 0x38
 8005828:	d805      	bhi.n	8005836 <osThreadNew+0x9a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <osThreadNew+0x9e>
        return (NULL);
 8005836:	2300      	movs	r3, #0
 8005838:	e054      	b.n	80058e4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	089b      	lsrs	r3, r3, #2
 8005848:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00e      	beq.n	8005870 <osThreadNew+0xd4>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	2ba7      	cmp	r3, #167	@ 0xa7
 8005858:	d90a      	bls.n	8005870 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800585e:	2b00      	cmp	r3, #0
 8005860:	d006      	beq.n	8005870 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d002      	beq.n	8005870 <osThreadNew+0xd4>
        mem = 1;
 800586a:	2301      	movs	r3, #1
 800586c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800586e:	e010      	b.n	8005892 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10c      	bne.n	8005892 <osThreadNew+0xf6>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d108      	bne.n	8005892 <osThreadNew+0xf6>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d104      	bne.n	8005892 <osThreadNew+0xf6>
          mem = 0;
 8005888:	2300      	movs	r3, #0
 800588a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800588c:	e001      	b.n	8005892 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800588e:	2300      	movs	r3, #0
 8005890:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8005892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005894:	2b01      	cmp	r3, #1
 8005896:	d110      	bne.n	80058ba <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80058a0:	9202      	str	r2, [sp, #8]
 80058a2:	9301      	str	r3, [sp, #4]
 80058a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058ac:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f001 f994 	bl	8006bdc <xTaskCreateStatic>
 80058b4:	4603      	mov	r3, r0
 80058b6:	617b      	str	r3, [r7, #20]
 80058b8:	e013      	b.n	80058e2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80058ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d110      	bne.n	80058e2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80058c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	f107 0314 	add.w	r3, r7, #20
 80058c8:	9301      	str	r3, [sp, #4]
 80058ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058cc:	9300      	str	r3, [sp, #0]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f001 f9e1 	bl	8006c9a <xTaskCreate>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d001      	beq.n	80058e2 <osThreadNew+0x146>
          hTask = NULL;
 80058de:	2300      	movs	r3, #0
 80058e0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80058e2:	697b      	ldr	r3, [r7, #20]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3738      	adds	r7, #56	@ 0x38
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	20000218 	.word	0x20000218

080058f0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058f8:	f3ef 8305 	mrs	r3, IPSR
 80058fc:	613b      	str	r3, [r7, #16]
  return(result);
 80058fe:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10f      	bne.n	8005924 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005904:	f3ef 8310 	mrs	r3, PRIMASK
 8005908:	60fb      	str	r3, [r7, #12]
  return(result);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d109      	bne.n	8005924 <osDelay+0x34>
 8005910:	4b0d      	ldr	r3, [pc, #52]	@ (8005948 <osDelay+0x58>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b02      	cmp	r3, #2
 8005916:	d109      	bne.n	800592c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005918:	f3ef 8311 	mrs	r3, BASEPRI
 800591c:	60bb      	str	r3, [r7, #8]
  return(result);
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d003      	beq.n	800592c <osDelay+0x3c>
    stat = osErrorISR;
 8005924:	f06f 0305 	mvn.w	r3, #5
 8005928:	617b      	str	r3, [r7, #20]
 800592a:	e007      	b.n	800593c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800592c:	2300      	movs	r3, #0
 800592e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d002      	beq.n	800593c <osDelay+0x4c>
      vTaskDelay(ticks);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f001 fb04 	bl	8006f44 <vTaskDelay>
    }
  }

  return (stat);
 800593c:	697b      	ldr	r3, [r7, #20]
}
 800593e:	4618      	mov	r0, r3
 8005940:	3718      	adds	r7, #24
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	20000218 	.word	0x20000218

0800594c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800594c:	b580      	push	{r7, lr}
 800594e:	b08a      	sub	sp, #40	@ 0x28
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005954:	2300      	movs	r3, #0
 8005956:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005958:	f3ef 8305 	mrs	r3, IPSR
 800595c:	613b      	str	r3, [r7, #16]
  return(result);
 800595e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8005960:	2b00      	cmp	r3, #0
 8005962:	f040 8085 	bne.w	8005a70 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005966:	f3ef 8310 	mrs	r3, PRIMASK
 800596a:	60fb      	str	r3, [r7, #12]
  return(result);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d17e      	bne.n	8005a70 <osMutexNew+0x124>
 8005972:	4b42      	ldr	r3, [pc, #264]	@ (8005a7c <osMutexNew+0x130>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b02      	cmp	r3, #2
 8005978:	d105      	bne.n	8005986 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800597a:	f3ef 8311 	mrs	r3, BASEPRI
 800597e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d174      	bne.n	8005a70 <osMutexNew+0x124>
    if (attr != NULL) {
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d003      	beq.n	8005994 <osMutexNew+0x48>
      type = attr->attr_bits;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	623b      	str	r3, [r7, #32]
 8005992:	e001      	b.n	8005998 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8005994:	2300      	movs	r3, #0
 8005996:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <osMutexNew+0x5c>
      rmtx = 1U;
 80059a2:	2301      	movs	r3, #1
 80059a4:	61fb      	str	r3, [r7, #28]
 80059a6:	e001      	b.n	80059ac <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	f003 0308 	and.w	r3, r3, #8
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d15c      	bne.n	8005a70 <osMutexNew+0x124>
      mem = -1;
 80059b6:	f04f 33ff 	mov.w	r3, #4294967295
 80059ba:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d015      	beq.n	80059ee <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d006      	beq.n	80059d8 <osMutexNew+0x8c>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	2b4f      	cmp	r3, #79	@ 0x4f
 80059d0:	d902      	bls.n	80059d8 <osMutexNew+0x8c>
          mem = 1;
 80059d2:	2301      	movs	r3, #1
 80059d4:	61bb      	str	r3, [r7, #24]
 80059d6:	e00c      	b.n	80059f2 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d108      	bne.n	80059f2 <osMutexNew+0xa6>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d104      	bne.n	80059f2 <osMutexNew+0xa6>
            mem = 0;
 80059e8:	2300      	movs	r3, #0
 80059ea:	61bb      	str	r3, [r7, #24]
 80059ec:	e001      	b.n	80059f2 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80059ee:	2300      	movs	r3, #0
 80059f0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d112      	bne.n	8005a1e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d007      	beq.n	8005a0e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	4619      	mov	r1, r3
 8005a04:	2004      	movs	r0, #4
 8005a06:	f000 fb4b 	bl	80060a0 <xQueueCreateMutexStatic>
 8005a0a:	6278      	str	r0, [r7, #36]	@ 0x24
 8005a0c:	e016      	b.n	8005a3c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	4619      	mov	r1, r3
 8005a14:	2001      	movs	r0, #1
 8005a16:	f000 fb43 	bl	80060a0 <xQueueCreateMutexStatic>
 8005a1a:	6278      	str	r0, [r7, #36]	@ 0x24
 8005a1c:	e00e      	b.n	8005a3c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10b      	bne.n	8005a3c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d004      	beq.n	8005a34 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8005a2a:	2004      	movs	r0, #4
 8005a2c:	f000 fb20 	bl	8006070 <xQueueCreateMutex>
 8005a30:	6278      	str	r0, [r7, #36]	@ 0x24
 8005a32:	e003      	b.n	8005a3c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8005a34:	2001      	movs	r0, #1
 8005a36:	f000 fb1b 	bl	8006070 <xQueueCreateMutex>
 8005a3a:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00c      	beq.n	8005a5c <osMutexNew+0x110>
        if (attr != NULL) {
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <osMutexNew+0x104>
          name = attr->name;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	617b      	str	r3, [r7, #20]
 8005a4e:	e001      	b.n	8005a54 <osMutexNew+0x108>
        } else {
          name = NULL;
 8005a50:	2300      	movs	r3, #0
 8005a52:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8005a54:	6979      	ldr	r1, [r7, #20]
 8005a56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005a58:	f001 f862 	bl	8006b20 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d006      	beq.n	8005a70 <osMutexNew+0x124>
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6a:	f043 0301 	orr.w	r3, r3, #1
 8005a6e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3728      	adds	r7, #40	@ 0x28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20000218 	.word	0x20000218

08005a80 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b088      	sub	sp, #32
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f023 0301 	bic.w	r3, r3, #1
 8005a90:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a9e:	f3ef 8305 	mrs	r3, IPSR
 8005aa2:	613b      	str	r3, [r7, #16]
  return(result);
 8005aa4:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10f      	bne.n	8005aca <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aaa:	f3ef 8310 	mrs	r3, PRIMASK
 8005aae:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d109      	bne.n	8005aca <osMutexAcquire+0x4a>
 8005ab6:	4b20      	ldr	r3, [pc, #128]	@ (8005b38 <osMutexAcquire+0xb8>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d109      	bne.n	8005ad2 <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005abe:	f3ef 8311 	mrs	r3, BASEPRI
 8005ac2:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8005aca:	f06f 0305 	mvn.w	r3, #5
 8005ace:	61fb      	str	r3, [r7, #28]
 8005ad0:	e02c      	b.n	8005b2c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d103      	bne.n	8005ae0 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8005ad8:	f06f 0303 	mvn.w	r3, #3
 8005adc:	61fb      	str	r3, [r7, #28]
 8005ade:	e025      	b.n	8005b2c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d011      	beq.n	8005b0a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005ae6:	6839      	ldr	r1, [r7, #0]
 8005ae8:	69b8      	ldr	r0, [r7, #24]
 8005aea:	f000 fb29 	bl	8006140 <xQueueTakeMutexRecursive>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d01b      	beq.n	8005b2c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8005afa:	f06f 0301 	mvn.w	r3, #1
 8005afe:	61fb      	str	r3, [r7, #28]
 8005b00:	e014      	b.n	8005b2c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8005b02:	f06f 0302 	mvn.w	r3, #2
 8005b06:	61fb      	str	r3, [r7, #28]
 8005b08:	e010      	b.n	8005b2c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005b0a:	6839      	ldr	r1, [r7, #0]
 8005b0c:	69b8      	ldr	r0, [r7, #24]
 8005b0e:	f000 fdcf 	bl	80066b0 <xQueueSemaphoreTake>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d009      	beq.n	8005b2c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8005b1e:	f06f 0301 	mvn.w	r3, #1
 8005b22:	61fb      	str	r3, [r7, #28]
 8005b24:	e002      	b.n	8005b2c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8005b26:	f06f 0302 	mvn.w	r3, #2
 8005b2a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005b2c:	69fb      	ldr	r3, [r7, #28]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3720      	adds	r7, #32
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20000218 	.word	0x20000218

08005b3c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b088      	sub	sp, #32
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f023 0301 	bic.w	r3, r3, #1
 8005b4a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8005b54:	2300      	movs	r3, #0
 8005b56:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b58:	f3ef 8305 	mrs	r3, IPSR
 8005b5c:	613b      	str	r3, [r7, #16]
  return(result);
 8005b5e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10f      	bne.n	8005b84 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b64:	f3ef 8310 	mrs	r3, PRIMASK
 8005b68:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d109      	bne.n	8005b84 <osMutexRelease+0x48>
 8005b70:	4b19      	ldr	r3, [pc, #100]	@ (8005bd8 <osMutexRelease+0x9c>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d109      	bne.n	8005b8c <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b78:	f3ef 8311 	mrs	r3, BASEPRI
 8005b7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d003      	beq.n	8005b8c <osMutexRelease+0x50>
    stat = osErrorISR;
 8005b84:	f06f 0305 	mvn.w	r3, #5
 8005b88:	61fb      	str	r3, [r7, #28]
 8005b8a:	e01f      	b.n	8005bcc <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d103      	bne.n	8005b9a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8005b92:	f06f 0303 	mvn.w	r3, #3
 8005b96:	61fb      	str	r3, [r7, #28]
 8005b98:	e018      	b.n	8005bcc <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d009      	beq.n	8005bb4 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005ba0:	69b8      	ldr	r0, [r7, #24]
 8005ba2:	f000 fa98 	bl	80060d6 <xQueueGiveMutexRecursive>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d00f      	beq.n	8005bcc <osMutexRelease+0x90>
        stat = osErrorResource;
 8005bac:	f06f 0302 	mvn.w	r3, #2
 8005bb0:	61fb      	str	r3, [r7, #28]
 8005bb2:	e00b      	b.n	8005bcc <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	2100      	movs	r1, #0
 8005bba:	69b8      	ldr	r0, [r7, #24]
 8005bbc:	f000 faf8 	bl	80061b0 <xQueueGenericSend>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d002      	beq.n	8005bcc <osMutexRelease+0x90>
        stat = osErrorResource;
 8005bc6:	f06f 0302 	mvn.w	r3, #2
 8005bca:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8005bcc:	69fb      	ldr	r3, [r7, #28]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3720      	adds	r7, #32
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	20000218 	.word	0x20000218

08005bdc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4a07      	ldr	r2, [pc, #28]	@ (8005c08 <vApplicationGetIdleTaskMemory+0x2c>)
 8005bec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	4a06      	ldr	r2, [pc, #24]	@ (8005c0c <vApplicationGetIdleTaskMemory+0x30>)
 8005bf2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2280      	movs	r2, #128	@ 0x80
 8005bf8:	601a      	str	r2, [r3, #0]
}
 8005bfa:	bf00      	nop
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	2000021c 	.word	0x2000021c
 8005c0c:	200002c4 	.word	0x200002c4

08005c10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4a07      	ldr	r2, [pc, #28]	@ (8005c3c <vApplicationGetTimerTaskMemory+0x2c>)
 8005c20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	4a06      	ldr	r2, [pc, #24]	@ (8005c40 <vApplicationGetTimerTaskMemory+0x30>)
 8005c26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c2e:	601a      	str	r2, [r3, #0]
}
 8005c30:	bf00      	nop
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	200004c4 	.word	0x200004c4
 8005c40:	2000056c 	.word	0x2000056c

08005c44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f103 0208 	add.w	r2, r3, #8
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f04f 32ff 	mov.w	r2, #4294967295
 8005c5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f103 0208 	add.w	r2, r3, #8
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f103 0208 	add.w	r2, r3, #8
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c92:	bf00      	nop
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b085      	sub	sp, #20
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
 8005ca6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	683a      	ldr	r2, [r7, #0]
 8005cc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	601a      	str	r2, [r3, #0]
}
 8005cda:	bf00      	nop
 8005cdc:	3714      	adds	r7, #20
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b085      	sub	sp, #20
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
 8005cee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfc:	d103      	bne.n	8005d06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	e00c      	b.n	8005d20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	3308      	adds	r3, #8
 8005d0a:	60fb      	str	r3, [r7, #12]
 8005d0c:	e002      	b.n	8005d14 <vListInsert+0x2e>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	60fb      	str	r3, [r7, #12]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d2f6      	bcs.n	8005d0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	1c5a      	adds	r2, r3, #1
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	601a      	str	r2, [r3, #0]
}
 8005d4c:	bf00      	nop
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	6892      	ldr	r2, [r2, #8]
 8005d6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	6852      	ldr	r2, [r2, #4]
 8005d78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d103      	bne.n	8005d8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	1e5a      	subs	r2, r3, #1
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10b      	bne.n	8005dd8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005dd2:	bf00      	nop
 8005dd4:	bf00      	nop
 8005dd6:	e7fd      	b.n	8005dd4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005dd8:	f002 fba6 	bl	8008528 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005de4:	68f9      	ldr	r1, [r7, #12]
 8005de6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005de8:	fb01 f303 	mul.w	r3, r1, r3
 8005dec:	441a      	add	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	68f9      	ldr	r1, [r7, #12]
 8005e0c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005e0e:	fb01 f303 	mul.w	r3, r1, r3
 8005e12:	441a      	add	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	22ff      	movs	r2, #255	@ 0xff
 8005e1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	22ff      	movs	r2, #255	@ 0xff
 8005e24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d114      	bne.n	8005e58 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d01a      	beq.n	8005e6c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	3310      	adds	r3, #16
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f001 fb5c 	bl	80074f8 <xTaskRemoveFromEventList>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d012      	beq.n	8005e6c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e46:	4b0d      	ldr	r3, [pc, #52]	@ (8005e7c <xQueueGenericReset+0xd0>)
 8005e48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e4c:	601a      	str	r2, [r3, #0]
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	f3bf 8f6f 	isb	sy
 8005e56:	e009      	b.n	8005e6c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	3310      	adds	r3, #16
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7ff fef1 	bl	8005c44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	3324      	adds	r3, #36	@ 0x24
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7ff feec 	bl	8005c44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e6c:	f002 fb8e 	bl	800858c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e70:	2301      	movs	r3, #1
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	e000ed04 	.word	0xe000ed04

08005e80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b08e      	sub	sp, #56	@ 0x38
 8005e84:	af02      	add	r7, sp, #8
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
 8005e8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10b      	bne.n	8005eac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005ea6:	bf00      	nop
 8005ea8:	bf00      	nop
 8005eaa:	e7fd      	b.n	8005ea8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10b      	bne.n	8005eca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb6:	f383 8811 	msr	BASEPRI, r3
 8005eba:	f3bf 8f6f 	isb	sy
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ec4:	bf00      	nop
 8005ec6:	bf00      	nop
 8005ec8:	e7fd      	b.n	8005ec6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <xQueueGenericCreateStatic+0x56>
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <xQueueGenericCreateStatic+0x5a>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e000      	b.n	8005edc <xQueueGenericCreateStatic+0x5c>
 8005eda:	2300      	movs	r3, #0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10b      	bne.n	8005ef8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	623b      	str	r3, [r7, #32]
}
 8005ef2:	bf00      	nop
 8005ef4:	bf00      	nop
 8005ef6:	e7fd      	b.n	8005ef4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d102      	bne.n	8005f04 <xQueueGenericCreateStatic+0x84>
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <xQueueGenericCreateStatic+0x88>
 8005f04:	2301      	movs	r3, #1
 8005f06:	e000      	b.n	8005f0a <xQueueGenericCreateStatic+0x8a>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10b      	bne.n	8005f26 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	61fb      	str	r3, [r7, #28]
}
 8005f20:	bf00      	nop
 8005f22:	bf00      	nop
 8005f24:	e7fd      	b.n	8005f22 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f26:	2350      	movs	r3, #80	@ 0x50
 8005f28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	2b50      	cmp	r3, #80	@ 0x50
 8005f2e:	d00b      	beq.n	8005f48 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f34:	f383 8811 	msr	BASEPRI, r3
 8005f38:	f3bf 8f6f 	isb	sy
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	61bb      	str	r3, [r7, #24]
}
 8005f42:	bf00      	nop
 8005f44:	bf00      	nop
 8005f46:	e7fd      	b.n	8005f44 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00d      	beq.n	8005f6e <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f5a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	4613      	mov	r3, r2
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	68b9      	ldr	r1, [r7, #8]
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 f844 	bl	8005ff6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3730      	adds	r7, #48	@ 0x30
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08a      	sub	sp, #40	@ 0x28
 8005f7c:	af02      	add	r7, sp, #8
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	4613      	mov	r3, r2
 8005f84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10b      	bne.n	8005fa4 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	613b      	str	r3, [r7, #16]
}
 8005f9e:	bf00      	nop
 8005fa0:	bf00      	nop
 8005fa2:	e7fd      	b.n	8005fa0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d102      	bne.n	8005fb0 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005faa:	2300      	movs	r3, #0
 8005fac:	61fb      	str	r3, [r7, #28]
 8005fae:	e004      	b.n	8005fba <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	fb02 f303 	mul.w	r3, r2, r3
 8005fb8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	3350      	adds	r3, #80	@ 0x50
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f002 fbd4 	bl	800876c <pvPortMalloc>
 8005fc4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00f      	beq.n	8005fec <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	3350      	adds	r3, #80	@ 0x50
 8005fd0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fda:	79fa      	ldrb	r2, [r7, #7]
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	68b9      	ldr	r1, [r7, #8]
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f000 f805 	bl	8005ff6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005fec:	69bb      	ldr	r3, [r7, #24]
	}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3720      	adds	r7, #32
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b084      	sub	sp, #16
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	60f8      	str	r0, [r7, #12]
 8005ffe:	60b9      	str	r1, [r7, #8]
 8006000:	607a      	str	r2, [r7, #4]
 8006002:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d103      	bne.n	8006012 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	e002      	b.n	8006018 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006024:	2101      	movs	r1, #1
 8006026:	69b8      	ldr	r0, [r7, #24]
 8006028:	f7ff fec0 	bl	8005dac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	78fa      	ldrb	r2, [r7, #3]
 8006030:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006034:	bf00      	nop
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00e      	beq.n	8006068 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800605c:	2300      	movs	r3, #0
 800605e:	2200      	movs	r2, #0
 8006060:	2100      	movs	r1, #0
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f8a4 	bl	80061b0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006068:	bf00      	nop
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	4603      	mov	r3, r0
 8006078:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800607a:	2301      	movs	r3, #1
 800607c:	617b      	str	r3, [r7, #20]
 800607e:	2300      	movs	r3, #0
 8006080:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006082:	79fb      	ldrb	r3, [r7, #7]
 8006084:	461a      	mov	r2, r3
 8006086:	6939      	ldr	r1, [r7, #16]
 8006088:	6978      	ldr	r0, [r7, #20]
 800608a:	f7ff ff75 	bl	8005f78 <xQueueGenericCreate>
 800608e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f7ff ffd3 	bl	800603c <prvInitialiseMutex>

		return pxNewQueue;
 8006096:	68fb      	ldr	r3, [r7, #12]
	}
 8006098:	4618      	mov	r0, r3
 800609a:	3718      	adds	r7, #24
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b088      	sub	sp, #32
 80060a4:	af02      	add	r7, sp, #8
 80060a6:	4603      	mov	r3, r0
 80060a8:	6039      	str	r1, [r7, #0]
 80060aa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80060ac:	2301      	movs	r3, #1
 80060ae:	617b      	str	r3, [r7, #20]
 80060b0:	2300      	movs	r3, #0
 80060b2:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80060b4:	79fb      	ldrb	r3, [r7, #7]
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	2200      	movs	r2, #0
 80060bc:	6939      	ldr	r1, [r7, #16]
 80060be:	6978      	ldr	r0, [r7, #20]
 80060c0:	f7ff fede 	bl	8005e80 <xQueueGenericCreateStatic>
 80060c4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f7ff ffb8 	bl	800603c <prvInitialiseMutex>

		return pxNewQueue;
 80060cc:	68fb      	ldr	r3, [r7, #12]
	}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3718      	adds	r7, #24
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80060d6:	b590      	push	{r4, r7, lr}
 80060d8:	b087      	sub	sp, #28
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10b      	bne.n	8006100 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80060e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ec:	f383 8811 	msr	BASEPRI, r3
 80060f0:	f3bf 8f6f 	isb	sy
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	60fb      	str	r3, [r7, #12]
}
 80060fa:	bf00      	nop
 80060fc:	bf00      	nop
 80060fe:	e7fd      	b.n	80060fc <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	685c      	ldr	r4, [r3, #4]
 8006104:	f001 fbc4 	bl	8007890 <xTaskGetCurrentTaskHandle>
 8006108:	4603      	mov	r3, r0
 800610a:	429c      	cmp	r4, r3
 800610c:	d111      	bne.n	8006132 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	1e5a      	subs	r2, r3, #1
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d105      	bne.n	800612c <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006120:	2300      	movs	r3, #0
 8006122:	2200      	movs	r2, #0
 8006124:	2100      	movs	r1, #0
 8006126:	6938      	ldr	r0, [r7, #16]
 8006128:	f000 f842 	bl	80061b0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800612c:	2301      	movs	r3, #1
 800612e:	617b      	str	r3, [r7, #20]
 8006130:	e001      	b.n	8006136 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006132:	2300      	movs	r3, #0
 8006134:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006136:	697b      	ldr	r3, [r7, #20]
	}
 8006138:	4618      	mov	r0, r3
 800613a:	371c      	adds	r7, #28
 800613c:	46bd      	mov	sp, r7
 800613e:	bd90      	pop	{r4, r7, pc}

08006140 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006140:	b590      	push	{r4, r7, lr}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10b      	bne.n	800616c <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8006154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006158:	f383 8811 	msr	BASEPRI, r3
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	60fb      	str	r3, [r7, #12]
}
 8006166:	bf00      	nop
 8006168:	bf00      	nop
 800616a:	e7fd      	b.n	8006168 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	685c      	ldr	r4, [r3, #4]
 8006170:	f001 fb8e 	bl	8007890 <xTaskGetCurrentTaskHandle>
 8006174:	4603      	mov	r3, r0
 8006176:	429c      	cmp	r4, r3
 8006178:	d107      	bne.n	800618a <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	1c5a      	adds	r2, r3, #1
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006184:	2301      	movs	r3, #1
 8006186:	617b      	str	r3, [r7, #20]
 8006188:	e00c      	b.n	80061a4 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800618a:	6839      	ldr	r1, [r7, #0]
 800618c:	6938      	ldr	r0, [r7, #16]
 800618e:	f000 fa8f 	bl	80066b0 <xQueueSemaphoreTake>
 8006192:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d004      	beq.n	80061a4 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	1c5a      	adds	r2, r3, #1
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80061a4:	697b      	ldr	r3, [r7, #20]
	}
 80061a6:	4618      	mov	r0, r3
 80061a8:	371c      	adds	r7, #28
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd90      	pop	{r4, r7, pc}
	...

080061b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08e      	sub	sp, #56	@ 0x38
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
 80061bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80061be:	2300      	movs	r3, #0
 80061c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80061c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10b      	bne.n	80061e4 <xQueueGenericSend+0x34>
	__asm volatile
 80061cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80061de:	bf00      	nop
 80061e0:	bf00      	nop
 80061e2:	e7fd      	b.n	80061e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d103      	bne.n	80061f2 <xQueueGenericSend+0x42>
 80061ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <xQueueGenericSend+0x46>
 80061f2:	2301      	movs	r3, #1
 80061f4:	e000      	b.n	80061f8 <xQueueGenericSend+0x48>
 80061f6:	2300      	movs	r3, #0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10b      	bne.n	8006214 <xQueueGenericSend+0x64>
	__asm volatile
 80061fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800620e:	bf00      	nop
 8006210:	bf00      	nop
 8006212:	e7fd      	b.n	8006210 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	2b02      	cmp	r3, #2
 8006218:	d103      	bne.n	8006222 <xQueueGenericSend+0x72>
 800621a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800621e:	2b01      	cmp	r3, #1
 8006220:	d101      	bne.n	8006226 <xQueueGenericSend+0x76>
 8006222:	2301      	movs	r3, #1
 8006224:	e000      	b.n	8006228 <xQueueGenericSend+0x78>
 8006226:	2300      	movs	r3, #0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10b      	bne.n	8006244 <xQueueGenericSend+0x94>
	__asm volatile
 800622c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006230:	f383 8811 	msr	BASEPRI, r3
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	623b      	str	r3, [r7, #32]
}
 800623e:	bf00      	nop
 8006240:	bf00      	nop
 8006242:	e7fd      	b.n	8006240 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006244:	f001 fb34 	bl	80078b0 <xTaskGetSchedulerState>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d102      	bne.n	8006254 <xQueueGenericSend+0xa4>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <xQueueGenericSend+0xa8>
 8006254:	2301      	movs	r3, #1
 8006256:	e000      	b.n	800625a <xQueueGenericSend+0xaa>
 8006258:	2300      	movs	r3, #0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10b      	bne.n	8006276 <xQueueGenericSend+0xc6>
	__asm volatile
 800625e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	61fb      	str	r3, [r7, #28]
}
 8006270:	bf00      	nop
 8006272:	bf00      	nop
 8006274:	e7fd      	b.n	8006272 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006276:	f002 f957 	bl	8008528 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800627a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800627e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006282:	429a      	cmp	r2, r3
 8006284:	d302      	bcc.n	800628c <xQueueGenericSend+0xdc>
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b02      	cmp	r3, #2
 800628a:	d129      	bne.n	80062e0 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800628c:	683a      	ldr	r2, [r7, #0]
 800628e:	68b9      	ldr	r1, [r7, #8]
 8006290:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006292:	f000 fb35 	bl	8006900 <prvCopyDataToQueue>
 8006296:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629c:	2b00      	cmp	r3, #0
 800629e:	d010      	beq.n	80062c2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a2:	3324      	adds	r3, #36	@ 0x24
 80062a4:	4618      	mov	r0, r3
 80062a6:	f001 f927 	bl	80074f8 <xTaskRemoveFromEventList>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d013      	beq.n	80062d8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80062b0:	4b3f      	ldr	r3, [pc, #252]	@ (80063b0 <xQueueGenericSend+0x200>)
 80062b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	f3bf 8f4f 	dsb	sy
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	e00a      	b.n	80062d8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80062c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d007      	beq.n	80062d8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80062c8:	4b39      	ldr	r3, [pc, #228]	@ (80063b0 <xQueueGenericSend+0x200>)
 80062ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062ce:	601a      	str	r2, [r3, #0]
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80062d8:	f002 f958 	bl	800858c <vPortExitCritical>
				return pdPASS;
 80062dc:	2301      	movs	r3, #1
 80062de:	e063      	b.n	80063a8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d103      	bne.n	80062ee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062e6:	f002 f951 	bl	800858c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	e05c      	b.n	80063a8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d106      	bne.n	8006302 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062f4:	f107 0314 	add.w	r3, r7, #20
 80062f8:	4618      	mov	r0, r3
 80062fa:	f001 f961 	bl	80075c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062fe:	2301      	movs	r3, #1
 8006300:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006302:	f002 f943 	bl	800858c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006306:	f000 fec3 	bl	8007090 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800630a:	f002 f90d 	bl	8008528 <vPortEnterCritical>
 800630e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006310:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006314:	b25b      	sxtb	r3, r3
 8006316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631a:	d103      	bne.n	8006324 <xQueueGenericSend+0x174>
 800631c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631e:	2200      	movs	r2, #0
 8006320:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006326:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800632a:	b25b      	sxtb	r3, r3
 800632c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006330:	d103      	bne.n	800633a <xQueueGenericSend+0x18a>
 8006332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006334:	2200      	movs	r2, #0
 8006336:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800633a:	f002 f927 	bl	800858c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800633e:	1d3a      	adds	r2, r7, #4
 8006340:	f107 0314 	add.w	r3, r7, #20
 8006344:	4611      	mov	r1, r2
 8006346:	4618      	mov	r0, r3
 8006348:	f001 f950 	bl	80075ec <xTaskCheckForTimeOut>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d124      	bne.n	800639c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006352:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006354:	f000 fbcc 	bl	8006af0 <prvIsQueueFull>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d018      	beq.n	8006390 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800635e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006360:	3310      	adds	r3, #16
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	4611      	mov	r1, r2
 8006366:	4618      	mov	r0, r3
 8006368:	f001 f874 	bl	8007454 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800636c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800636e:	f000 fb57 	bl	8006a20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006372:	f000 fe9b 	bl	80070ac <xTaskResumeAll>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	f47f af7c 	bne.w	8006276 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800637e:	4b0c      	ldr	r3, [pc, #48]	@ (80063b0 <xQueueGenericSend+0x200>)
 8006380:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006384:	601a      	str	r2, [r3, #0]
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	e772      	b.n	8006276 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006390:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006392:	f000 fb45 	bl	8006a20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006396:	f000 fe89 	bl	80070ac <xTaskResumeAll>
 800639a:	e76c      	b.n	8006276 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800639c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800639e:	f000 fb3f 	bl	8006a20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063a2:	f000 fe83 	bl	80070ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80063a6:	2300      	movs	r3, #0
		}
	}
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3738      	adds	r7, #56	@ 0x38
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	e000ed04 	.word	0xe000ed04

080063b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b08e      	sub	sp, #56	@ 0x38
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
 80063c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80063c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10b      	bne.n	80063e4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80063cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d0:	f383 8811 	msr	BASEPRI, r3
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80063de:	bf00      	nop
 80063e0:	bf00      	nop
 80063e2:	e7fd      	b.n	80063e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d103      	bne.n	80063f2 <xQueueGenericSendFromISR+0x3e>
 80063ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <xQueueGenericSendFromISR+0x42>
 80063f2:	2301      	movs	r3, #1
 80063f4:	e000      	b.n	80063f8 <xQueueGenericSendFromISR+0x44>
 80063f6:	2300      	movs	r3, #0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10b      	bne.n	8006414 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80063fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006400:	f383 8811 	msr	BASEPRI, r3
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	623b      	str	r3, [r7, #32]
}
 800640e:	bf00      	nop
 8006410:	bf00      	nop
 8006412:	e7fd      	b.n	8006410 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	2b02      	cmp	r3, #2
 8006418:	d103      	bne.n	8006422 <xQueueGenericSendFromISR+0x6e>
 800641a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800641e:	2b01      	cmp	r3, #1
 8006420:	d101      	bne.n	8006426 <xQueueGenericSendFromISR+0x72>
 8006422:	2301      	movs	r3, #1
 8006424:	e000      	b.n	8006428 <xQueueGenericSendFromISR+0x74>
 8006426:	2300      	movs	r3, #0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10b      	bne.n	8006444 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800642c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006430:	f383 8811 	msr	BASEPRI, r3
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	61fb      	str	r3, [r7, #28]
}
 800643e:	bf00      	nop
 8006440:	bf00      	nop
 8006442:	e7fd      	b.n	8006440 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006444:	f002 f950 	bl	80086e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006448:	f3ef 8211 	mrs	r2, BASEPRI
 800644c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006450:	f383 8811 	msr	BASEPRI, r3
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	61ba      	str	r2, [r7, #24]
 800645e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006460:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006462:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006466:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800646c:	429a      	cmp	r2, r3
 800646e:	d302      	bcc.n	8006476 <xQueueGenericSendFromISR+0xc2>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	2b02      	cmp	r3, #2
 8006474:	d12c      	bne.n	80064d0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006478:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800647c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006480:	683a      	ldr	r2, [r7, #0]
 8006482:	68b9      	ldr	r1, [r7, #8]
 8006484:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006486:	f000 fa3b 	bl	8006900 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800648a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800648e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006492:	d112      	bne.n	80064ba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006498:	2b00      	cmp	r3, #0
 800649a:	d016      	beq.n	80064ca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800649c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649e:	3324      	adds	r3, #36	@ 0x24
 80064a0:	4618      	mov	r0, r3
 80064a2:	f001 f829 	bl	80074f8 <xTaskRemoveFromEventList>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00e      	beq.n	80064ca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00b      	beq.n	80064ca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	601a      	str	r2, [r3, #0]
 80064b8:	e007      	b.n	80064ca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80064ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80064be:	3301      	adds	r3, #1
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	b25a      	sxtb	r2, r3
 80064c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80064ca:	2301      	movs	r3, #1
 80064cc:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80064ce:	e001      	b.n	80064d4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80064d0:	2300      	movs	r3, #0
 80064d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80064d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3738      	adds	r7, #56	@ 0x38
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
	...

080064ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b08c      	sub	sp, #48	@ 0x30
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80064f8:	2300      	movs	r3, #0
 80064fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10b      	bne.n	800651e <xQueueReceive+0x32>
	__asm volatile
 8006506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800650a:	f383 8811 	msr	BASEPRI, r3
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	623b      	str	r3, [r7, #32]
}
 8006518:	bf00      	nop
 800651a:	bf00      	nop
 800651c:	e7fd      	b.n	800651a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d103      	bne.n	800652c <xQueueReceive+0x40>
 8006524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006528:	2b00      	cmp	r3, #0
 800652a:	d101      	bne.n	8006530 <xQueueReceive+0x44>
 800652c:	2301      	movs	r3, #1
 800652e:	e000      	b.n	8006532 <xQueueReceive+0x46>
 8006530:	2300      	movs	r3, #0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10b      	bne.n	800654e <xQueueReceive+0x62>
	__asm volatile
 8006536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800653a:	f383 8811 	msr	BASEPRI, r3
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	f3bf 8f4f 	dsb	sy
 8006546:	61fb      	str	r3, [r7, #28]
}
 8006548:	bf00      	nop
 800654a:	bf00      	nop
 800654c:	e7fd      	b.n	800654a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800654e:	f001 f9af 	bl	80078b0 <xTaskGetSchedulerState>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d102      	bne.n	800655e <xQueueReceive+0x72>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <xQueueReceive+0x76>
 800655e:	2301      	movs	r3, #1
 8006560:	e000      	b.n	8006564 <xQueueReceive+0x78>
 8006562:	2300      	movs	r3, #0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10b      	bne.n	8006580 <xQueueReceive+0x94>
	__asm volatile
 8006568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800656c:	f383 8811 	msr	BASEPRI, r3
 8006570:	f3bf 8f6f 	isb	sy
 8006574:	f3bf 8f4f 	dsb	sy
 8006578:	61bb      	str	r3, [r7, #24]
}
 800657a:	bf00      	nop
 800657c:	bf00      	nop
 800657e:	e7fd      	b.n	800657c <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006580:	f001 ffd2 	bl	8008528 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006588:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800658a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658c:	2b00      	cmp	r3, #0
 800658e:	d01f      	beq.n	80065d0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006590:	68b9      	ldr	r1, [r7, #8]
 8006592:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006594:	f000 fa1e 	bl	80069d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659a:	1e5a      	subs	r2, r3, #1
 800659c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800659e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00f      	beq.n	80065c8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065aa:	3310      	adds	r3, #16
 80065ac:	4618      	mov	r0, r3
 80065ae:	f000 ffa3 	bl	80074f8 <xTaskRemoveFromEventList>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d007      	beq.n	80065c8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80065b8:	4b3c      	ldr	r3, [pc, #240]	@ (80066ac <xQueueReceive+0x1c0>)
 80065ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065be:	601a      	str	r2, [r3, #0]
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80065c8:	f001 ffe0 	bl	800858c <vPortExitCritical>
				return pdPASS;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e069      	b.n	80066a4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d103      	bne.n	80065de <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065d6:	f001 ffd9 	bl	800858c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80065da:	2300      	movs	r3, #0
 80065dc:	e062      	b.n	80066a4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d106      	bne.n	80065f2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065e4:	f107 0310 	add.w	r3, r7, #16
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 ffe9 	bl	80075c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065ee:	2301      	movs	r3, #1
 80065f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065f2:	f001 ffcb 	bl	800858c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065f6:	f000 fd4b 	bl	8007090 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065fa:	f001 ff95 	bl	8008528 <vPortEnterCritical>
 80065fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006600:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006604:	b25b      	sxtb	r3, r3
 8006606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800660a:	d103      	bne.n	8006614 <xQueueReceive+0x128>
 800660c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800660e:	2200      	movs	r2, #0
 8006610:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006616:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800661a:	b25b      	sxtb	r3, r3
 800661c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006620:	d103      	bne.n	800662a <xQueueReceive+0x13e>
 8006622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800662a:	f001 ffaf 	bl	800858c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800662e:	1d3a      	adds	r2, r7, #4
 8006630:	f107 0310 	add.w	r3, r7, #16
 8006634:	4611      	mov	r1, r2
 8006636:	4618      	mov	r0, r3
 8006638:	f000 ffd8 	bl	80075ec <xTaskCheckForTimeOut>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d123      	bne.n	800668a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006642:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006644:	f000 fa3e 	bl	8006ac4 <prvIsQueueEmpty>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d017      	beq.n	800667e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800664e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006650:	3324      	adds	r3, #36	@ 0x24
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	4611      	mov	r1, r2
 8006656:	4618      	mov	r0, r3
 8006658:	f000 fefc 	bl	8007454 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800665c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800665e:	f000 f9df 	bl	8006a20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006662:	f000 fd23 	bl	80070ac <xTaskResumeAll>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d189      	bne.n	8006580 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800666c:	4b0f      	ldr	r3, [pc, #60]	@ (80066ac <xQueueReceive+0x1c0>)
 800666e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	e780      	b.n	8006580 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800667e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006680:	f000 f9ce 	bl	8006a20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006684:	f000 fd12 	bl	80070ac <xTaskResumeAll>
 8006688:	e77a      	b.n	8006580 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800668a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800668c:	f000 f9c8 	bl	8006a20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006690:	f000 fd0c 	bl	80070ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006694:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006696:	f000 fa15 	bl	8006ac4 <prvIsQueueEmpty>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	f43f af6f 	beq.w	8006580 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80066a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3730      	adds	r7, #48	@ 0x30
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	e000ed04 	.word	0xe000ed04

080066b0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b08e      	sub	sp, #56	@ 0x38
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80066ba:	2300      	movs	r3, #0
 80066bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80066c2:	2300      	movs	r3, #0
 80066c4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80066c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10b      	bne.n	80066e4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80066cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d0:	f383 8811 	msr	BASEPRI, r3
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	623b      	str	r3, [r7, #32]
}
 80066de:	bf00      	nop
 80066e0:	bf00      	nop
 80066e2:	e7fd      	b.n	80066e0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80066e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00b      	beq.n	8006704 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80066ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f0:	f383 8811 	msr	BASEPRI, r3
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	61fb      	str	r3, [r7, #28]
}
 80066fe:	bf00      	nop
 8006700:	bf00      	nop
 8006702:	e7fd      	b.n	8006700 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006704:	f001 f8d4 	bl	80078b0 <xTaskGetSchedulerState>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d102      	bne.n	8006714 <xQueueSemaphoreTake+0x64>
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <xQueueSemaphoreTake+0x68>
 8006714:	2301      	movs	r3, #1
 8006716:	e000      	b.n	800671a <xQueueSemaphoreTake+0x6a>
 8006718:	2300      	movs	r3, #0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10b      	bne.n	8006736 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800671e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	61bb      	str	r3, [r7, #24]
}
 8006730:	bf00      	nop
 8006732:	bf00      	nop
 8006734:	e7fd      	b.n	8006732 <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006736:	f001 fef7 	bl	8008528 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800673a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800673c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800673e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006742:	2b00      	cmp	r3, #0
 8006744:	d024      	beq.n	8006790 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006748:	1e5a      	subs	r2, r3, #1
 800674a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800674c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800674e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d104      	bne.n	8006760 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006756:	f001 fa2f 	bl	8007bb8 <pvTaskIncrementMutexHeldCount>
 800675a:	4602      	mov	r2, r0
 800675c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800675e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00f      	beq.n	8006788 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800676a:	3310      	adds	r3, #16
 800676c:	4618      	mov	r0, r3
 800676e:	f000 fec3 	bl	80074f8 <xTaskRemoveFromEventList>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d007      	beq.n	8006788 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006778:	4b54      	ldr	r3, [pc, #336]	@ (80068cc <xQueueSemaphoreTake+0x21c>)
 800677a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800677e:	601a      	str	r2, [r3, #0]
 8006780:	f3bf 8f4f 	dsb	sy
 8006784:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006788:	f001 ff00 	bl	800858c <vPortExitCritical>
				return pdPASS;
 800678c:	2301      	movs	r3, #1
 800678e:	e098      	b.n	80068c2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d112      	bne.n	80067bc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00b      	beq.n	80067b4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800679c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a0:	f383 8811 	msr	BASEPRI, r3
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	617b      	str	r3, [r7, #20]
}
 80067ae:	bf00      	nop
 80067b0:	bf00      	nop
 80067b2:	e7fd      	b.n	80067b0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80067b4:	f001 feea 	bl	800858c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80067b8:	2300      	movs	r3, #0
 80067ba:	e082      	b.n	80068c2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d106      	bne.n	80067d0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067c2:	f107 030c 	add.w	r3, r7, #12
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 fefa 	bl	80075c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067cc:	2301      	movs	r3, #1
 80067ce:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067d0:	f001 fedc 	bl	800858c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067d4:	f000 fc5c 	bl	8007090 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067d8:	f001 fea6 	bl	8008528 <vPortEnterCritical>
 80067dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80067e2:	b25b      	sxtb	r3, r3
 80067e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e8:	d103      	bne.n	80067f2 <xQueueSemaphoreTake+0x142>
 80067ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067f8:	b25b      	sxtb	r3, r3
 80067fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fe:	d103      	bne.n	8006808 <xQueueSemaphoreTake+0x158>
 8006800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006802:	2200      	movs	r2, #0
 8006804:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006808:	f001 fec0 	bl	800858c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800680c:	463a      	mov	r2, r7
 800680e:	f107 030c 	add.w	r3, r7, #12
 8006812:	4611      	mov	r1, r2
 8006814:	4618      	mov	r0, r3
 8006816:	f000 fee9 	bl	80075ec <xTaskCheckForTimeOut>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d132      	bne.n	8006886 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006820:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006822:	f000 f94f 	bl	8006ac4 <prvIsQueueEmpty>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d026      	beq.n	800687a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800682c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d109      	bne.n	8006848 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006834:	f001 fe78 	bl	8008528 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	4618      	mov	r0, r3
 800683e:	f001 f855 	bl	80078ec <xTaskPriorityInherit>
 8006842:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006844:	f001 fea2 	bl	800858c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800684a:	3324      	adds	r3, #36	@ 0x24
 800684c:	683a      	ldr	r2, [r7, #0]
 800684e:	4611      	mov	r1, r2
 8006850:	4618      	mov	r0, r3
 8006852:	f000 fdff 	bl	8007454 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006856:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006858:	f000 f8e2 	bl	8006a20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800685c:	f000 fc26 	bl	80070ac <xTaskResumeAll>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	f47f af67 	bne.w	8006736 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006868:	4b18      	ldr	r3, [pc, #96]	@ (80068cc <xQueueSemaphoreTake+0x21c>)
 800686a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800686e:	601a      	str	r2, [r3, #0]
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	e75d      	b.n	8006736 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800687a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800687c:	f000 f8d0 	bl	8006a20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006880:	f000 fc14 	bl	80070ac <xTaskResumeAll>
 8006884:	e757      	b.n	8006736 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006886:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006888:	f000 f8ca 	bl	8006a20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800688c:	f000 fc0e 	bl	80070ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006890:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006892:	f000 f917 	bl	8006ac4 <prvIsQueueEmpty>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	f43f af4c 	beq.w	8006736 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800689e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00d      	beq.n	80068c0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80068a4:	f001 fe40 	bl	8008528 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80068a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80068aa:	f000 f811 	bl	80068d0 <prvGetDisinheritPriorityAfterTimeout>
 80068ae:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80068b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80068b6:	4618      	mov	r0, r3
 80068b8:	f001 f8f6 	bl	8007aa8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80068bc:	f001 fe66 	bl	800858c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80068c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3738      	adds	r7, #56	@ 0x38
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	e000ed04 	.word	0xe000ed04

080068d0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d006      	beq.n	80068ee <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80068ea:	60fb      	str	r3, [r7, #12]
 80068ec:	e001      	b.n	80068f2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80068ee:	2300      	movs	r3, #0
 80068f0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80068f2:	68fb      	ldr	r3, [r7, #12]
	}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800690c:	2300      	movs	r3, #0
 800690e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006914:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10d      	bne.n	800693a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d14d      	bne.n	80069c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	4618      	mov	r0, r3
 800692c:	f001 f84c 	bl	80079c8 <xTaskPriorityDisinherit>
 8006930:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	605a      	str	r2, [r3, #4]
 8006938:	e043      	b.n	80069c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d119      	bne.n	8006974 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6898      	ldr	r0, [r3, #8]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006948:	461a      	mov	r2, r3
 800694a:	68b9      	ldr	r1, [r7, #8]
 800694c:	f002 f998 	bl	8008c80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	689a      	ldr	r2, [r3, #8]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006958:	441a      	add	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	689a      	ldr	r2, [r3, #8]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	429a      	cmp	r2, r3
 8006968:	d32b      	bcc.n	80069c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	609a      	str	r2, [r3, #8]
 8006972:	e026      	b.n	80069c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	68d8      	ldr	r0, [r3, #12]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800697c:	461a      	mov	r2, r3
 800697e:	68b9      	ldr	r1, [r7, #8]
 8006980:	f002 f97e 	bl	8008c80 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	68da      	ldr	r2, [r3, #12]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800698c:	425b      	negs	r3, r3
 800698e:	441a      	add	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	68da      	ldr	r2, [r3, #12]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	429a      	cmp	r2, r3
 800699e:	d207      	bcs.n	80069b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a8:	425b      	negs	r3, r3
 80069aa:	441a      	add	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d105      	bne.n	80069c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d002      	beq.n	80069c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	3b01      	subs	r3, #1
 80069c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	1c5a      	adds	r2, r3, #1
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80069ca:	697b      	ldr	r3, [r7, #20]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3718      	adds	r7, #24
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d018      	beq.n	8006a18 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68da      	ldr	r2, [r3, #12]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ee:	441a      	add	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68da      	ldr	r2, [r3, #12]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d303      	bcc.n	8006a08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68d9      	ldr	r1, [r3, #12]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a10:	461a      	mov	r2, r3
 8006a12:	6838      	ldr	r0, [r7, #0]
 8006a14:	f002 f934 	bl	8008c80 <memcpy>
	}
}
 8006a18:	bf00      	nop
 8006a1a:	3708      	adds	r7, #8
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a28:	f001 fd7e 	bl	8008528 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a34:	e011      	b.n	8006a5a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d012      	beq.n	8006a64 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	3324      	adds	r3, #36	@ 0x24
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 fd58 	bl	80074f8 <xTaskRemoveFromEventList>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a4e:	f000 fe31 	bl	80076b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a52:	7bfb      	ldrb	r3, [r7, #15]
 8006a54:	3b01      	subs	r3, #1
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	dce9      	bgt.n	8006a36 <prvUnlockQueue+0x16>
 8006a62:	e000      	b.n	8006a66 <prvUnlockQueue+0x46>
					break;
 8006a64:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	22ff      	movs	r2, #255	@ 0xff
 8006a6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006a6e:	f001 fd8d 	bl	800858c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a72:	f001 fd59 	bl	8008528 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a7c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a7e:	e011      	b.n	8006aa4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d012      	beq.n	8006aae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	3310      	adds	r3, #16
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 fd33 	bl	80074f8 <xTaskRemoveFromEventList>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d001      	beq.n	8006a9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a98:	f000 fe0c 	bl	80076b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a9c:	7bbb      	ldrb	r3, [r7, #14]
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006aa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	dce9      	bgt.n	8006a80 <prvUnlockQueue+0x60>
 8006aac:	e000      	b.n	8006ab0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006aae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	22ff      	movs	r2, #255	@ 0xff
 8006ab4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006ab8:	f001 fd68 	bl	800858c <vPortExitCritical>
}
 8006abc:	bf00      	nop
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006acc:	f001 fd2c 	bl	8008528 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d102      	bne.n	8006ade <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	e001      	b.n	8006ae2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ae2:	f001 fd53 	bl	800858c <vPortExitCritical>

	return xReturn;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006af8:	f001 fd16 	bl	8008528 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d102      	bne.n	8006b0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	e001      	b.n	8006b12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b12:	f001 fd3b 	bl	800858c <vPortExitCritical>

	return xReturn;
 8006b16:	68fb      	ldr	r3, [r7, #12]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	60fb      	str	r3, [r7, #12]
 8006b2e:	e014      	b.n	8006b5a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006b30:	4a0f      	ldr	r2, [pc, #60]	@ (8006b70 <vQueueAddToRegistry+0x50>)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10b      	bne.n	8006b54 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006b3c:	490c      	ldr	r1, [pc, #48]	@ (8006b70 <vQueueAddToRegistry+0x50>)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	683a      	ldr	r2, [r7, #0]
 8006b42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006b46:	4a0a      	ldr	r2, [pc, #40]	@ (8006b70 <vQueueAddToRegistry+0x50>)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	00db      	lsls	r3, r3, #3
 8006b4c:	4413      	add	r3, r2
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006b52:	e006      	b.n	8006b62 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	3301      	adds	r3, #1
 8006b58:	60fb      	str	r3, [r7, #12]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2b07      	cmp	r3, #7
 8006b5e:	d9e7      	bls.n	8006b30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006b60:	bf00      	nop
 8006b62:	bf00      	nop
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	2000096c 	.word	0x2000096c

08006b74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006b84:	f001 fcd0 	bl	8008528 <vPortEnterCritical>
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b8e:	b25b      	sxtb	r3, r3
 8006b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b94:	d103      	bne.n	8006b9e <vQueueWaitForMessageRestricted+0x2a>
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ba4:	b25b      	sxtb	r3, r3
 8006ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006baa:	d103      	bne.n	8006bb4 <vQueueWaitForMessageRestricted+0x40>
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006bb4:	f001 fcea 	bl	800858c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d106      	bne.n	8006bce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	3324      	adds	r3, #36	@ 0x24
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	68b9      	ldr	r1, [r7, #8]
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f000 fc69 	bl	80074a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006bce:	6978      	ldr	r0, [r7, #20]
 8006bd0:	f7ff ff26 	bl	8006a20 <prvUnlockQueue>
	}
 8006bd4:	bf00      	nop
 8006bd6:	3718      	adds	r7, #24
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b08e      	sub	sp, #56	@ 0x38
 8006be0:	af04      	add	r7, sp, #16
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
 8006be8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10b      	bne.n	8006c08 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf4:	f383 8811 	msr	BASEPRI, r3
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	623b      	str	r3, [r7, #32]
}
 8006c02:	bf00      	nop
 8006c04:	bf00      	nop
 8006c06:	e7fd      	b.n	8006c04 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10b      	bne.n	8006c26 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	61fb      	str	r3, [r7, #28]
}
 8006c20:	bf00      	nop
 8006c22:	bf00      	nop
 8006c24:	e7fd      	b.n	8006c22 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c26:	23a8      	movs	r3, #168	@ 0xa8
 8006c28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	2ba8      	cmp	r3, #168	@ 0xa8
 8006c2e:	d00b      	beq.n	8006c48 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	61bb      	str	r3, [r7, #24]
}
 8006c42:	bf00      	nop
 8006c44:	bf00      	nop
 8006c46:	e7fd      	b.n	8006c44 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d01e      	beq.n	8006c8c <xTaskCreateStatic+0xb0>
 8006c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d01b      	beq.n	8006c8c <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c56:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c5c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c60:	2202      	movs	r2, #2
 8006c62:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c66:	2300      	movs	r3, #0
 8006c68:	9303      	str	r3, [sp, #12]
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6c:	9302      	str	r3, [sp, #8]
 8006c6e:	f107 0314 	add.w	r3, r7, #20
 8006c72:	9301      	str	r3, [sp, #4]
 8006c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	68b9      	ldr	r1, [r7, #8]
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f000 f850 	bl	8006d24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c84:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006c86:	f000 f8ed 	bl	8006e64 <prvAddNewTaskToReadyList>
 8006c8a:	e001      	b.n	8006c90 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c90:	697b      	ldr	r3, [r7, #20]
	}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3728      	adds	r7, #40	@ 0x28
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b08c      	sub	sp, #48	@ 0x30
 8006c9e:	af04      	add	r7, sp, #16
 8006ca0:	60f8      	str	r0, [r7, #12]
 8006ca2:	60b9      	str	r1, [r7, #8]
 8006ca4:	603b      	str	r3, [r7, #0]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006caa:	88fb      	ldrh	r3, [r7, #6]
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f001 fd5c 	bl	800876c <pvPortMalloc>
 8006cb4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00e      	beq.n	8006cda <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006cbc:	20a8      	movs	r0, #168	@ 0xa8
 8006cbe:	f001 fd55 	bl	800876c <pvPortMalloc>
 8006cc2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d003      	beq.n	8006cd2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	631a      	str	r2, [r3, #48]	@ 0x30
 8006cd0:	e005      	b.n	8006cde <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006cd2:	6978      	ldr	r0, [r7, #20]
 8006cd4:	f001 fe12 	bl	80088fc <vPortFree>
 8006cd8:	e001      	b.n	8006cde <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d017      	beq.n	8006d14 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006cec:	88fa      	ldrh	r2, [r7, #6]
 8006cee:	2300      	movs	r3, #0
 8006cf0:	9303      	str	r3, [sp, #12]
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	9302      	str	r3, [sp, #8]
 8006cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf8:	9301      	str	r3, [sp, #4]
 8006cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	68b9      	ldr	r1, [r7, #8]
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f000 f80e 	bl	8006d24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d08:	69f8      	ldr	r0, [r7, #28]
 8006d0a:	f000 f8ab 	bl	8006e64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	61bb      	str	r3, [r7, #24]
 8006d12:	e002      	b.n	8006d1a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006d14:	f04f 33ff 	mov.w	r3, #4294967295
 8006d18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006d1a:	69bb      	ldr	r3, [r7, #24]
	}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3720      	adds	r7, #32
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b088      	sub	sp, #32
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
 8006d30:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d34:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	21a5      	movs	r1, #165	@ 0xa5
 8006d3e:	f001 ff15 	bl	8008b6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	f023 0307 	bic.w	r3, r3, #7
 8006d5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	f003 0307 	and.w	r3, r3, #7
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00b      	beq.n	8006d7e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	617b      	str	r3, [r7, #20]
}
 8006d78:	bf00      	nop
 8006d7a:	bf00      	nop
 8006d7c:	e7fd      	b.n	8006d7a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d7e:	2300      	movs	r3, #0
 8006d80:	61fb      	str	r3, [r7, #28]
 8006d82:	e012      	b.n	8006daa <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	4413      	add	r3, r2
 8006d8a:	7819      	ldrb	r1, [r3, #0]
 8006d8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	4413      	add	r3, r2
 8006d92:	3334      	adds	r3, #52	@ 0x34
 8006d94:	460a      	mov	r2, r1
 8006d96:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006d98:	68ba      	ldr	r2, [r7, #8]
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d006      	beq.n	8006db2 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	3301      	adds	r3, #1
 8006da8:	61fb      	str	r3, [r7, #28]
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	2b0f      	cmp	r3, #15
 8006dae:	d9e9      	bls.n	8006d84 <prvInitialiseNewTask+0x60>
 8006db0:	e000      	b.n	8006db4 <prvInitialiseNewTask+0x90>
		{
			break;
 8006db2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dbe:	2b37      	cmp	r3, #55	@ 0x37
 8006dc0:	d901      	bls.n	8006dc6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006dc2:	2337      	movs	r3, #55	@ 0x37
 8006dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006dca:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006dd0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dda:	3304      	adds	r3, #4
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7fe ff51 	bl	8005c84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de4:	3318      	adds	r3, #24
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7fe ff4c 	bl	8005c84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006df0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e00:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e04:	2200      	movs	r2, #0
 8006e06:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e14:	3354      	adds	r3, #84	@ 0x54
 8006e16:	224c      	movs	r2, #76	@ 0x4c
 8006e18:	2100      	movs	r1, #0
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f001 fea6 	bl	8008b6c <memset>
 8006e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e22:	4a0d      	ldr	r2, [pc, #52]	@ (8006e58 <prvInitialiseNewTask+0x134>)
 8006e24:	659a      	str	r2, [r3, #88]	@ 0x58
 8006e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e28:	4a0c      	ldr	r2, [pc, #48]	@ (8006e5c <prvInitialiseNewTask+0x138>)
 8006e2a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2e:	4a0c      	ldr	r2, [pc, #48]	@ (8006e60 <prvInitialiseNewTask+0x13c>)
 8006e30:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	68f9      	ldr	r1, [r7, #12]
 8006e36:	69b8      	ldr	r0, [r7, #24]
 8006e38:	f001 fa46 	bl	80082c8 <pxPortInitialiseStack>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e40:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d002      	beq.n	8006e4e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e4e:	bf00      	nop
 8006e50:	3720      	adds	r7, #32
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	20001bf8 	.word	0x20001bf8
 8006e5c:	20001c60 	.word	0x20001c60
 8006e60:	20001cc8 	.word	0x20001cc8

08006e64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e6c:	f001 fb5c 	bl	8008528 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e70:	4b2d      	ldr	r3, [pc, #180]	@ (8006f28 <prvAddNewTaskToReadyList+0xc4>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3301      	adds	r3, #1
 8006e76:	4a2c      	ldr	r2, [pc, #176]	@ (8006f28 <prvAddNewTaskToReadyList+0xc4>)
 8006e78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e7a:	4b2c      	ldr	r3, [pc, #176]	@ (8006f2c <prvAddNewTaskToReadyList+0xc8>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d109      	bne.n	8006e96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e82:	4a2a      	ldr	r2, [pc, #168]	@ (8006f2c <prvAddNewTaskToReadyList+0xc8>)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e88:	4b27      	ldr	r3, [pc, #156]	@ (8006f28 <prvAddNewTaskToReadyList+0xc4>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d110      	bne.n	8006eb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e90:	f000 fc34 	bl	80076fc <prvInitialiseTaskLists>
 8006e94:	e00d      	b.n	8006eb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e96:	4b26      	ldr	r3, [pc, #152]	@ (8006f30 <prvAddNewTaskToReadyList+0xcc>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d109      	bne.n	8006eb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e9e:	4b23      	ldr	r3, [pc, #140]	@ (8006f2c <prvAddNewTaskToReadyList+0xc8>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d802      	bhi.n	8006eb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006eac:	4a1f      	ldr	r2, [pc, #124]	@ (8006f2c <prvAddNewTaskToReadyList+0xc8>)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006eb2:	4b20      	ldr	r3, [pc, #128]	@ (8006f34 <prvAddNewTaskToReadyList+0xd0>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	4a1e      	ldr	r2, [pc, #120]	@ (8006f34 <prvAddNewTaskToReadyList+0xd0>)
 8006eba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8006f34 <prvAddNewTaskToReadyList+0xd0>)
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8006f38 <prvAddNewTaskToReadyList+0xd4>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d903      	bls.n	8006ed8 <prvAddNewTaskToReadyList+0x74>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed4:	4a18      	ldr	r2, [pc, #96]	@ (8006f38 <prvAddNewTaskToReadyList+0xd4>)
 8006ed6:	6013      	str	r3, [r2, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006edc:	4613      	mov	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	4413      	add	r3, r2
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	4a15      	ldr	r2, [pc, #84]	@ (8006f3c <prvAddNewTaskToReadyList+0xd8>)
 8006ee6:	441a      	add	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	3304      	adds	r3, #4
 8006eec:	4619      	mov	r1, r3
 8006eee:	4610      	mov	r0, r2
 8006ef0:	f7fe fed5 	bl	8005c9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ef4:	f001 fb4a 	bl	800858c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8006f30 <prvAddNewTaskToReadyList+0xcc>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00e      	beq.n	8006f1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006f00:	4b0a      	ldr	r3, [pc, #40]	@ (8006f2c <prvAddNewTaskToReadyList+0xc8>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d207      	bcs.n	8006f1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8006f40 <prvAddNewTaskToReadyList+0xdc>)
 8006f10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f14:	601a      	str	r2, [r3, #0]
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f1e:	bf00      	nop
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	20000e80 	.word	0x20000e80
 8006f2c:	200009ac 	.word	0x200009ac
 8006f30:	20000e8c 	.word	0x20000e8c
 8006f34:	20000e9c 	.word	0x20000e9c
 8006f38:	20000e88 	.word	0x20000e88
 8006f3c:	200009b0 	.word	0x200009b0
 8006f40:	e000ed04 	.word	0xe000ed04

08006f44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d018      	beq.n	8006f88 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f56:	4b14      	ldr	r3, [pc, #80]	@ (8006fa8 <vTaskDelay+0x64>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00b      	beq.n	8006f76 <vTaskDelay+0x32>
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	60bb      	str	r3, [r7, #8]
}
 8006f70:	bf00      	nop
 8006f72:	bf00      	nop
 8006f74:	e7fd      	b.n	8006f72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006f76:	f000 f88b 	bl	8007090 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fe2f 	bl	8007be0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f82:	f000 f893 	bl	80070ac <xTaskResumeAll>
 8006f86:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d107      	bne.n	8006f9e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006f8e:	4b07      	ldr	r3, [pc, #28]	@ (8006fac <vTaskDelay+0x68>)
 8006f90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f94:	601a      	str	r2, [r3, #0]
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f9e:	bf00      	nop
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	20000ea8 	.word	0x20000ea8
 8006fac:	e000ed04 	.word	0xe000ed04

08006fb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b08a      	sub	sp, #40	@ 0x28
 8006fb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006fbe:	463a      	mov	r2, r7
 8006fc0:	1d39      	adds	r1, r7, #4
 8006fc2:	f107 0308 	add.w	r3, r7, #8
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fe fe08 	bl	8005bdc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006fcc:	6839      	ldr	r1, [r7, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	9202      	str	r2, [sp, #8]
 8006fd4:	9301      	str	r3, [sp, #4]
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	2300      	movs	r3, #0
 8006fdc:	460a      	mov	r2, r1
 8006fde:	4924      	ldr	r1, [pc, #144]	@ (8007070 <vTaskStartScheduler+0xc0>)
 8006fe0:	4824      	ldr	r0, [pc, #144]	@ (8007074 <vTaskStartScheduler+0xc4>)
 8006fe2:	f7ff fdfb 	bl	8006bdc <xTaskCreateStatic>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	4a23      	ldr	r2, [pc, #140]	@ (8007078 <vTaskStartScheduler+0xc8>)
 8006fea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006fec:	4b22      	ldr	r3, [pc, #136]	@ (8007078 <vTaskStartScheduler+0xc8>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	617b      	str	r3, [r7, #20]
 8006ff8:	e001      	b.n	8006ffe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d102      	bne.n	800700a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007004:	f000 fe40 	bl	8007c88 <xTimerCreateTimerTask>
 8007008:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d11b      	bne.n	8007048 <vTaskStartScheduler+0x98>
	__asm volatile
 8007010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	613b      	str	r3, [r7, #16]
}
 8007022:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007024:	4b15      	ldr	r3, [pc, #84]	@ (800707c <vTaskStartScheduler+0xcc>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3354      	adds	r3, #84	@ 0x54
 800702a:	4a15      	ldr	r2, [pc, #84]	@ (8007080 <vTaskStartScheduler+0xd0>)
 800702c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800702e:	4b15      	ldr	r3, [pc, #84]	@ (8007084 <vTaskStartScheduler+0xd4>)
 8007030:	f04f 32ff 	mov.w	r2, #4294967295
 8007034:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007036:	4b14      	ldr	r3, [pc, #80]	@ (8007088 <vTaskStartScheduler+0xd8>)
 8007038:	2201      	movs	r2, #1
 800703a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800703c:	4b13      	ldr	r3, [pc, #76]	@ (800708c <vTaskStartScheduler+0xdc>)
 800703e:	2200      	movs	r2, #0
 8007040:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007042:	f001 f9cd 	bl	80083e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007046:	e00f      	b.n	8007068 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704e:	d10b      	bne.n	8007068 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	60fb      	str	r3, [r7, #12]
}
 8007062:	bf00      	nop
 8007064:	bf00      	nop
 8007066:	e7fd      	b.n	8007064 <vTaskStartScheduler+0xb4>
}
 8007068:	bf00      	nop
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	080095a0 	.word	0x080095a0
 8007074:	080076cd 	.word	0x080076cd
 8007078:	20000ea4 	.word	0x20000ea4
 800707c:	200009ac 	.word	0x200009ac
 8007080:	20000010 	.word	0x20000010
 8007084:	20000ea0 	.word	0x20000ea0
 8007088:	20000e8c 	.word	0x20000e8c
 800708c:	20000e84 	.word	0x20000e84

08007090 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007090:	b480      	push	{r7}
 8007092:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007094:	4b04      	ldr	r3, [pc, #16]	@ (80070a8 <vTaskSuspendAll+0x18>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	3301      	adds	r3, #1
 800709a:	4a03      	ldr	r2, [pc, #12]	@ (80070a8 <vTaskSuspendAll+0x18>)
 800709c:	6013      	str	r3, [r2, #0]
}
 800709e:	bf00      	nop
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	20000ea8 	.word	0x20000ea8

080070ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80070b2:	2300      	movs	r3, #0
 80070b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80070b6:	2300      	movs	r3, #0
 80070b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80070ba:	4b42      	ldr	r3, [pc, #264]	@ (80071c4 <xTaskResumeAll+0x118>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10b      	bne.n	80070da <xTaskResumeAll+0x2e>
	__asm volatile
 80070c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c6:	f383 8811 	msr	BASEPRI, r3
 80070ca:	f3bf 8f6f 	isb	sy
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	603b      	str	r3, [r7, #0]
}
 80070d4:	bf00      	nop
 80070d6:	bf00      	nop
 80070d8:	e7fd      	b.n	80070d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80070da:	f001 fa25 	bl	8008528 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80070de:	4b39      	ldr	r3, [pc, #228]	@ (80071c4 <xTaskResumeAll+0x118>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	3b01      	subs	r3, #1
 80070e4:	4a37      	ldr	r2, [pc, #220]	@ (80071c4 <xTaskResumeAll+0x118>)
 80070e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070e8:	4b36      	ldr	r3, [pc, #216]	@ (80071c4 <xTaskResumeAll+0x118>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d162      	bne.n	80071b6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80070f0:	4b35      	ldr	r3, [pc, #212]	@ (80071c8 <xTaskResumeAll+0x11c>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d05e      	beq.n	80071b6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070f8:	e02f      	b.n	800715a <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80070fa:	4b34      	ldr	r3, [pc, #208]	@ (80071cc <xTaskResumeAll+0x120>)
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	3318      	adds	r3, #24
 8007106:	4618      	mov	r0, r3
 8007108:	f7fe fe26 	bl	8005d58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	3304      	adds	r3, #4
 8007110:	4618      	mov	r0, r3
 8007112:	f7fe fe21 	bl	8005d58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800711a:	4b2d      	ldr	r3, [pc, #180]	@ (80071d0 <xTaskResumeAll+0x124>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	429a      	cmp	r2, r3
 8007120:	d903      	bls.n	800712a <xTaskResumeAll+0x7e>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007126:	4a2a      	ldr	r2, [pc, #168]	@ (80071d0 <xTaskResumeAll+0x124>)
 8007128:	6013      	str	r3, [r2, #0]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800712e:	4613      	mov	r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4a27      	ldr	r2, [pc, #156]	@ (80071d4 <xTaskResumeAll+0x128>)
 8007138:	441a      	add	r2, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	3304      	adds	r3, #4
 800713e:	4619      	mov	r1, r3
 8007140:	4610      	mov	r0, r2
 8007142:	f7fe fdac 	bl	8005c9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800714a:	4b23      	ldr	r3, [pc, #140]	@ (80071d8 <xTaskResumeAll+0x12c>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007150:	429a      	cmp	r2, r3
 8007152:	d302      	bcc.n	800715a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007154:	4b21      	ldr	r3, [pc, #132]	@ (80071dc <xTaskResumeAll+0x130>)
 8007156:	2201      	movs	r2, #1
 8007158:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800715a:	4b1c      	ldr	r3, [pc, #112]	@ (80071cc <xTaskResumeAll+0x120>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1cb      	bne.n	80070fa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007168:	f000 fb6c 	bl	8007844 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800716c:	4b1c      	ldr	r3, [pc, #112]	@ (80071e0 <xTaskResumeAll+0x134>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d010      	beq.n	800719a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007178:	f000 f846 	bl	8007208 <xTaskIncrementTick>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d002      	beq.n	8007188 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007182:	4b16      	ldr	r3, [pc, #88]	@ (80071dc <xTaskResumeAll+0x130>)
 8007184:	2201      	movs	r2, #1
 8007186:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	3b01      	subs	r3, #1
 800718c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1f1      	bne.n	8007178 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8007194:	4b12      	ldr	r3, [pc, #72]	@ (80071e0 <xTaskResumeAll+0x134>)
 8007196:	2200      	movs	r2, #0
 8007198:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800719a:	4b10      	ldr	r3, [pc, #64]	@ (80071dc <xTaskResumeAll+0x130>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d009      	beq.n	80071b6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80071a2:	2301      	movs	r3, #1
 80071a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80071a6:	4b0f      	ldr	r3, [pc, #60]	@ (80071e4 <xTaskResumeAll+0x138>)
 80071a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071ac:	601a      	str	r2, [r3, #0]
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80071b6:	f001 f9e9 	bl	800858c <vPortExitCritical>

	return xAlreadyYielded;
 80071ba:	68bb      	ldr	r3, [r7, #8]
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3710      	adds	r7, #16
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	20000ea8 	.word	0x20000ea8
 80071c8:	20000e80 	.word	0x20000e80
 80071cc:	20000e40 	.word	0x20000e40
 80071d0:	20000e88 	.word	0x20000e88
 80071d4:	200009b0 	.word	0x200009b0
 80071d8:	200009ac 	.word	0x200009ac
 80071dc:	20000e94 	.word	0x20000e94
 80071e0:	20000e90 	.word	0x20000e90
 80071e4:	e000ed04 	.word	0xe000ed04

080071e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80071ee:	4b05      	ldr	r3, [pc, #20]	@ (8007204 <xTaskGetTickCount+0x1c>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80071f4:	687b      	ldr	r3, [r7, #4]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	20000e84 	.word	0x20000e84

08007208 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800720e:	2300      	movs	r3, #0
 8007210:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007212:	4b52      	ldr	r3, [pc, #328]	@ (800735c <xTaskIncrementTick+0x154>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	f040 808f 	bne.w	800733a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800721c:	4b50      	ldr	r3, [pc, #320]	@ (8007360 <xTaskIncrementTick+0x158>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	3301      	adds	r3, #1
 8007222:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007224:	4a4e      	ldr	r2, [pc, #312]	@ (8007360 <xTaskIncrementTick+0x158>)
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d121      	bne.n	8007274 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007230:	4b4c      	ldr	r3, [pc, #304]	@ (8007364 <xTaskIncrementTick+0x15c>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00b      	beq.n	8007252 <xTaskIncrementTick+0x4a>
	__asm volatile
 800723a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800723e:	f383 8811 	msr	BASEPRI, r3
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	603b      	str	r3, [r7, #0]
}
 800724c:	bf00      	nop
 800724e:	bf00      	nop
 8007250:	e7fd      	b.n	800724e <xTaskIncrementTick+0x46>
 8007252:	4b44      	ldr	r3, [pc, #272]	@ (8007364 <xTaskIncrementTick+0x15c>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	60fb      	str	r3, [r7, #12]
 8007258:	4b43      	ldr	r3, [pc, #268]	@ (8007368 <xTaskIncrementTick+0x160>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a41      	ldr	r2, [pc, #260]	@ (8007364 <xTaskIncrementTick+0x15c>)
 800725e:	6013      	str	r3, [r2, #0]
 8007260:	4a41      	ldr	r2, [pc, #260]	@ (8007368 <xTaskIncrementTick+0x160>)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6013      	str	r3, [r2, #0]
 8007266:	4b41      	ldr	r3, [pc, #260]	@ (800736c <xTaskIncrementTick+0x164>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	3301      	adds	r3, #1
 800726c:	4a3f      	ldr	r2, [pc, #252]	@ (800736c <xTaskIncrementTick+0x164>)
 800726e:	6013      	str	r3, [r2, #0]
 8007270:	f000 fae8 	bl	8007844 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007274:	4b3e      	ldr	r3, [pc, #248]	@ (8007370 <xTaskIncrementTick+0x168>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	693a      	ldr	r2, [r7, #16]
 800727a:	429a      	cmp	r2, r3
 800727c:	d34e      	bcc.n	800731c <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800727e:	4b39      	ldr	r3, [pc, #228]	@ (8007364 <xTaskIncrementTick+0x15c>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d101      	bne.n	800728c <xTaskIncrementTick+0x84>
 8007288:	2301      	movs	r3, #1
 800728a:	e000      	b.n	800728e <xTaskIncrementTick+0x86>
 800728c:	2300      	movs	r3, #0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d004      	beq.n	800729c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007292:	4b37      	ldr	r3, [pc, #220]	@ (8007370 <xTaskIncrementTick+0x168>)
 8007294:	f04f 32ff 	mov.w	r2, #4294967295
 8007298:	601a      	str	r2, [r3, #0]
					break;
 800729a:	e03f      	b.n	800731c <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800729c:	4b31      	ldr	r3, [pc, #196]	@ (8007364 <xTaskIncrementTick+0x15c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d203      	bcs.n	80072bc <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80072b4:	4a2e      	ldr	r2, [pc, #184]	@ (8007370 <xTaskIncrementTick+0x168>)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6013      	str	r3, [r2, #0]
						break;
 80072ba:	e02f      	b.n	800731c <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	3304      	adds	r3, #4
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7fe fd49 	bl	8005d58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d004      	beq.n	80072d8 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	3318      	adds	r3, #24
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7fe fd40 	bl	8005d58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072dc:	4b25      	ldr	r3, [pc, #148]	@ (8007374 <xTaskIncrementTick+0x16c>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d903      	bls.n	80072ec <xTaskIncrementTick+0xe4>
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e8:	4a22      	ldr	r2, [pc, #136]	@ (8007374 <xTaskIncrementTick+0x16c>)
 80072ea:	6013      	str	r3, [r2, #0]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072f0:	4613      	mov	r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	4413      	add	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4a1f      	ldr	r2, [pc, #124]	@ (8007378 <xTaskIncrementTick+0x170>)
 80072fa:	441a      	add	r2, r3
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	3304      	adds	r3, #4
 8007300:	4619      	mov	r1, r3
 8007302:	4610      	mov	r0, r2
 8007304:	f7fe fccb 	bl	8005c9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800730c:	4b1b      	ldr	r3, [pc, #108]	@ (800737c <xTaskIncrementTick+0x174>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007312:	429a      	cmp	r2, r3
 8007314:	d3b3      	bcc.n	800727e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007316:	2301      	movs	r3, #1
 8007318:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800731a:	e7b0      	b.n	800727e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800731c:	4b17      	ldr	r3, [pc, #92]	@ (800737c <xTaskIncrementTick+0x174>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007322:	4915      	ldr	r1, [pc, #84]	@ (8007378 <xTaskIncrementTick+0x170>)
 8007324:	4613      	mov	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	440b      	add	r3, r1
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d907      	bls.n	8007344 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007334:	2301      	movs	r3, #1
 8007336:	617b      	str	r3, [r7, #20]
 8007338:	e004      	b.n	8007344 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800733a:	4b11      	ldr	r3, [pc, #68]	@ (8007380 <xTaskIncrementTick+0x178>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3301      	adds	r3, #1
 8007340:	4a0f      	ldr	r2, [pc, #60]	@ (8007380 <xTaskIncrementTick+0x178>)
 8007342:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007344:	4b0f      	ldr	r3, [pc, #60]	@ (8007384 <xTaskIncrementTick+0x17c>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d001      	beq.n	8007350 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 800734c:	2301      	movs	r3, #1
 800734e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007350:	697b      	ldr	r3, [r7, #20]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3718      	adds	r7, #24
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	20000ea8 	.word	0x20000ea8
 8007360:	20000e84 	.word	0x20000e84
 8007364:	20000e38 	.word	0x20000e38
 8007368:	20000e3c 	.word	0x20000e3c
 800736c:	20000e98 	.word	0x20000e98
 8007370:	20000ea0 	.word	0x20000ea0
 8007374:	20000e88 	.word	0x20000e88
 8007378:	200009b0 	.word	0x200009b0
 800737c:	200009ac 	.word	0x200009ac
 8007380:	20000e90 	.word	0x20000e90
 8007384:	20000e94 	.word	0x20000e94

08007388 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800738e:	4b2b      	ldr	r3, [pc, #172]	@ (800743c <vTaskSwitchContext+0xb4>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d003      	beq.n	800739e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007396:	4b2a      	ldr	r3, [pc, #168]	@ (8007440 <vTaskSwitchContext+0xb8>)
 8007398:	2201      	movs	r2, #1
 800739a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800739c:	e047      	b.n	800742e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800739e:	4b28      	ldr	r3, [pc, #160]	@ (8007440 <vTaskSwitchContext+0xb8>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80073a4:	4b27      	ldr	r3, [pc, #156]	@ (8007444 <vTaskSwitchContext+0xbc>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	60fb      	str	r3, [r7, #12]
 80073aa:	e011      	b.n	80073d0 <vTaskSwitchContext+0x48>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10b      	bne.n	80073ca <vTaskSwitchContext+0x42>
	__asm volatile
 80073b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	607b      	str	r3, [r7, #4]
}
 80073c4:	bf00      	nop
 80073c6:	bf00      	nop
 80073c8:	e7fd      	b.n	80073c6 <vTaskSwitchContext+0x3e>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	3b01      	subs	r3, #1
 80073ce:	60fb      	str	r3, [r7, #12]
 80073d0:	491d      	ldr	r1, [pc, #116]	@ (8007448 <vTaskSwitchContext+0xc0>)
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	4613      	mov	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4413      	add	r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	440b      	add	r3, r1
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d0e3      	beq.n	80073ac <vTaskSwitchContext+0x24>
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	4613      	mov	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4a16      	ldr	r2, [pc, #88]	@ (8007448 <vTaskSwitchContext+0xc0>)
 80073f0:	4413      	add	r3, r2
 80073f2:	60bb      	str	r3, [r7, #8]
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	685a      	ldr	r2, [r3, #4]
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	605a      	str	r2, [r3, #4]
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	685a      	ldr	r2, [r3, #4]
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	3308      	adds	r3, #8
 8007406:	429a      	cmp	r2, r3
 8007408:	d104      	bne.n	8007414 <vTaskSwitchContext+0x8c>
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	685a      	ldr	r2, [r3, #4]
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	605a      	str	r2, [r3, #4]
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	4a0c      	ldr	r2, [pc, #48]	@ (800744c <vTaskSwitchContext+0xc4>)
 800741c:	6013      	str	r3, [r2, #0]
 800741e:	4a09      	ldr	r2, [pc, #36]	@ (8007444 <vTaskSwitchContext+0xbc>)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007424:	4b09      	ldr	r3, [pc, #36]	@ (800744c <vTaskSwitchContext+0xc4>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	3354      	adds	r3, #84	@ 0x54
 800742a:	4a09      	ldr	r2, [pc, #36]	@ (8007450 <vTaskSwitchContext+0xc8>)
 800742c:	6013      	str	r3, [r2, #0]
}
 800742e:	bf00      	nop
 8007430:	3714      	adds	r7, #20
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	20000ea8 	.word	0x20000ea8
 8007440:	20000e94 	.word	0x20000e94
 8007444:	20000e88 	.word	0x20000e88
 8007448:	200009b0 	.word	0x200009b0
 800744c:	200009ac 	.word	0x200009ac
 8007450:	20000010 	.word	0x20000010

08007454 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d10b      	bne.n	800747c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007468:	f383 8811 	msr	BASEPRI, r3
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	60fb      	str	r3, [r7, #12]
}
 8007476:	bf00      	nop
 8007478:	bf00      	nop
 800747a:	e7fd      	b.n	8007478 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800747c:	4b07      	ldr	r3, [pc, #28]	@ (800749c <vTaskPlaceOnEventList+0x48>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3318      	adds	r3, #24
 8007482:	4619      	mov	r1, r3
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f7fe fc2e 	bl	8005ce6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800748a:	2101      	movs	r1, #1
 800748c:	6838      	ldr	r0, [r7, #0]
 800748e:	f000 fba7 	bl	8007be0 <prvAddCurrentTaskToDelayedList>
}
 8007492:	bf00      	nop
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	200009ac 	.word	0x200009ac

080074a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b086      	sub	sp, #24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10b      	bne.n	80074ca <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80074b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b6:	f383 8811 	msr	BASEPRI, r3
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	617b      	str	r3, [r7, #20]
}
 80074c4:	bf00      	nop
 80074c6:	bf00      	nop
 80074c8:	e7fd      	b.n	80074c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074ca:	4b0a      	ldr	r3, [pc, #40]	@ (80074f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	3318      	adds	r3, #24
 80074d0:	4619      	mov	r1, r3
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f7fe fbe3 	bl	8005c9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d002      	beq.n	80074e4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80074de:	f04f 33ff 	mov.w	r3, #4294967295
 80074e2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80074e4:	6879      	ldr	r1, [r7, #4]
 80074e6:	68b8      	ldr	r0, [r7, #8]
 80074e8:	f000 fb7a 	bl	8007be0 <prvAddCurrentTaskToDelayedList>
	}
 80074ec:	bf00      	nop
 80074ee:	3718      	adds	r7, #24
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	200009ac 	.word	0x200009ac

080074f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10b      	bne.n	8007526 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	60fb      	str	r3, [r7, #12]
}
 8007520:	bf00      	nop
 8007522:	bf00      	nop
 8007524:	e7fd      	b.n	8007522 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	3318      	adds	r3, #24
 800752a:	4618      	mov	r0, r3
 800752c:	f7fe fc14 	bl	8005d58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007530:	4b1d      	ldr	r3, [pc, #116]	@ (80075a8 <xTaskRemoveFromEventList+0xb0>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d11d      	bne.n	8007574 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	3304      	adds	r3, #4
 800753c:	4618      	mov	r0, r3
 800753e:	f7fe fc0b 	bl	8005d58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007546:	4b19      	ldr	r3, [pc, #100]	@ (80075ac <xTaskRemoveFromEventList+0xb4>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	429a      	cmp	r2, r3
 800754c:	d903      	bls.n	8007556 <xTaskRemoveFromEventList+0x5e>
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007552:	4a16      	ldr	r2, [pc, #88]	@ (80075ac <xTaskRemoveFromEventList+0xb4>)
 8007554:	6013      	str	r3, [r2, #0]
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800755a:	4613      	mov	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	4413      	add	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4a13      	ldr	r2, [pc, #76]	@ (80075b0 <xTaskRemoveFromEventList+0xb8>)
 8007564:	441a      	add	r2, r3
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	3304      	adds	r3, #4
 800756a:	4619      	mov	r1, r3
 800756c:	4610      	mov	r0, r2
 800756e:	f7fe fb96 	bl	8005c9e <vListInsertEnd>
 8007572:	e005      	b.n	8007580 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	3318      	adds	r3, #24
 8007578:	4619      	mov	r1, r3
 800757a:	480e      	ldr	r0, [pc, #56]	@ (80075b4 <xTaskRemoveFromEventList+0xbc>)
 800757c:	f7fe fb8f 	bl	8005c9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007584:	4b0c      	ldr	r3, [pc, #48]	@ (80075b8 <xTaskRemoveFromEventList+0xc0>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758a:	429a      	cmp	r2, r3
 800758c:	d905      	bls.n	800759a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800758e:	2301      	movs	r3, #1
 8007590:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007592:	4b0a      	ldr	r3, [pc, #40]	@ (80075bc <xTaskRemoveFromEventList+0xc4>)
 8007594:	2201      	movs	r2, #1
 8007596:	601a      	str	r2, [r3, #0]
 8007598:	e001      	b.n	800759e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800759a:	2300      	movs	r3, #0
 800759c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800759e:	697b      	ldr	r3, [r7, #20]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3718      	adds	r7, #24
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	20000ea8 	.word	0x20000ea8
 80075ac:	20000e88 	.word	0x20000e88
 80075b0:	200009b0 	.word	0x200009b0
 80075b4:	20000e40 	.word	0x20000e40
 80075b8:	200009ac 	.word	0x200009ac
 80075bc:	20000e94 	.word	0x20000e94

080075c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80075c8:	4b06      	ldr	r3, [pc, #24]	@ (80075e4 <vTaskInternalSetTimeOutState+0x24>)
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80075d0:	4b05      	ldr	r3, [pc, #20]	@ (80075e8 <vTaskInternalSetTimeOutState+0x28>)
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	605a      	str	r2, [r3, #4]
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr
 80075e4:	20000e98 	.word	0x20000e98
 80075e8:	20000e84 	.word	0x20000e84

080075ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b088      	sub	sp, #32
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10b      	bne.n	8007614 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80075fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007600:	f383 8811 	msr	BASEPRI, r3
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	f3bf 8f4f 	dsb	sy
 800760c:	613b      	str	r3, [r7, #16]
}
 800760e:	bf00      	nop
 8007610:	bf00      	nop
 8007612:	e7fd      	b.n	8007610 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d10b      	bne.n	8007632 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800761a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761e:	f383 8811 	msr	BASEPRI, r3
 8007622:	f3bf 8f6f 	isb	sy
 8007626:	f3bf 8f4f 	dsb	sy
 800762a:	60fb      	str	r3, [r7, #12]
}
 800762c:	bf00      	nop
 800762e:	bf00      	nop
 8007630:	e7fd      	b.n	800762e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007632:	f000 ff79 	bl	8008528 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007636:	4b1d      	ldr	r3, [pc, #116]	@ (80076ac <xTaskCheckForTimeOut+0xc0>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	69ba      	ldr	r2, [r7, #24]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800764e:	d102      	bne.n	8007656 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007650:	2300      	movs	r3, #0
 8007652:	61fb      	str	r3, [r7, #28]
 8007654:	e023      	b.n	800769e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	4b15      	ldr	r3, [pc, #84]	@ (80076b0 <xTaskCheckForTimeOut+0xc4>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	429a      	cmp	r2, r3
 8007660:	d007      	beq.n	8007672 <xTaskCheckForTimeOut+0x86>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	69ba      	ldr	r2, [r7, #24]
 8007668:	429a      	cmp	r2, r3
 800766a:	d302      	bcc.n	8007672 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800766c:	2301      	movs	r3, #1
 800766e:	61fb      	str	r3, [r7, #28]
 8007670:	e015      	b.n	800769e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	429a      	cmp	r2, r3
 800767a:	d20b      	bcs.n	8007694 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	1ad2      	subs	r2, r2, r3
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f7ff ff99 	bl	80075c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800768e:	2300      	movs	r3, #0
 8007690:	61fb      	str	r3, [r7, #28]
 8007692:	e004      	b.n	800769e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	2200      	movs	r2, #0
 8007698:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800769a:	2301      	movs	r3, #1
 800769c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800769e:	f000 ff75 	bl	800858c <vPortExitCritical>

	return xReturn;
 80076a2:	69fb      	ldr	r3, [r7, #28]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3720      	adds	r7, #32
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	20000e84 	.word	0x20000e84
 80076b0:	20000e98 	.word	0x20000e98

080076b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80076b4:	b480      	push	{r7}
 80076b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80076b8:	4b03      	ldr	r3, [pc, #12]	@ (80076c8 <vTaskMissedYield+0x14>)
 80076ba:	2201      	movs	r2, #1
 80076bc:	601a      	str	r2, [r3, #0]
}
 80076be:	bf00      	nop
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr
 80076c8:	20000e94 	.word	0x20000e94

080076cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80076d4:	f000 f852 	bl	800777c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80076d8:	4b06      	ldr	r3, [pc, #24]	@ (80076f4 <prvIdleTask+0x28>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d9f9      	bls.n	80076d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80076e0:	4b05      	ldr	r3, [pc, #20]	@ (80076f8 <prvIdleTask+0x2c>)
 80076e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076e6:	601a      	str	r2, [r3, #0]
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80076f0:	e7f0      	b.n	80076d4 <prvIdleTask+0x8>
 80076f2:	bf00      	nop
 80076f4:	200009b0 	.word	0x200009b0
 80076f8:	e000ed04 	.word	0xe000ed04

080076fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007702:	2300      	movs	r3, #0
 8007704:	607b      	str	r3, [r7, #4]
 8007706:	e00c      	b.n	8007722 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	4613      	mov	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4413      	add	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4a12      	ldr	r2, [pc, #72]	@ (800775c <prvInitialiseTaskLists+0x60>)
 8007714:	4413      	add	r3, r2
 8007716:	4618      	mov	r0, r3
 8007718:	f7fe fa94 	bl	8005c44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	3301      	adds	r3, #1
 8007720:	607b      	str	r3, [r7, #4]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2b37      	cmp	r3, #55	@ 0x37
 8007726:	d9ef      	bls.n	8007708 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007728:	480d      	ldr	r0, [pc, #52]	@ (8007760 <prvInitialiseTaskLists+0x64>)
 800772a:	f7fe fa8b 	bl	8005c44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800772e:	480d      	ldr	r0, [pc, #52]	@ (8007764 <prvInitialiseTaskLists+0x68>)
 8007730:	f7fe fa88 	bl	8005c44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007734:	480c      	ldr	r0, [pc, #48]	@ (8007768 <prvInitialiseTaskLists+0x6c>)
 8007736:	f7fe fa85 	bl	8005c44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800773a:	480c      	ldr	r0, [pc, #48]	@ (800776c <prvInitialiseTaskLists+0x70>)
 800773c:	f7fe fa82 	bl	8005c44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007740:	480b      	ldr	r0, [pc, #44]	@ (8007770 <prvInitialiseTaskLists+0x74>)
 8007742:	f7fe fa7f 	bl	8005c44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007746:	4b0b      	ldr	r3, [pc, #44]	@ (8007774 <prvInitialiseTaskLists+0x78>)
 8007748:	4a05      	ldr	r2, [pc, #20]	@ (8007760 <prvInitialiseTaskLists+0x64>)
 800774a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800774c:	4b0a      	ldr	r3, [pc, #40]	@ (8007778 <prvInitialiseTaskLists+0x7c>)
 800774e:	4a05      	ldr	r2, [pc, #20]	@ (8007764 <prvInitialiseTaskLists+0x68>)
 8007750:	601a      	str	r2, [r3, #0]
}
 8007752:	bf00      	nop
 8007754:	3708      	adds	r7, #8
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	200009b0 	.word	0x200009b0
 8007760:	20000e10 	.word	0x20000e10
 8007764:	20000e24 	.word	0x20000e24
 8007768:	20000e40 	.word	0x20000e40
 800776c:	20000e54 	.word	0x20000e54
 8007770:	20000e6c 	.word	0x20000e6c
 8007774:	20000e38 	.word	0x20000e38
 8007778:	20000e3c 	.word	0x20000e3c

0800777c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007782:	e019      	b.n	80077b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007784:	f000 fed0 	bl	8008528 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007788:	4b10      	ldr	r3, [pc, #64]	@ (80077cc <prvCheckTasksWaitingTermination+0x50>)
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	3304      	adds	r3, #4
 8007794:	4618      	mov	r0, r3
 8007796:	f7fe fadf 	bl	8005d58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800779a:	4b0d      	ldr	r3, [pc, #52]	@ (80077d0 <prvCheckTasksWaitingTermination+0x54>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3b01      	subs	r3, #1
 80077a0:	4a0b      	ldr	r2, [pc, #44]	@ (80077d0 <prvCheckTasksWaitingTermination+0x54>)
 80077a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80077a4:	4b0b      	ldr	r3, [pc, #44]	@ (80077d4 <prvCheckTasksWaitingTermination+0x58>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	3b01      	subs	r3, #1
 80077aa:	4a0a      	ldr	r2, [pc, #40]	@ (80077d4 <prvCheckTasksWaitingTermination+0x58>)
 80077ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80077ae:	f000 feed 	bl	800858c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f810 	bl	80077d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077b8:	4b06      	ldr	r3, [pc, #24]	@ (80077d4 <prvCheckTasksWaitingTermination+0x58>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d1e1      	bne.n	8007784 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80077c0:	bf00      	nop
 80077c2:	bf00      	nop
 80077c4:	3708      	adds	r7, #8
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	20000e54 	.word	0x20000e54
 80077d0:	20000e80 	.word	0x20000e80
 80077d4:	20000e68 	.word	0x20000e68

080077d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	3354      	adds	r3, #84	@ 0x54
 80077e4:	4618      	mov	r0, r3
 80077e6:	f001 f9c9 	bl	8008b7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d108      	bne.n	8007806 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077f8:	4618      	mov	r0, r3
 80077fa:	f001 f87f 	bl	80088fc <vPortFree>
				vPortFree( pxTCB );
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f001 f87c 	bl	80088fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007804:	e019      	b.n	800783a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800780c:	2b01      	cmp	r3, #1
 800780e:	d103      	bne.n	8007818 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f001 f873 	bl	80088fc <vPortFree>
	}
 8007816:	e010      	b.n	800783a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800781e:	2b02      	cmp	r3, #2
 8007820:	d00b      	beq.n	800783a <prvDeleteTCB+0x62>
	__asm volatile
 8007822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007826:	f383 8811 	msr	BASEPRI, r3
 800782a:	f3bf 8f6f 	isb	sy
 800782e:	f3bf 8f4f 	dsb	sy
 8007832:	60fb      	str	r3, [r7, #12]
}
 8007834:	bf00      	nop
 8007836:	bf00      	nop
 8007838:	e7fd      	b.n	8007836 <prvDeleteTCB+0x5e>
	}
 800783a:	bf00      	nop
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
	...

08007844 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800784a:	4b0f      	ldr	r3, [pc, #60]	@ (8007888 <prvResetNextTaskUnblockTime+0x44>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d101      	bne.n	8007858 <prvResetNextTaskUnblockTime+0x14>
 8007854:	2301      	movs	r3, #1
 8007856:	e000      	b.n	800785a <prvResetNextTaskUnblockTime+0x16>
 8007858:	2300      	movs	r3, #0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d004      	beq.n	8007868 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800785e:	4b0b      	ldr	r3, [pc, #44]	@ (800788c <prvResetNextTaskUnblockTime+0x48>)
 8007860:	f04f 32ff 	mov.w	r2, #4294967295
 8007864:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007866:	e008      	b.n	800787a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007868:	4b07      	ldr	r3, [pc, #28]	@ (8007888 <prvResetNextTaskUnblockTime+0x44>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	4a05      	ldr	r2, [pc, #20]	@ (800788c <prvResetNextTaskUnblockTime+0x48>)
 8007878:	6013      	str	r3, [r2, #0]
}
 800787a:	bf00      	nop
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	20000e38 	.word	0x20000e38
 800788c:	20000ea0 	.word	0x20000ea0

08007890 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007896:	4b05      	ldr	r3, [pc, #20]	@ (80078ac <xTaskGetCurrentTaskHandle+0x1c>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800789c:	687b      	ldr	r3, [r7, #4]
	}
 800789e:	4618      	mov	r0, r3
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	200009ac 	.word	0x200009ac

080078b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80078b6:	4b0b      	ldr	r3, [pc, #44]	@ (80078e4 <xTaskGetSchedulerState+0x34>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d102      	bne.n	80078c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80078be:	2301      	movs	r3, #1
 80078c0:	607b      	str	r3, [r7, #4]
 80078c2:	e008      	b.n	80078d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078c4:	4b08      	ldr	r3, [pc, #32]	@ (80078e8 <xTaskGetSchedulerState+0x38>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d102      	bne.n	80078d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80078cc:	2302      	movs	r3, #2
 80078ce:	607b      	str	r3, [r7, #4]
 80078d0:	e001      	b.n	80078d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80078d2:	2300      	movs	r3, #0
 80078d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80078d6:	687b      	ldr	r3, [r7, #4]
	}
 80078d8:	4618      	mov	r0, r3
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr
 80078e4:	20000e8c 	.word	0x20000e8c
 80078e8:	20000ea8 	.word	0x20000ea8

080078ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80078f8:	2300      	movs	r3, #0
 80078fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d056      	beq.n	80079b0 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007906:	4b2d      	ldr	r3, [pc, #180]	@ (80079bc <xTaskPriorityInherit+0xd0>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800790c:	429a      	cmp	r2, r3
 800790e:	d246      	bcs.n	800799e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	2b00      	cmp	r3, #0
 8007916:	db06      	blt.n	8007926 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007918:	4b28      	ldr	r3, [pc, #160]	@ (80079bc <xTaskPriorityInherit+0xd0>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800791e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	6959      	ldr	r1, [r3, #20]
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800792e:	4613      	mov	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4413      	add	r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	4a22      	ldr	r2, [pc, #136]	@ (80079c0 <xTaskPriorityInherit+0xd4>)
 8007938:	4413      	add	r3, r2
 800793a:	4299      	cmp	r1, r3
 800793c:	d101      	bne.n	8007942 <xTaskPriorityInherit+0x56>
 800793e:	2301      	movs	r3, #1
 8007940:	e000      	b.n	8007944 <xTaskPriorityInherit+0x58>
 8007942:	2300      	movs	r3, #0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d022      	beq.n	800798e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	3304      	adds	r3, #4
 800794c:	4618      	mov	r0, r3
 800794e:	f7fe fa03 	bl	8005d58 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007952:	4b1a      	ldr	r3, [pc, #104]	@ (80079bc <xTaskPriorityInherit+0xd0>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007960:	4b18      	ldr	r3, [pc, #96]	@ (80079c4 <xTaskPriorityInherit+0xd8>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	429a      	cmp	r2, r3
 8007966:	d903      	bls.n	8007970 <xTaskPriorityInherit+0x84>
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800796c:	4a15      	ldr	r2, [pc, #84]	@ (80079c4 <xTaskPriorityInherit+0xd8>)
 800796e:	6013      	str	r3, [r2, #0]
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007974:	4613      	mov	r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	4413      	add	r3, r2
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	4a10      	ldr	r2, [pc, #64]	@ (80079c0 <xTaskPriorityInherit+0xd4>)
 800797e:	441a      	add	r2, r3
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	3304      	adds	r3, #4
 8007984:	4619      	mov	r1, r3
 8007986:	4610      	mov	r0, r2
 8007988:	f7fe f989 	bl	8005c9e <vListInsertEnd>
 800798c:	e004      	b.n	8007998 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800798e:	4b0b      	ldr	r3, [pc, #44]	@ (80079bc <xTaskPriorityInherit+0xd0>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007998:	2301      	movs	r3, #1
 800799a:	60fb      	str	r3, [r7, #12]
 800799c:	e008      	b.n	80079b0 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80079a2:	4b06      	ldr	r3, [pc, #24]	@ (80079bc <xTaskPriorityInherit+0xd0>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d201      	bcs.n	80079b0 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80079ac:	2301      	movs	r3, #1
 80079ae:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079b0:	68fb      	ldr	r3, [r7, #12]
	}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	200009ac 	.word	0x200009ac
 80079c0:	200009b0 	.word	0x200009b0
 80079c4:	20000e88 	.word	0x20000e88

080079c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80079d4:	2300      	movs	r3, #0
 80079d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d058      	beq.n	8007a90 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80079de:	4b2f      	ldr	r3, [pc, #188]	@ (8007a9c <xTaskPriorityDisinherit+0xd4>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	693a      	ldr	r2, [r7, #16]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d00b      	beq.n	8007a00 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80079e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ec:	f383 8811 	msr	BASEPRI, r3
 80079f0:	f3bf 8f6f 	isb	sy
 80079f4:	f3bf 8f4f 	dsb	sy
 80079f8:	60fb      	str	r3, [r7, #12]
}
 80079fa:	bf00      	nop
 80079fc:	bf00      	nop
 80079fe:	e7fd      	b.n	80079fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10b      	bne.n	8007a20 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a0c:	f383 8811 	msr	BASEPRI, r3
 8007a10:	f3bf 8f6f 	isb	sy
 8007a14:	f3bf 8f4f 	dsb	sy
 8007a18:	60bb      	str	r3, [r7, #8]
}
 8007a1a:	bf00      	nop
 8007a1c:	bf00      	nop
 8007a1e:	e7fd      	b.n	8007a1c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a24:	1e5a      	subs	r2, r3, #1
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d02c      	beq.n	8007a90 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d128      	bne.n	8007a90 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	3304      	adds	r3, #4
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7fe f988 	bl	8005d58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a54:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a60:	4b0f      	ldr	r3, [pc, #60]	@ (8007aa0 <xTaskPriorityDisinherit+0xd8>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d903      	bls.n	8007a70 <xTaskPriorityDisinherit+0xa8>
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a6c:	4a0c      	ldr	r2, [pc, #48]	@ (8007aa0 <xTaskPriorityDisinherit+0xd8>)
 8007a6e:	6013      	str	r3, [r2, #0]
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a74:	4613      	mov	r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	4413      	add	r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	4a09      	ldr	r2, [pc, #36]	@ (8007aa4 <xTaskPriorityDisinherit+0xdc>)
 8007a7e:	441a      	add	r2, r3
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	3304      	adds	r3, #4
 8007a84:	4619      	mov	r1, r3
 8007a86:	4610      	mov	r0, r2
 8007a88:	f7fe f909 	bl	8005c9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a90:	697b      	ldr	r3, [r7, #20]
	}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3718      	adds	r7, #24
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	200009ac 	.word	0x200009ac
 8007aa0:	20000e88 	.word	0x20000e88
 8007aa4:	200009b0 	.word	0x200009b0

08007aa8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b088      	sub	sp, #32
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d071      	beq.n	8007ba4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10b      	bne.n	8007ae0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007acc:	f383 8811 	msr	BASEPRI, r3
 8007ad0:	f3bf 8f6f 	isb	sy
 8007ad4:	f3bf 8f4f 	dsb	sy
 8007ad8:	60fb      	str	r3, [r7, #12]
}
 8007ada:	bf00      	nop
 8007adc:	bf00      	nop
 8007ade:	e7fd      	b.n	8007adc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ae4:	683a      	ldr	r2, [r7, #0]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d902      	bls.n	8007af0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	61fb      	str	r3, [r7, #28]
 8007aee:	e002      	b.n	8007af6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007af4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007afa:	69fa      	ldr	r2, [r7, #28]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d051      	beq.n	8007ba4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b04:	697a      	ldr	r2, [r7, #20]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d14c      	bne.n	8007ba4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007b0a:	4b28      	ldr	r3, [pc, #160]	@ (8007bac <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	69ba      	ldr	r2, [r7, #24]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d10b      	bne.n	8007b2c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b18:	f383 8811 	msr	BASEPRI, r3
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	60bb      	str	r3, [r7, #8]
}
 8007b26:	bf00      	nop
 8007b28:	bf00      	nop
 8007b2a:	e7fd      	b.n	8007b28 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b30:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	69fa      	ldr	r2, [r7, #28]
 8007b36:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	699b      	ldr	r3, [r3, #24]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	db04      	blt.n	8007b4a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	6959      	ldr	r1, [r3, #20]
 8007b4e:	693a      	ldr	r2, [r7, #16]
 8007b50:	4613      	mov	r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	4413      	add	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4a15      	ldr	r2, [pc, #84]	@ (8007bb0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007b5a:	4413      	add	r3, r2
 8007b5c:	4299      	cmp	r1, r3
 8007b5e:	d101      	bne.n	8007b64 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8007b60:	2301      	movs	r3, #1
 8007b62:	e000      	b.n	8007b66 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8007b64:	2300      	movs	r3, #0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d01c      	beq.n	8007ba4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	3304      	adds	r3, #4
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7fe f8f2 	bl	8005d58 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b78:	4b0e      	ldr	r3, [pc, #56]	@ (8007bb4 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d903      	bls.n	8007b88 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b84:	4a0b      	ldr	r2, [pc, #44]	@ (8007bb4 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8007b86:	6013      	str	r3, [r2, #0]
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4a06      	ldr	r2, [pc, #24]	@ (8007bb0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007b96:	441a      	add	r2, r3
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	4610      	mov	r0, r2
 8007ba0:	f7fe f87d 	bl	8005c9e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ba4:	bf00      	nop
 8007ba6:	3720      	adds	r7, #32
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	200009ac 	.word	0x200009ac
 8007bb0:	200009b0 	.word	0x200009b0
 8007bb4:	20000e88 	.word	0x20000e88

08007bb8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007bb8:	b480      	push	{r7}
 8007bba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007bbc:	4b07      	ldr	r3, [pc, #28]	@ (8007bdc <pvTaskIncrementMutexHeldCount+0x24>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d004      	beq.n	8007bce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007bc4:	4b05      	ldr	r3, [pc, #20]	@ (8007bdc <pvTaskIncrementMutexHeldCount+0x24>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007bca:	3201      	adds	r2, #1
 8007bcc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007bce:	4b03      	ldr	r3, [pc, #12]	@ (8007bdc <pvTaskIncrementMutexHeldCount+0x24>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
	}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr
 8007bdc:	200009ac 	.word	0x200009ac

08007be0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007bea:	4b21      	ldr	r3, [pc, #132]	@ (8007c70 <prvAddCurrentTaskToDelayedList+0x90>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bf0:	4b20      	ldr	r3, [pc, #128]	@ (8007c74 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	3304      	adds	r3, #4
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fe f8ae 	bl	8005d58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c02:	d10a      	bne.n	8007c1a <prvAddCurrentTaskToDelayedList+0x3a>
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d007      	beq.n	8007c1a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8007c74 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	3304      	adds	r3, #4
 8007c10:	4619      	mov	r1, r3
 8007c12:	4819      	ldr	r0, [pc, #100]	@ (8007c78 <prvAddCurrentTaskToDelayedList+0x98>)
 8007c14:	f7fe f843 	bl	8005c9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c18:	e026      	b.n	8007c68 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4413      	add	r3, r2
 8007c20:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c22:	4b14      	ldr	r3, [pc, #80]	@ (8007c74 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68ba      	ldr	r2, [r7, #8]
 8007c28:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c2a:	68ba      	ldr	r2, [r7, #8]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d209      	bcs.n	8007c46 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c32:	4b12      	ldr	r3, [pc, #72]	@ (8007c7c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	4b0f      	ldr	r3, [pc, #60]	@ (8007c74 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	4610      	mov	r0, r2
 8007c40:	f7fe f851 	bl	8005ce6 <vListInsert>
}
 8007c44:	e010      	b.n	8007c68 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c46:	4b0e      	ldr	r3, [pc, #56]	@ (8007c80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8007c74 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	3304      	adds	r3, #4
 8007c50:	4619      	mov	r1, r3
 8007c52:	4610      	mov	r0, r2
 8007c54:	f7fe f847 	bl	8005ce6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c58:	4b0a      	ldr	r3, [pc, #40]	@ (8007c84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d202      	bcs.n	8007c68 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007c62:	4a08      	ldr	r2, [pc, #32]	@ (8007c84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	6013      	str	r3, [r2, #0]
}
 8007c68:	bf00      	nop
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	20000e84 	.word	0x20000e84
 8007c74:	200009ac 	.word	0x200009ac
 8007c78:	20000e6c 	.word	0x20000e6c
 8007c7c:	20000e3c 	.word	0x20000e3c
 8007c80:	20000e38 	.word	0x20000e38
 8007c84:	20000ea0 	.word	0x20000ea0

08007c88 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b08a      	sub	sp, #40	@ 0x28
 8007c8c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007c92:	f000 fad9 	bl	8008248 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007c96:	4b1d      	ldr	r3, [pc, #116]	@ (8007d0c <xTimerCreateTimerTask+0x84>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d021      	beq.n	8007ce2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007ca6:	1d3a      	adds	r2, r7, #4
 8007ca8:	f107 0108 	add.w	r1, r7, #8
 8007cac:	f107 030c 	add.w	r3, r7, #12
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7fd ffad 	bl	8005c10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007cb6:	6879      	ldr	r1, [r7, #4]
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	9202      	str	r2, [sp, #8]
 8007cbe:	9301      	str	r3, [sp, #4]
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	460a      	mov	r2, r1
 8007cc8:	4911      	ldr	r1, [pc, #68]	@ (8007d10 <xTimerCreateTimerTask+0x88>)
 8007cca:	4812      	ldr	r0, [pc, #72]	@ (8007d14 <xTimerCreateTimerTask+0x8c>)
 8007ccc:	f7fe ff86 	bl	8006bdc <xTaskCreateStatic>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	4a11      	ldr	r2, [pc, #68]	@ (8007d18 <xTimerCreateTimerTask+0x90>)
 8007cd4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007cd6:	4b10      	ldr	r3, [pc, #64]	@ (8007d18 <xTimerCreateTimerTask+0x90>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d001      	beq.n	8007ce2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10b      	bne.n	8007d00 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cec:	f383 8811 	msr	BASEPRI, r3
 8007cf0:	f3bf 8f6f 	isb	sy
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	613b      	str	r3, [r7, #16]
}
 8007cfa:	bf00      	nop
 8007cfc:	bf00      	nop
 8007cfe:	e7fd      	b.n	8007cfc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007d00:	697b      	ldr	r3, [r7, #20]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3718      	adds	r7, #24
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	20000edc 	.word	0x20000edc
 8007d10:	080095a8 	.word	0x080095a8
 8007d14:	08007e3d 	.word	0x08007e3d
 8007d18:	20000ee0 	.word	0x20000ee0

08007d1c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b08a      	sub	sp, #40	@ 0x28
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
 8007d28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10b      	bne.n	8007d4c <xTimerGenericCommand+0x30>
	__asm volatile
 8007d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d38:	f383 8811 	msr	BASEPRI, r3
 8007d3c:	f3bf 8f6f 	isb	sy
 8007d40:	f3bf 8f4f 	dsb	sy
 8007d44:	623b      	str	r3, [r7, #32]
}
 8007d46:	bf00      	nop
 8007d48:	bf00      	nop
 8007d4a:	e7fd      	b.n	8007d48 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007d4c:	4b19      	ldr	r3, [pc, #100]	@ (8007db4 <xTimerGenericCommand+0x98>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d02a      	beq.n	8007daa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	2b05      	cmp	r3, #5
 8007d64:	dc18      	bgt.n	8007d98 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007d66:	f7ff fda3 	bl	80078b0 <xTaskGetSchedulerState>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d109      	bne.n	8007d84 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007d70:	4b10      	ldr	r3, [pc, #64]	@ (8007db4 <xTimerGenericCommand+0x98>)
 8007d72:	6818      	ldr	r0, [r3, #0]
 8007d74:	f107 0110 	add.w	r1, r7, #16
 8007d78:	2300      	movs	r3, #0
 8007d7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d7c:	f7fe fa18 	bl	80061b0 <xQueueGenericSend>
 8007d80:	6278      	str	r0, [r7, #36]	@ 0x24
 8007d82:	e012      	b.n	8007daa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007d84:	4b0b      	ldr	r3, [pc, #44]	@ (8007db4 <xTimerGenericCommand+0x98>)
 8007d86:	6818      	ldr	r0, [r3, #0]
 8007d88:	f107 0110 	add.w	r1, r7, #16
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f7fe fa0e 	bl	80061b0 <xQueueGenericSend>
 8007d94:	6278      	str	r0, [r7, #36]	@ 0x24
 8007d96:	e008      	b.n	8007daa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007d98:	4b06      	ldr	r3, [pc, #24]	@ (8007db4 <xTimerGenericCommand+0x98>)
 8007d9a:	6818      	ldr	r0, [r3, #0]
 8007d9c:	f107 0110 	add.w	r1, r7, #16
 8007da0:	2300      	movs	r3, #0
 8007da2:	683a      	ldr	r2, [r7, #0]
 8007da4:	f7fe fb06 	bl	80063b4 <xQueueGenericSendFromISR>
 8007da8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3728      	adds	r7, #40	@ 0x28
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	20000edc 	.word	0x20000edc

08007db8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b088      	sub	sp, #32
 8007dbc:	af02      	add	r7, sp, #8
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8007e38 <prvProcessExpiredTimer+0x80>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	3304      	adds	r3, #4
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7fd ffc1 	bl	8005d58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d123      	bne.n	8007e26 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	699a      	ldr	r2, [r3, #24]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	18d1      	adds	r1, r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	683a      	ldr	r2, [r7, #0]
 8007dea:	6978      	ldr	r0, [r7, #20]
 8007dec:	f000 f8cc 	bl	8007f88 <prvInsertTimerInActiveList>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d017      	beq.n	8007e26 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007df6:	2300      	movs	r3, #0
 8007df8:	9300      	str	r3, [sp, #0]
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	2100      	movs	r1, #0
 8007e00:	6978      	ldr	r0, [r7, #20]
 8007e02:	f7ff ff8b 	bl	8007d1c <xTimerGenericCommand>
 8007e06:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d10b      	bne.n	8007e26 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8007e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	60fb      	str	r3, [r7, #12]
}
 8007e20:	bf00      	nop
 8007e22:	bf00      	nop
 8007e24:	e7fd      	b.n	8007e22 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e2a:	6978      	ldr	r0, [r7, #20]
 8007e2c:	4798      	blx	r3
}
 8007e2e:	bf00      	nop
 8007e30:	3718      	adds	r7, #24
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	20000ed4 	.word	0x20000ed4

08007e3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e44:	f107 0308 	add.w	r3, r7, #8
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f000 f859 	bl	8007f00 <prvGetNextExpireTime>
 8007e4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	4619      	mov	r1, r3
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f000 f805 	bl	8007e64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007e5a:	f000 f8d7 	bl	800800c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e5e:	bf00      	nop
 8007e60:	e7f0      	b.n	8007e44 <prvTimerTask+0x8>
	...

08007e64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007e6e:	f7ff f90f 	bl	8007090 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e72:	f107 0308 	add.w	r3, r7, #8
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 f866 	bl	8007f48 <prvSampleTimeNow>
 8007e7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d130      	bne.n	8007ee6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d10a      	bne.n	8007ea0 <prvProcessTimerOrBlockTask+0x3c>
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d806      	bhi.n	8007ea0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007e92:	f7ff f90b 	bl	80070ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007e96:	68f9      	ldr	r1, [r7, #12]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f7ff ff8d 	bl	8007db8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007e9e:	e024      	b.n	8007eea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d008      	beq.n	8007eb8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007ea6:	4b13      	ldr	r3, [pc, #76]	@ (8007ef4 <prvProcessTimerOrBlockTask+0x90>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	bf0c      	ite	eq
 8007eb0:	2301      	moveq	r3, #1
 8007eb2:	2300      	movne	r3, #0
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8007ef8 <prvProcessTimerOrBlockTask+0x94>)
 8007eba:	6818      	ldr	r0, [r3, #0]
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	683a      	ldr	r2, [r7, #0]
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	f7fe fe55 	bl	8006b74 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007eca:	f7ff f8ef 	bl	80070ac <xTaskResumeAll>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d10a      	bne.n	8007eea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007ed4:	4b09      	ldr	r3, [pc, #36]	@ (8007efc <prvProcessTimerOrBlockTask+0x98>)
 8007ed6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007eda:	601a      	str	r2, [r3, #0]
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	f3bf 8f6f 	isb	sy
}
 8007ee4:	e001      	b.n	8007eea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007ee6:	f7ff f8e1 	bl	80070ac <xTaskResumeAll>
}
 8007eea:	bf00      	nop
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	20000ed8 	.word	0x20000ed8
 8007ef8:	20000edc 	.word	0x20000edc
 8007efc:	e000ed04 	.word	0xe000ed04

08007f00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007f08:	4b0e      	ldr	r3, [pc, #56]	@ (8007f44 <prvGetNextExpireTime+0x44>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	bf0c      	ite	eq
 8007f12:	2301      	moveq	r3, #1
 8007f14:	2300      	movne	r3, #0
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	461a      	mov	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d105      	bne.n	8007f32 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f26:	4b07      	ldr	r3, [pc, #28]	@ (8007f44 <prvGetNextExpireTime+0x44>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	60fb      	str	r3, [r7, #12]
 8007f30:	e001      	b.n	8007f36 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007f32:	2300      	movs	r3, #0
 8007f34:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007f36:	68fb      	ldr	r3, [r7, #12]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3714      	adds	r7, #20
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr
 8007f44:	20000ed4 	.word	0x20000ed4

08007f48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007f50:	f7ff f94a 	bl	80071e8 <xTaskGetTickCount>
 8007f54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007f56:	4b0b      	ldr	r3, [pc, #44]	@ (8007f84 <prvSampleTimeNow+0x3c>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d205      	bcs.n	8007f6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007f60:	f000 f910 	bl	8008184 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	601a      	str	r2, [r3, #0]
 8007f6a:	e002      	b.n	8007f72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007f72:	4a04      	ldr	r2, [pc, #16]	@ (8007f84 <prvSampleTimeNow+0x3c>)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007f78:	68fb      	ldr	r3, [r7, #12]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	20000ee4 	.word	0x20000ee4

08007f88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b086      	sub	sp, #24
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	607a      	str	r2, [r7, #4]
 8007f94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007f96:	2300      	movs	r3, #0
 8007f98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	68ba      	ldr	r2, [r7, #8]
 8007f9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d812      	bhi.n	8007fd4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	1ad2      	subs	r2, r2, r3
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d302      	bcc.n	8007fc2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	617b      	str	r3, [r7, #20]
 8007fc0:	e01b      	b.n	8007ffa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007fc2:	4b10      	ldr	r3, [pc, #64]	@ (8008004 <prvInsertTimerInActiveList+0x7c>)
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	3304      	adds	r3, #4
 8007fca:	4619      	mov	r1, r3
 8007fcc:	4610      	mov	r0, r2
 8007fce:	f7fd fe8a 	bl	8005ce6 <vListInsert>
 8007fd2:	e012      	b.n	8007ffa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d206      	bcs.n	8007fea <prvInsertTimerInActiveList+0x62>
 8007fdc:	68ba      	ldr	r2, [r7, #8]
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d302      	bcc.n	8007fea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	617b      	str	r3, [r7, #20]
 8007fe8:	e007      	b.n	8007ffa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007fea:	4b07      	ldr	r3, [pc, #28]	@ (8008008 <prvInsertTimerInActiveList+0x80>)
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	4610      	mov	r0, r2
 8007ff6:	f7fd fe76 	bl	8005ce6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007ffa:	697b      	ldr	r3, [r7, #20]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3718      	adds	r7, #24
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}
 8008004:	20000ed8 	.word	0x20000ed8
 8008008:	20000ed4 	.word	0x20000ed4

0800800c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b08e      	sub	sp, #56	@ 0x38
 8008010:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008012:	e0a5      	b.n	8008160 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	da19      	bge.n	800804e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800801a:	1d3b      	adds	r3, r7, #4
 800801c:	3304      	adds	r3, #4
 800801e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008022:	2b00      	cmp	r3, #0
 8008024:	d10b      	bne.n	800803e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800802a:	f383 8811 	msr	BASEPRI, r3
 800802e:	f3bf 8f6f 	isb	sy
 8008032:	f3bf 8f4f 	dsb	sy
 8008036:	61fb      	str	r3, [r7, #28]
}
 8008038:	bf00      	nop
 800803a:	bf00      	nop
 800803c:	e7fd      	b.n	800803a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800803e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008044:	6850      	ldr	r0, [r2, #4]
 8008046:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008048:	6892      	ldr	r2, [r2, #8]
 800804a:	4611      	mov	r1, r2
 800804c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b00      	cmp	r3, #0
 8008052:	f2c0 8085 	blt.w	8008160 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800805a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800805c:	695b      	ldr	r3, [r3, #20]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d004      	beq.n	800806c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008064:	3304      	adds	r3, #4
 8008066:	4618      	mov	r0, r3
 8008068:	f7fd fe76 	bl	8005d58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800806c:	463b      	mov	r3, r7
 800806e:	4618      	mov	r0, r3
 8008070:	f7ff ff6a 	bl	8007f48 <prvSampleTimeNow>
 8008074:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2b09      	cmp	r3, #9
 800807a:	d86c      	bhi.n	8008156 <prvProcessReceivedCommands+0x14a>
 800807c:	a201      	add	r2, pc, #4	@ (adr r2, 8008084 <prvProcessReceivedCommands+0x78>)
 800807e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008082:	bf00      	nop
 8008084:	080080ad 	.word	0x080080ad
 8008088:	080080ad 	.word	0x080080ad
 800808c:	080080ad 	.word	0x080080ad
 8008090:	08008157 	.word	0x08008157
 8008094:	0800810b 	.word	0x0800810b
 8008098:	08008145 	.word	0x08008145
 800809c:	080080ad 	.word	0x080080ad
 80080a0:	080080ad 	.word	0x080080ad
 80080a4:	08008157 	.word	0x08008157
 80080a8:	0800810b 	.word	0x0800810b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080b0:	699b      	ldr	r3, [r3, #24]
 80080b2:	18d1      	adds	r1, r2, r3
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080ba:	f7ff ff65 	bl	8007f88 <prvInsertTimerInActiveList>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d04a      	beq.n	800815a <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080ca:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80080cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ce:	69db      	ldr	r3, [r3, #28]
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d142      	bne.n	800815a <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80080d4:	68ba      	ldr	r2, [r7, #8]
 80080d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	441a      	add	r2, r3
 80080dc:	2300      	movs	r3, #0
 80080de:	9300      	str	r3, [sp, #0]
 80080e0:	2300      	movs	r3, #0
 80080e2:	2100      	movs	r1, #0
 80080e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080e6:	f7ff fe19 	bl	8007d1c <xTimerGenericCommand>
 80080ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80080ec:	6a3b      	ldr	r3, [r7, #32]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d133      	bne.n	800815a <prvProcessReceivedCommands+0x14e>
	__asm volatile
 80080f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f6:	f383 8811 	msr	BASEPRI, r3
 80080fa:	f3bf 8f6f 	isb	sy
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	61bb      	str	r3, [r7, #24]
}
 8008104:	bf00      	nop
 8008106:	bf00      	nop
 8008108:	e7fd      	b.n	8008106 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800810e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d10b      	bne.n	8008130 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8008118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800811c:	f383 8811 	msr	BASEPRI, r3
 8008120:	f3bf 8f6f 	isb	sy
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	617b      	str	r3, [r7, #20]
}
 800812a:	bf00      	nop
 800812c:	bf00      	nop
 800812e:	e7fd      	b.n	800812c <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008132:	699a      	ldr	r2, [r3, #24]
 8008134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008136:	18d1      	adds	r1, r2, r3
 8008138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800813c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800813e:	f7ff ff23 	bl	8007f88 <prvInsertTimerInActiveList>
					break;
 8008142:	e00d      	b.n	8008160 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008146:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800814a:	2b00      	cmp	r3, #0
 800814c:	d107      	bne.n	800815e <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800814e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008150:	f000 fbd4 	bl	80088fc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008154:	e003      	b.n	800815e <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8008156:	bf00      	nop
 8008158:	e002      	b.n	8008160 <prvProcessReceivedCommands+0x154>
					break;
 800815a:	bf00      	nop
 800815c:	e000      	b.n	8008160 <prvProcessReceivedCommands+0x154>
					break;
 800815e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008160:	4b07      	ldr	r3, [pc, #28]	@ (8008180 <prvProcessReceivedCommands+0x174>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	1d39      	adds	r1, r7, #4
 8008166:	2200      	movs	r2, #0
 8008168:	4618      	mov	r0, r3
 800816a:	f7fe f9bf 	bl	80064ec <xQueueReceive>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	f47f af4f 	bne.w	8008014 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008176:	bf00      	nop
 8008178:	bf00      	nop
 800817a:	3730      	adds	r7, #48	@ 0x30
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	20000edc 	.word	0x20000edc

08008184 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b088      	sub	sp, #32
 8008188:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800818a:	e046      	b.n	800821a <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800818c:	4b2c      	ldr	r3, [pc, #176]	@ (8008240 <prvSwitchTimerLists+0xbc>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008196:	4b2a      	ldr	r3, [pc, #168]	@ (8008240 <prvSwitchTimerLists+0xbc>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	3304      	adds	r3, #4
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7fd fdd7 	bl	8005d58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	69db      	ldr	r3, [r3, #28]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d12f      	bne.n	800821a <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	699b      	ldr	r3, [r3, #24]
 80081be:	693a      	ldr	r2, [r7, #16]
 80081c0:	4413      	add	r3, r2
 80081c2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d90e      	bls.n	80081ea <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80081d8:	4b19      	ldr	r3, [pc, #100]	@ (8008240 <prvSwitchTimerLists+0xbc>)
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	3304      	adds	r3, #4
 80081e0:	4619      	mov	r1, r3
 80081e2:	4610      	mov	r0, r2
 80081e4:	f7fd fd7f 	bl	8005ce6 <vListInsert>
 80081e8:	e017      	b.n	800821a <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80081ea:	2300      	movs	r3, #0
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	2300      	movs	r3, #0
 80081f0:	693a      	ldr	r2, [r7, #16]
 80081f2:	2100      	movs	r1, #0
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f7ff fd91 	bl	8007d1c <xTimerGenericCommand>
 80081fa:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10b      	bne.n	800821a <prvSwitchTimerLists+0x96>
	__asm volatile
 8008202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008206:	f383 8811 	msr	BASEPRI, r3
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	603b      	str	r3, [r7, #0]
}
 8008214:	bf00      	nop
 8008216:	bf00      	nop
 8008218:	e7fd      	b.n	8008216 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800821a:	4b09      	ldr	r3, [pc, #36]	@ (8008240 <prvSwitchTimerLists+0xbc>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1b3      	bne.n	800818c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008224:	4b06      	ldr	r3, [pc, #24]	@ (8008240 <prvSwitchTimerLists+0xbc>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800822a:	4b06      	ldr	r3, [pc, #24]	@ (8008244 <prvSwitchTimerLists+0xc0>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a04      	ldr	r2, [pc, #16]	@ (8008240 <prvSwitchTimerLists+0xbc>)
 8008230:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008232:	4a04      	ldr	r2, [pc, #16]	@ (8008244 <prvSwitchTimerLists+0xc0>)
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	6013      	str	r3, [r2, #0]
}
 8008238:	bf00      	nop
 800823a:	3718      	adds	r7, #24
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	20000ed4 	.word	0x20000ed4
 8008244:	20000ed8 	.word	0x20000ed8

08008248 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800824e:	f000 f96b 	bl	8008528 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008252:	4b15      	ldr	r3, [pc, #84]	@ (80082a8 <prvCheckForValidListAndQueue+0x60>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d120      	bne.n	800829c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800825a:	4814      	ldr	r0, [pc, #80]	@ (80082ac <prvCheckForValidListAndQueue+0x64>)
 800825c:	f7fd fcf2 	bl	8005c44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008260:	4813      	ldr	r0, [pc, #76]	@ (80082b0 <prvCheckForValidListAndQueue+0x68>)
 8008262:	f7fd fcef 	bl	8005c44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008266:	4b13      	ldr	r3, [pc, #76]	@ (80082b4 <prvCheckForValidListAndQueue+0x6c>)
 8008268:	4a10      	ldr	r2, [pc, #64]	@ (80082ac <prvCheckForValidListAndQueue+0x64>)
 800826a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800826c:	4b12      	ldr	r3, [pc, #72]	@ (80082b8 <prvCheckForValidListAndQueue+0x70>)
 800826e:	4a10      	ldr	r2, [pc, #64]	@ (80082b0 <prvCheckForValidListAndQueue+0x68>)
 8008270:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008272:	2300      	movs	r3, #0
 8008274:	9300      	str	r3, [sp, #0]
 8008276:	4b11      	ldr	r3, [pc, #68]	@ (80082bc <prvCheckForValidListAndQueue+0x74>)
 8008278:	4a11      	ldr	r2, [pc, #68]	@ (80082c0 <prvCheckForValidListAndQueue+0x78>)
 800827a:	2110      	movs	r1, #16
 800827c:	200a      	movs	r0, #10
 800827e:	f7fd fdff 	bl	8005e80 <xQueueGenericCreateStatic>
 8008282:	4603      	mov	r3, r0
 8008284:	4a08      	ldr	r2, [pc, #32]	@ (80082a8 <prvCheckForValidListAndQueue+0x60>)
 8008286:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008288:	4b07      	ldr	r3, [pc, #28]	@ (80082a8 <prvCheckForValidListAndQueue+0x60>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d005      	beq.n	800829c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008290:	4b05      	ldr	r3, [pc, #20]	@ (80082a8 <prvCheckForValidListAndQueue+0x60>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	490b      	ldr	r1, [pc, #44]	@ (80082c4 <prvCheckForValidListAndQueue+0x7c>)
 8008296:	4618      	mov	r0, r3
 8008298:	f7fe fc42 	bl	8006b20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800829c:	f000 f976 	bl	800858c <vPortExitCritical>
}
 80082a0:	bf00      	nop
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	20000edc 	.word	0x20000edc
 80082ac:	20000eac 	.word	0x20000eac
 80082b0:	20000ec0 	.word	0x20000ec0
 80082b4:	20000ed4 	.word	0x20000ed4
 80082b8:	20000ed8 	.word	0x20000ed8
 80082bc:	20000f88 	.word	0x20000f88
 80082c0:	20000ee8 	.word	0x20000ee8
 80082c4:	080095b0 	.word	0x080095b0

080082c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	3b04      	subs	r3, #4
 80082d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80082e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	3b04      	subs	r3, #4
 80082e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	f023 0201 	bic.w	r2, r3, #1
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	3b04      	subs	r3, #4
 80082f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80082f8:	4a0c      	ldr	r2, [pc, #48]	@ (800832c <pxPortInitialiseStack+0x64>)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3b14      	subs	r3, #20
 8008302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	3b04      	subs	r3, #4
 800830e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f06f 0202 	mvn.w	r2, #2
 8008316:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	3b20      	subs	r3, #32
 800831c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800831e:	68fb      	ldr	r3, [r7, #12]
}
 8008320:	4618      	mov	r0, r3
 8008322:	3714      	adds	r7, #20
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr
 800832c:	08008331 	.word	0x08008331

08008330 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008336:	2300      	movs	r3, #0
 8008338:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800833a:	4b13      	ldr	r3, [pc, #76]	@ (8008388 <prvTaskExitError+0x58>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008342:	d00b      	beq.n	800835c <prvTaskExitError+0x2c>
	__asm volatile
 8008344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008348:	f383 8811 	msr	BASEPRI, r3
 800834c:	f3bf 8f6f 	isb	sy
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	60fb      	str	r3, [r7, #12]
}
 8008356:	bf00      	nop
 8008358:	bf00      	nop
 800835a:	e7fd      	b.n	8008358 <prvTaskExitError+0x28>
	__asm volatile
 800835c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008360:	f383 8811 	msr	BASEPRI, r3
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	f3bf 8f4f 	dsb	sy
 800836c:	60bb      	str	r3, [r7, #8]
}
 800836e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008370:	bf00      	nop
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d0fc      	beq.n	8008372 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008378:	bf00      	nop
 800837a:	bf00      	nop
 800837c:	3714      	adds	r7, #20
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	2000000c 	.word	0x2000000c
 800838c:	00000000 	.word	0x00000000

08008390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008390:	4b07      	ldr	r3, [pc, #28]	@ (80083b0 <pxCurrentTCBConst2>)
 8008392:	6819      	ldr	r1, [r3, #0]
 8008394:	6808      	ldr	r0, [r1, #0]
 8008396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800839a:	f380 8809 	msr	PSP, r0
 800839e:	f3bf 8f6f 	isb	sy
 80083a2:	f04f 0000 	mov.w	r0, #0
 80083a6:	f380 8811 	msr	BASEPRI, r0
 80083aa:	4770      	bx	lr
 80083ac:	f3af 8000 	nop.w

080083b0 <pxCurrentTCBConst2>:
 80083b0:	200009ac 	.word	0x200009ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80083b4:	bf00      	nop
 80083b6:	bf00      	nop

080083b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80083b8:	4808      	ldr	r0, [pc, #32]	@ (80083dc <prvPortStartFirstTask+0x24>)
 80083ba:	6800      	ldr	r0, [r0, #0]
 80083bc:	6800      	ldr	r0, [r0, #0]
 80083be:	f380 8808 	msr	MSP, r0
 80083c2:	f04f 0000 	mov.w	r0, #0
 80083c6:	f380 8814 	msr	CONTROL, r0
 80083ca:	b662      	cpsie	i
 80083cc:	b661      	cpsie	f
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	f3bf 8f6f 	isb	sy
 80083d6:	df00      	svc	0
 80083d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80083da:	bf00      	nop
 80083dc:	e000ed08 	.word	0xe000ed08

080083e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b086      	sub	sp, #24
 80083e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80083e6:	4b47      	ldr	r3, [pc, #284]	@ (8008504 <xPortStartScheduler+0x124>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a47      	ldr	r2, [pc, #284]	@ (8008508 <xPortStartScheduler+0x128>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d10b      	bne.n	8008408 <xPortStartScheduler+0x28>
	__asm volatile
 80083f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f4:	f383 8811 	msr	BASEPRI, r3
 80083f8:	f3bf 8f6f 	isb	sy
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	613b      	str	r3, [r7, #16]
}
 8008402:	bf00      	nop
 8008404:	bf00      	nop
 8008406:	e7fd      	b.n	8008404 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008408:	4b3e      	ldr	r3, [pc, #248]	@ (8008504 <xPortStartScheduler+0x124>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a3f      	ldr	r2, [pc, #252]	@ (800850c <xPortStartScheduler+0x12c>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d10b      	bne.n	800842a <xPortStartScheduler+0x4a>
	__asm volatile
 8008412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	60fb      	str	r3, [r7, #12]
}
 8008424:	bf00      	nop
 8008426:	bf00      	nop
 8008428:	e7fd      	b.n	8008426 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800842a:	4b39      	ldr	r3, [pc, #228]	@ (8008510 <xPortStartScheduler+0x130>)
 800842c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	b2db      	uxtb	r3, r3
 8008434:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	22ff      	movs	r2, #255	@ 0xff
 800843a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	b2db      	uxtb	r3, r3
 8008442:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008444:	78fb      	ldrb	r3, [r7, #3]
 8008446:	b2db      	uxtb	r3, r3
 8008448:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800844c:	b2da      	uxtb	r2, r3
 800844e:	4b31      	ldr	r3, [pc, #196]	@ (8008514 <xPortStartScheduler+0x134>)
 8008450:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008452:	4b31      	ldr	r3, [pc, #196]	@ (8008518 <xPortStartScheduler+0x138>)
 8008454:	2207      	movs	r2, #7
 8008456:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008458:	e009      	b.n	800846e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800845a:	4b2f      	ldr	r3, [pc, #188]	@ (8008518 <xPortStartScheduler+0x138>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	3b01      	subs	r3, #1
 8008460:	4a2d      	ldr	r2, [pc, #180]	@ (8008518 <xPortStartScheduler+0x138>)
 8008462:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008464:	78fb      	ldrb	r3, [r7, #3]
 8008466:	b2db      	uxtb	r3, r3
 8008468:	005b      	lsls	r3, r3, #1
 800846a:	b2db      	uxtb	r3, r3
 800846c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800846e:	78fb      	ldrb	r3, [r7, #3]
 8008470:	b2db      	uxtb	r3, r3
 8008472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008476:	2b80      	cmp	r3, #128	@ 0x80
 8008478:	d0ef      	beq.n	800845a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800847a:	4b27      	ldr	r3, [pc, #156]	@ (8008518 <xPortStartScheduler+0x138>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f1c3 0307 	rsb	r3, r3, #7
 8008482:	2b04      	cmp	r3, #4
 8008484:	d00b      	beq.n	800849e <xPortStartScheduler+0xbe>
	__asm volatile
 8008486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800848a:	f383 8811 	msr	BASEPRI, r3
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	f3bf 8f4f 	dsb	sy
 8008496:	60bb      	str	r3, [r7, #8]
}
 8008498:	bf00      	nop
 800849a:	bf00      	nop
 800849c:	e7fd      	b.n	800849a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800849e:	4b1e      	ldr	r3, [pc, #120]	@ (8008518 <xPortStartScheduler+0x138>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	021b      	lsls	r3, r3, #8
 80084a4:	4a1c      	ldr	r2, [pc, #112]	@ (8008518 <xPortStartScheduler+0x138>)
 80084a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80084a8:	4b1b      	ldr	r3, [pc, #108]	@ (8008518 <xPortStartScheduler+0x138>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80084b0:	4a19      	ldr	r2, [pc, #100]	@ (8008518 <xPortStartScheduler+0x138>)
 80084b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	b2da      	uxtb	r2, r3
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80084bc:	4b17      	ldr	r3, [pc, #92]	@ (800851c <xPortStartScheduler+0x13c>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a16      	ldr	r2, [pc, #88]	@ (800851c <xPortStartScheduler+0x13c>)
 80084c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80084c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80084c8:	4b14      	ldr	r3, [pc, #80]	@ (800851c <xPortStartScheduler+0x13c>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a13      	ldr	r2, [pc, #76]	@ (800851c <xPortStartScheduler+0x13c>)
 80084ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80084d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80084d4:	f000 f8da 	bl	800868c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80084d8:	4b11      	ldr	r3, [pc, #68]	@ (8008520 <xPortStartScheduler+0x140>)
 80084da:	2200      	movs	r2, #0
 80084dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80084de:	f000 f8f9 	bl	80086d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80084e2:	4b10      	ldr	r3, [pc, #64]	@ (8008524 <xPortStartScheduler+0x144>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a0f      	ldr	r2, [pc, #60]	@ (8008524 <xPortStartScheduler+0x144>)
 80084e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80084ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80084ee:	f7ff ff63 	bl	80083b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80084f2:	f7fe ff49 	bl	8007388 <vTaskSwitchContext>
	prvTaskExitError();
 80084f6:	f7ff ff1b 	bl	8008330 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3718      	adds	r7, #24
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	e000ed00 	.word	0xe000ed00
 8008508:	410fc271 	.word	0x410fc271
 800850c:	410fc270 	.word	0x410fc270
 8008510:	e000e400 	.word	0xe000e400
 8008514:	20000fd8 	.word	0x20000fd8
 8008518:	20000fdc 	.word	0x20000fdc
 800851c:	e000ed20 	.word	0xe000ed20
 8008520:	2000000c 	.word	0x2000000c
 8008524:	e000ef34 	.word	0xe000ef34

08008528 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
	__asm volatile
 800852e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008532:	f383 8811 	msr	BASEPRI, r3
 8008536:	f3bf 8f6f 	isb	sy
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	607b      	str	r3, [r7, #4]
}
 8008540:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008542:	4b10      	ldr	r3, [pc, #64]	@ (8008584 <vPortEnterCritical+0x5c>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	3301      	adds	r3, #1
 8008548:	4a0e      	ldr	r2, [pc, #56]	@ (8008584 <vPortEnterCritical+0x5c>)
 800854a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800854c:	4b0d      	ldr	r3, [pc, #52]	@ (8008584 <vPortEnterCritical+0x5c>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2b01      	cmp	r3, #1
 8008552:	d110      	bne.n	8008576 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008554:	4b0c      	ldr	r3, [pc, #48]	@ (8008588 <vPortEnterCritical+0x60>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	b2db      	uxtb	r3, r3
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00b      	beq.n	8008576 <vPortEnterCritical+0x4e>
	__asm volatile
 800855e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	603b      	str	r3, [r7, #0]
}
 8008570:	bf00      	nop
 8008572:	bf00      	nop
 8008574:	e7fd      	b.n	8008572 <vPortEnterCritical+0x4a>
	}
}
 8008576:	bf00      	nop
 8008578:	370c      	adds	r7, #12
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	2000000c 	.word	0x2000000c
 8008588:	e000ed04 	.word	0xe000ed04

0800858c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008592:	4b12      	ldr	r3, [pc, #72]	@ (80085dc <vPortExitCritical+0x50>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d10b      	bne.n	80085b2 <vPortExitCritical+0x26>
	__asm volatile
 800859a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800859e:	f383 8811 	msr	BASEPRI, r3
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	607b      	str	r3, [r7, #4]
}
 80085ac:	bf00      	nop
 80085ae:	bf00      	nop
 80085b0:	e7fd      	b.n	80085ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80085b2:	4b0a      	ldr	r3, [pc, #40]	@ (80085dc <vPortExitCritical+0x50>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	3b01      	subs	r3, #1
 80085b8:	4a08      	ldr	r2, [pc, #32]	@ (80085dc <vPortExitCritical+0x50>)
 80085ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80085bc:	4b07      	ldr	r3, [pc, #28]	@ (80085dc <vPortExitCritical+0x50>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d105      	bne.n	80085d0 <vPortExitCritical+0x44>
 80085c4:	2300      	movs	r3, #0
 80085c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	f383 8811 	msr	BASEPRI, r3
}
 80085ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	2000000c 	.word	0x2000000c

080085e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80085e0:	f3ef 8009 	mrs	r0, PSP
 80085e4:	f3bf 8f6f 	isb	sy
 80085e8:	4b15      	ldr	r3, [pc, #84]	@ (8008640 <pxCurrentTCBConst>)
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	f01e 0f10 	tst.w	lr, #16
 80085f0:	bf08      	it	eq
 80085f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80085f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085fa:	6010      	str	r0, [r2, #0]
 80085fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008600:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008604:	f380 8811 	msr	BASEPRI, r0
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	f3bf 8f6f 	isb	sy
 8008610:	f7fe feba 	bl	8007388 <vTaskSwitchContext>
 8008614:	f04f 0000 	mov.w	r0, #0
 8008618:	f380 8811 	msr	BASEPRI, r0
 800861c:	bc09      	pop	{r0, r3}
 800861e:	6819      	ldr	r1, [r3, #0]
 8008620:	6808      	ldr	r0, [r1, #0]
 8008622:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008626:	f01e 0f10 	tst.w	lr, #16
 800862a:	bf08      	it	eq
 800862c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008630:	f380 8809 	msr	PSP, r0
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	f3af 8000 	nop.w

08008640 <pxCurrentTCBConst>:
 8008640:	200009ac 	.word	0x200009ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008644:	bf00      	nop
 8008646:	bf00      	nop

08008648 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
	__asm volatile
 800864e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008652:	f383 8811 	msr	BASEPRI, r3
 8008656:	f3bf 8f6f 	isb	sy
 800865a:	f3bf 8f4f 	dsb	sy
 800865e:	607b      	str	r3, [r7, #4]
}
 8008660:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008662:	f7fe fdd1 	bl	8007208 <xTaskIncrementTick>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d003      	beq.n	8008674 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800866c:	4b06      	ldr	r3, [pc, #24]	@ (8008688 <SysTick_Handler+0x40>)
 800866e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008672:	601a      	str	r2, [r3, #0]
 8008674:	2300      	movs	r3, #0
 8008676:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	f383 8811 	msr	BASEPRI, r3
}
 800867e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008680:	bf00      	nop
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	e000ed04 	.word	0xe000ed04

0800868c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800868c:	b480      	push	{r7}
 800868e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008690:	4b0b      	ldr	r3, [pc, #44]	@ (80086c0 <vPortSetupTimerInterrupt+0x34>)
 8008692:	2200      	movs	r2, #0
 8008694:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008696:	4b0b      	ldr	r3, [pc, #44]	@ (80086c4 <vPortSetupTimerInterrupt+0x38>)
 8008698:	2200      	movs	r2, #0
 800869a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800869c:	4b0a      	ldr	r3, [pc, #40]	@ (80086c8 <vPortSetupTimerInterrupt+0x3c>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a0a      	ldr	r2, [pc, #40]	@ (80086cc <vPortSetupTimerInterrupt+0x40>)
 80086a2:	fba2 2303 	umull	r2, r3, r2, r3
 80086a6:	099b      	lsrs	r3, r3, #6
 80086a8:	4a09      	ldr	r2, [pc, #36]	@ (80086d0 <vPortSetupTimerInterrupt+0x44>)
 80086aa:	3b01      	subs	r3, #1
 80086ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80086ae:	4b04      	ldr	r3, [pc, #16]	@ (80086c0 <vPortSetupTimerInterrupt+0x34>)
 80086b0:	2207      	movs	r2, #7
 80086b2:	601a      	str	r2, [r3, #0]
}
 80086b4:	bf00      	nop
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	e000e010 	.word	0xe000e010
 80086c4:	e000e018 	.word	0xe000e018
 80086c8:	20000000 	.word	0x20000000
 80086cc:	10624dd3 	.word	0x10624dd3
 80086d0:	e000e014 	.word	0xe000e014

080086d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80086d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80086e4 <vPortEnableVFP+0x10>
 80086d8:	6801      	ldr	r1, [r0, #0]
 80086da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80086de:	6001      	str	r1, [r0, #0]
 80086e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80086e2:	bf00      	nop
 80086e4:	e000ed88 	.word	0xe000ed88

080086e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80086ee:	f3ef 8305 	mrs	r3, IPSR
 80086f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2b0f      	cmp	r3, #15
 80086f8:	d915      	bls.n	8008726 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80086fa:	4a18      	ldr	r2, [pc, #96]	@ (800875c <vPortValidateInterruptPriority+0x74>)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	4413      	add	r3, r2
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008704:	4b16      	ldr	r3, [pc, #88]	@ (8008760 <vPortValidateInterruptPriority+0x78>)
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	7afa      	ldrb	r2, [r7, #11]
 800870a:	429a      	cmp	r2, r3
 800870c:	d20b      	bcs.n	8008726 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800870e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	607b      	str	r3, [r7, #4]
}
 8008720:	bf00      	nop
 8008722:	bf00      	nop
 8008724:	e7fd      	b.n	8008722 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008726:	4b0f      	ldr	r3, [pc, #60]	@ (8008764 <vPortValidateInterruptPriority+0x7c>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800872e:	4b0e      	ldr	r3, [pc, #56]	@ (8008768 <vPortValidateInterruptPriority+0x80>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	429a      	cmp	r2, r3
 8008734:	d90b      	bls.n	800874e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	603b      	str	r3, [r7, #0]
}
 8008748:	bf00      	nop
 800874a:	bf00      	nop
 800874c:	e7fd      	b.n	800874a <vPortValidateInterruptPriority+0x62>
	}
 800874e:	bf00      	nop
 8008750:	3714      	adds	r7, #20
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	e000e3f0 	.word	0xe000e3f0
 8008760:	20000fd8 	.word	0x20000fd8
 8008764:	e000ed0c 	.word	0xe000ed0c
 8008768:	20000fdc 	.word	0x20000fdc

0800876c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b08a      	sub	sp, #40	@ 0x28
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008774:	2300      	movs	r3, #0
 8008776:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008778:	f7fe fc8a 	bl	8007090 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800877c:	4b5a      	ldr	r3, [pc, #360]	@ (80088e8 <pvPortMalloc+0x17c>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d101      	bne.n	8008788 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008784:	f000 f916 	bl	80089b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008788:	4b58      	ldr	r3, [pc, #352]	@ (80088ec <pvPortMalloc+0x180>)
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4013      	ands	r3, r2
 8008790:	2b00      	cmp	r3, #0
 8008792:	f040 8090 	bne.w	80088b6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d01e      	beq.n	80087da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800879c:	2208      	movs	r2, #8
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4413      	add	r3, r2
 80087a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f003 0307 	and.w	r3, r3, #7
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d015      	beq.n	80087da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f023 0307 	bic.w	r3, r3, #7
 80087b4:	3308      	adds	r3, #8
 80087b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f003 0307 	and.w	r3, r3, #7
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00b      	beq.n	80087da <pvPortMalloc+0x6e>
	__asm volatile
 80087c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c6:	f383 8811 	msr	BASEPRI, r3
 80087ca:	f3bf 8f6f 	isb	sy
 80087ce:	f3bf 8f4f 	dsb	sy
 80087d2:	617b      	str	r3, [r7, #20]
}
 80087d4:	bf00      	nop
 80087d6:	bf00      	nop
 80087d8:	e7fd      	b.n	80087d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d06a      	beq.n	80088b6 <pvPortMalloc+0x14a>
 80087e0:	4b43      	ldr	r3, [pc, #268]	@ (80088f0 <pvPortMalloc+0x184>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d865      	bhi.n	80088b6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80087ea:	4b42      	ldr	r3, [pc, #264]	@ (80088f4 <pvPortMalloc+0x188>)
 80087ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80087ee:	4b41      	ldr	r3, [pc, #260]	@ (80088f4 <pvPortMalloc+0x188>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087f4:	e004      	b.n	8008800 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80087f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80087fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	429a      	cmp	r2, r3
 8008808:	d903      	bls.n	8008812 <pvPortMalloc+0xa6>
 800880a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1f1      	bne.n	80087f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008812:	4b35      	ldr	r3, [pc, #212]	@ (80088e8 <pvPortMalloc+0x17c>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008818:	429a      	cmp	r2, r3
 800881a:	d04c      	beq.n	80088b6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800881c:	6a3b      	ldr	r3, [r7, #32]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2208      	movs	r2, #8
 8008822:	4413      	add	r3, r2
 8008824:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	6a3b      	ldr	r3, [r7, #32]
 800882c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800882e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008830:	685a      	ldr	r2, [r3, #4]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	1ad2      	subs	r2, r2, r3
 8008836:	2308      	movs	r3, #8
 8008838:	005b      	lsls	r3, r3, #1
 800883a:	429a      	cmp	r2, r3
 800883c:	d920      	bls.n	8008880 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800883e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4413      	add	r3, r2
 8008844:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	f003 0307 	and.w	r3, r3, #7
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00b      	beq.n	8008868 <pvPortMalloc+0xfc>
	__asm volatile
 8008850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008854:	f383 8811 	msr	BASEPRI, r3
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	613b      	str	r3, [r7, #16]
}
 8008862:	bf00      	nop
 8008864:	bf00      	nop
 8008866:	e7fd      	b.n	8008864 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800886a:	685a      	ldr	r2, [r3, #4]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	1ad2      	subs	r2, r2, r3
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800887a:	69b8      	ldr	r0, [r7, #24]
 800887c:	f000 f8fc 	bl	8008a78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008880:	4b1b      	ldr	r3, [pc, #108]	@ (80088f0 <pvPortMalloc+0x184>)
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	4a19      	ldr	r2, [pc, #100]	@ (80088f0 <pvPortMalloc+0x184>)
 800888c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800888e:	4b18      	ldr	r3, [pc, #96]	@ (80088f0 <pvPortMalloc+0x184>)
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	4b19      	ldr	r3, [pc, #100]	@ (80088f8 <pvPortMalloc+0x18c>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	429a      	cmp	r2, r3
 8008898:	d203      	bcs.n	80088a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800889a:	4b15      	ldr	r3, [pc, #84]	@ (80088f0 <pvPortMalloc+0x184>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a16      	ldr	r2, [pc, #88]	@ (80088f8 <pvPortMalloc+0x18c>)
 80088a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80088a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a4:	685a      	ldr	r2, [r3, #4]
 80088a6:	4b11      	ldr	r3, [pc, #68]	@ (80088ec <pvPortMalloc+0x180>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	431a      	orrs	r2, r3
 80088ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80088b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b2:	2200      	movs	r2, #0
 80088b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80088b6:	f7fe fbf9 	bl	80070ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	f003 0307 	and.w	r3, r3, #7
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00b      	beq.n	80088dc <pvPortMalloc+0x170>
	__asm volatile
 80088c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c8:	f383 8811 	msr	BASEPRI, r3
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	f3bf 8f4f 	dsb	sy
 80088d4:	60fb      	str	r3, [r7, #12]
}
 80088d6:	bf00      	nop
 80088d8:	bf00      	nop
 80088da:	e7fd      	b.n	80088d8 <pvPortMalloc+0x16c>
	return pvReturn;
 80088dc:	69fb      	ldr	r3, [r7, #28]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3728      	adds	r7, #40	@ 0x28
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	20001be8 	.word	0x20001be8
 80088ec:	20001bf4 	.word	0x20001bf4
 80088f0:	20001bec 	.word	0x20001bec
 80088f4:	20001be0 	.word	0x20001be0
 80088f8:	20001bf0 	.word	0x20001bf0

080088fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d04a      	beq.n	80089a4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800890e:	2308      	movs	r3, #8
 8008910:	425b      	negs	r3, r3
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	4413      	add	r3, r2
 8008916:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	685a      	ldr	r2, [r3, #4]
 8008920:	4b22      	ldr	r3, [pc, #136]	@ (80089ac <vPortFree+0xb0>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4013      	ands	r3, r2
 8008926:	2b00      	cmp	r3, #0
 8008928:	d10b      	bne.n	8008942 <vPortFree+0x46>
	__asm volatile
 800892a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800892e:	f383 8811 	msr	BASEPRI, r3
 8008932:	f3bf 8f6f 	isb	sy
 8008936:	f3bf 8f4f 	dsb	sy
 800893a:	60fb      	str	r3, [r7, #12]
}
 800893c:	bf00      	nop
 800893e:	bf00      	nop
 8008940:	e7fd      	b.n	800893e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00b      	beq.n	8008962 <vPortFree+0x66>
	__asm volatile
 800894a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800894e:	f383 8811 	msr	BASEPRI, r3
 8008952:	f3bf 8f6f 	isb	sy
 8008956:	f3bf 8f4f 	dsb	sy
 800895a:	60bb      	str	r3, [r7, #8]
}
 800895c:	bf00      	nop
 800895e:	bf00      	nop
 8008960:	e7fd      	b.n	800895e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	685a      	ldr	r2, [r3, #4]
 8008966:	4b11      	ldr	r3, [pc, #68]	@ (80089ac <vPortFree+0xb0>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4013      	ands	r3, r2
 800896c:	2b00      	cmp	r3, #0
 800896e:	d019      	beq.n	80089a4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d115      	bne.n	80089a4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	685a      	ldr	r2, [r3, #4]
 800897c:	4b0b      	ldr	r3, [pc, #44]	@ (80089ac <vPortFree+0xb0>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	43db      	mvns	r3, r3
 8008982:	401a      	ands	r2, r3
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008988:	f7fe fb82 	bl	8007090 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	685a      	ldr	r2, [r3, #4]
 8008990:	4b07      	ldr	r3, [pc, #28]	@ (80089b0 <vPortFree+0xb4>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4413      	add	r3, r2
 8008996:	4a06      	ldr	r2, [pc, #24]	@ (80089b0 <vPortFree+0xb4>)
 8008998:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800899a:	6938      	ldr	r0, [r7, #16]
 800899c:	f000 f86c 	bl	8008a78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80089a0:	f7fe fb84 	bl	80070ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80089a4:	bf00      	nop
 80089a6:	3718      	adds	r7, #24
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	20001bf4 	.word	0x20001bf4
 80089b0:	20001bec 	.word	0x20001bec

080089b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80089ba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80089be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80089c0:	4b27      	ldr	r3, [pc, #156]	@ (8008a60 <prvHeapInit+0xac>)
 80089c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f003 0307 	and.w	r3, r3, #7
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00c      	beq.n	80089e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	3307      	adds	r3, #7
 80089d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f023 0307 	bic.w	r3, r3, #7
 80089da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	4a1f      	ldr	r2, [pc, #124]	@ (8008a60 <prvHeapInit+0xac>)
 80089e4:	4413      	add	r3, r2
 80089e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80089ec:	4a1d      	ldr	r2, [pc, #116]	@ (8008a64 <prvHeapInit+0xb0>)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80089f2:	4b1c      	ldr	r3, [pc, #112]	@ (8008a64 <prvHeapInit+0xb0>)
 80089f4:	2200      	movs	r2, #0
 80089f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	68ba      	ldr	r2, [r7, #8]
 80089fc:	4413      	add	r3, r2
 80089fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008a00:	2208      	movs	r2, #8
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	1a9b      	subs	r3, r3, r2
 8008a06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f023 0307 	bic.w	r3, r3, #7
 8008a0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	4a15      	ldr	r2, [pc, #84]	@ (8008a68 <prvHeapInit+0xb4>)
 8008a14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008a16:	4b14      	ldr	r3, [pc, #80]	@ (8008a68 <prvHeapInit+0xb4>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008a1e:	4b12      	ldr	r3, [pc, #72]	@ (8008a68 <prvHeapInit+0xb4>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2200      	movs	r2, #0
 8008a24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	1ad2      	subs	r2, r2, r3
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008a34:	4b0c      	ldr	r3, [pc, #48]	@ (8008a68 <prvHeapInit+0xb4>)
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	4a0a      	ldr	r2, [pc, #40]	@ (8008a6c <prvHeapInit+0xb8>)
 8008a42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	4a09      	ldr	r2, [pc, #36]	@ (8008a70 <prvHeapInit+0xbc>)
 8008a4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a4c:	4b09      	ldr	r3, [pc, #36]	@ (8008a74 <prvHeapInit+0xc0>)
 8008a4e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008a52:	601a      	str	r2, [r3, #0]
}
 8008a54:	bf00      	nop
 8008a56:	3714      	adds	r7, #20
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr
 8008a60:	20000fe0 	.word	0x20000fe0
 8008a64:	20001be0 	.word	0x20001be0
 8008a68:	20001be8 	.word	0x20001be8
 8008a6c:	20001bf0 	.word	0x20001bf0
 8008a70:	20001bec 	.word	0x20001bec
 8008a74:	20001bf4 	.word	0x20001bf4

08008a78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a80:	4b28      	ldr	r3, [pc, #160]	@ (8008b24 <prvInsertBlockIntoFreeList+0xac>)
 8008a82:	60fb      	str	r3, [r7, #12]
 8008a84:	e002      	b.n	8008a8c <prvInsertBlockIntoFreeList+0x14>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	60fb      	str	r3, [r7, #12]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d8f7      	bhi.n	8008a86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	68ba      	ldr	r2, [r7, #8]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d108      	bne.n	8008aba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	685a      	ldr	r2, [r3, #4]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	441a      	add	r2, r3
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	68ba      	ldr	r2, [r7, #8]
 8008ac4:	441a      	add	r2, r3
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d118      	bne.n	8008b00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	4b15      	ldr	r3, [pc, #84]	@ (8008b28 <prvInsertBlockIntoFreeList+0xb0>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d00d      	beq.n	8008af6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	685a      	ldr	r2, [r3, #4]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	441a      	add	r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	601a      	str	r2, [r3, #0]
 8008af4:	e008      	b.n	8008b08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008af6:	4b0c      	ldr	r3, [pc, #48]	@ (8008b28 <prvInsertBlockIntoFreeList+0xb0>)
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	601a      	str	r2, [r3, #0]
 8008afe:	e003      	b.n	8008b08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d002      	beq.n	8008b16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b16:	bf00      	nop
 8008b18:	3714      	adds	r7, #20
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop
 8008b24:	20001be0 	.word	0x20001be0
 8008b28:	20001be8 	.word	0x20001be8

08008b2c <siprintf>:
 8008b2c:	b40e      	push	{r1, r2, r3}
 8008b2e:	b500      	push	{lr}
 8008b30:	b09c      	sub	sp, #112	@ 0x70
 8008b32:	ab1d      	add	r3, sp, #116	@ 0x74
 8008b34:	9002      	str	r0, [sp, #8]
 8008b36:	9006      	str	r0, [sp, #24]
 8008b38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008b3c:	4809      	ldr	r0, [pc, #36]	@ (8008b64 <siprintf+0x38>)
 8008b3e:	9107      	str	r1, [sp, #28]
 8008b40:	9104      	str	r1, [sp, #16]
 8008b42:	4909      	ldr	r1, [pc, #36]	@ (8008b68 <siprintf+0x3c>)
 8008b44:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b48:	9105      	str	r1, [sp, #20]
 8008b4a:	6800      	ldr	r0, [r0, #0]
 8008b4c:	9301      	str	r3, [sp, #4]
 8008b4e:	a902      	add	r1, sp, #8
 8008b50:	f000 f9f8 	bl	8008f44 <_svfiprintf_r>
 8008b54:	9b02      	ldr	r3, [sp, #8]
 8008b56:	2200      	movs	r2, #0
 8008b58:	701a      	strb	r2, [r3, #0]
 8008b5a:	b01c      	add	sp, #112	@ 0x70
 8008b5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b60:	b003      	add	sp, #12
 8008b62:	4770      	bx	lr
 8008b64:	20000010 	.word	0x20000010
 8008b68:	ffff0208 	.word	0xffff0208

08008b6c <memset>:
 8008b6c:	4402      	add	r2, r0
 8008b6e:	4603      	mov	r3, r0
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d100      	bne.n	8008b76 <memset+0xa>
 8008b74:	4770      	bx	lr
 8008b76:	f803 1b01 	strb.w	r1, [r3], #1
 8008b7a:	e7f9      	b.n	8008b70 <memset+0x4>

08008b7c <_reclaim_reent>:
 8008b7c:	4b29      	ldr	r3, [pc, #164]	@ (8008c24 <_reclaim_reent+0xa8>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4283      	cmp	r3, r0
 8008b82:	b570      	push	{r4, r5, r6, lr}
 8008b84:	4604      	mov	r4, r0
 8008b86:	d04b      	beq.n	8008c20 <_reclaim_reent+0xa4>
 8008b88:	69c3      	ldr	r3, [r0, #28]
 8008b8a:	b1ab      	cbz	r3, 8008bb8 <_reclaim_reent+0x3c>
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	b16b      	cbz	r3, 8008bac <_reclaim_reent+0x30>
 8008b90:	2500      	movs	r5, #0
 8008b92:	69e3      	ldr	r3, [r4, #28]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	5959      	ldr	r1, [r3, r5]
 8008b98:	2900      	cmp	r1, #0
 8008b9a:	d13b      	bne.n	8008c14 <_reclaim_reent+0x98>
 8008b9c:	3504      	adds	r5, #4
 8008b9e:	2d80      	cmp	r5, #128	@ 0x80
 8008ba0:	d1f7      	bne.n	8008b92 <_reclaim_reent+0x16>
 8008ba2:	69e3      	ldr	r3, [r4, #28]
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	68d9      	ldr	r1, [r3, #12]
 8008ba8:	f000 f878 	bl	8008c9c <_free_r>
 8008bac:	69e3      	ldr	r3, [r4, #28]
 8008bae:	6819      	ldr	r1, [r3, #0]
 8008bb0:	b111      	cbz	r1, 8008bb8 <_reclaim_reent+0x3c>
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f000 f872 	bl	8008c9c <_free_r>
 8008bb8:	6961      	ldr	r1, [r4, #20]
 8008bba:	b111      	cbz	r1, 8008bc2 <_reclaim_reent+0x46>
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	f000 f86d 	bl	8008c9c <_free_r>
 8008bc2:	69e1      	ldr	r1, [r4, #28]
 8008bc4:	b111      	cbz	r1, 8008bcc <_reclaim_reent+0x50>
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	f000 f868 	bl	8008c9c <_free_r>
 8008bcc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008bce:	b111      	cbz	r1, 8008bd6 <_reclaim_reent+0x5a>
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	f000 f863 	bl	8008c9c <_free_r>
 8008bd6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008bd8:	b111      	cbz	r1, 8008be0 <_reclaim_reent+0x64>
 8008bda:	4620      	mov	r0, r4
 8008bdc:	f000 f85e 	bl	8008c9c <_free_r>
 8008be0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008be2:	b111      	cbz	r1, 8008bea <_reclaim_reent+0x6e>
 8008be4:	4620      	mov	r0, r4
 8008be6:	f000 f859 	bl	8008c9c <_free_r>
 8008bea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008bec:	b111      	cbz	r1, 8008bf4 <_reclaim_reent+0x78>
 8008bee:	4620      	mov	r0, r4
 8008bf0:	f000 f854 	bl	8008c9c <_free_r>
 8008bf4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008bf6:	b111      	cbz	r1, 8008bfe <_reclaim_reent+0x82>
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	f000 f84f 	bl	8008c9c <_free_r>
 8008bfe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008c00:	b111      	cbz	r1, 8008c08 <_reclaim_reent+0x8c>
 8008c02:	4620      	mov	r0, r4
 8008c04:	f000 f84a 	bl	8008c9c <_free_r>
 8008c08:	6a23      	ldr	r3, [r4, #32]
 8008c0a:	b14b      	cbz	r3, 8008c20 <_reclaim_reent+0xa4>
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008c12:	4718      	bx	r3
 8008c14:	680e      	ldr	r6, [r1, #0]
 8008c16:	4620      	mov	r0, r4
 8008c18:	f000 f840 	bl	8008c9c <_free_r>
 8008c1c:	4631      	mov	r1, r6
 8008c1e:	e7bb      	b.n	8008b98 <_reclaim_reent+0x1c>
 8008c20:	bd70      	pop	{r4, r5, r6, pc}
 8008c22:	bf00      	nop
 8008c24:	20000010 	.word	0x20000010

08008c28 <__errno>:
 8008c28:	4b01      	ldr	r3, [pc, #4]	@ (8008c30 <__errno+0x8>)
 8008c2a:	6818      	ldr	r0, [r3, #0]
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	20000010 	.word	0x20000010

08008c34 <__libc_init_array>:
 8008c34:	b570      	push	{r4, r5, r6, lr}
 8008c36:	4d0d      	ldr	r5, [pc, #52]	@ (8008c6c <__libc_init_array+0x38>)
 8008c38:	4c0d      	ldr	r4, [pc, #52]	@ (8008c70 <__libc_init_array+0x3c>)
 8008c3a:	1b64      	subs	r4, r4, r5
 8008c3c:	10a4      	asrs	r4, r4, #2
 8008c3e:	2600      	movs	r6, #0
 8008c40:	42a6      	cmp	r6, r4
 8008c42:	d109      	bne.n	8008c58 <__libc_init_array+0x24>
 8008c44:	4d0b      	ldr	r5, [pc, #44]	@ (8008c74 <__libc_init_array+0x40>)
 8008c46:	4c0c      	ldr	r4, [pc, #48]	@ (8008c78 <__libc_init_array+0x44>)
 8008c48:	f000 fc66 	bl	8009518 <_init>
 8008c4c:	1b64      	subs	r4, r4, r5
 8008c4e:	10a4      	asrs	r4, r4, #2
 8008c50:	2600      	movs	r6, #0
 8008c52:	42a6      	cmp	r6, r4
 8008c54:	d105      	bne.n	8008c62 <__libc_init_array+0x2e>
 8008c56:	bd70      	pop	{r4, r5, r6, pc}
 8008c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c5c:	4798      	blx	r3
 8008c5e:	3601      	adds	r6, #1
 8008c60:	e7ee      	b.n	8008c40 <__libc_init_array+0xc>
 8008c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c66:	4798      	blx	r3
 8008c68:	3601      	adds	r6, #1
 8008c6a:	e7f2      	b.n	8008c52 <__libc_init_array+0x1e>
 8008c6c:	080096c8 	.word	0x080096c8
 8008c70:	080096c8 	.word	0x080096c8
 8008c74:	080096c8 	.word	0x080096c8
 8008c78:	080096cc 	.word	0x080096cc

08008c7c <__retarget_lock_acquire_recursive>:
 8008c7c:	4770      	bx	lr

08008c7e <__retarget_lock_release_recursive>:
 8008c7e:	4770      	bx	lr

08008c80 <memcpy>:
 8008c80:	440a      	add	r2, r1
 8008c82:	4291      	cmp	r1, r2
 8008c84:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c88:	d100      	bne.n	8008c8c <memcpy+0xc>
 8008c8a:	4770      	bx	lr
 8008c8c:	b510      	push	{r4, lr}
 8008c8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c96:	4291      	cmp	r1, r2
 8008c98:	d1f9      	bne.n	8008c8e <memcpy+0xe>
 8008c9a:	bd10      	pop	{r4, pc}

08008c9c <_free_r>:
 8008c9c:	b538      	push	{r3, r4, r5, lr}
 8008c9e:	4605      	mov	r5, r0
 8008ca0:	2900      	cmp	r1, #0
 8008ca2:	d041      	beq.n	8008d28 <_free_r+0x8c>
 8008ca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ca8:	1f0c      	subs	r4, r1, #4
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	bfb8      	it	lt
 8008cae:	18e4      	addlt	r4, r4, r3
 8008cb0:	f000 f8e0 	bl	8008e74 <__malloc_lock>
 8008cb4:	4a1d      	ldr	r2, [pc, #116]	@ (8008d2c <_free_r+0x90>)
 8008cb6:	6813      	ldr	r3, [r2, #0]
 8008cb8:	b933      	cbnz	r3, 8008cc8 <_free_r+0x2c>
 8008cba:	6063      	str	r3, [r4, #4]
 8008cbc:	6014      	str	r4, [r2, #0]
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cc4:	f000 b8dc 	b.w	8008e80 <__malloc_unlock>
 8008cc8:	42a3      	cmp	r3, r4
 8008cca:	d908      	bls.n	8008cde <_free_r+0x42>
 8008ccc:	6820      	ldr	r0, [r4, #0]
 8008cce:	1821      	adds	r1, r4, r0
 8008cd0:	428b      	cmp	r3, r1
 8008cd2:	bf01      	itttt	eq
 8008cd4:	6819      	ldreq	r1, [r3, #0]
 8008cd6:	685b      	ldreq	r3, [r3, #4]
 8008cd8:	1809      	addeq	r1, r1, r0
 8008cda:	6021      	streq	r1, [r4, #0]
 8008cdc:	e7ed      	b.n	8008cba <_free_r+0x1e>
 8008cde:	461a      	mov	r2, r3
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	b10b      	cbz	r3, 8008ce8 <_free_r+0x4c>
 8008ce4:	42a3      	cmp	r3, r4
 8008ce6:	d9fa      	bls.n	8008cde <_free_r+0x42>
 8008ce8:	6811      	ldr	r1, [r2, #0]
 8008cea:	1850      	adds	r0, r2, r1
 8008cec:	42a0      	cmp	r0, r4
 8008cee:	d10b      	bne.n	8008d08 <_free_r+0x6c>
 8008cf0:	6820      	ldr	r0, [r4, #0]
 8008cf2:	4401      	add	r1, r0
 8008cf4:	1850      	adds	r0, r2, r1
 8008cf6:	4283      	cmp	r3, r0
 8008cf8:	6011      	str	r1, [r2, #0]
 8008cfa:	d1e0      	bne.n	8008cbe <_free_r+0x22>
 8008cfc:	6818      	ldr	r0, [r3, #0]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	6053      	str	r3, [r2, #4]
 8008d02:	4408      	add	r0, r1
 8008d04:	6010      	str	r0, [r2, #0]
 8008d06:	e7da      	b.n	8008cbe <_free_r+0x22>
 8008d08:	d902      	bls.n	8008d10 <_free_r+0x74>
 8008d0a:	230c      	movs	r3, #12
 8008d0c:	602b      	str	r3, [r5, #0]
 8008d0e:	e7d6      	b.n	8008cbe <_free_r+0x22>
 8008d10:	6820      	ldr	r0, [r4, #0]
 8008d12:	1821      	adds	r1, r4, r0
 8008d14:	428b      	cmp	r3, r1
 8008d16:	bf04      	itt	eq
 8008d18:	6819      	ldreq	r1, [r3, #0]
 8008d1a:	685b      	ldreq	r3, [r3, #4]
 8008d1c:	6063      	str	r3, [r4, #4]
 8008d1e:	bf04      	itt	eq
 8008d20:	1809      	addeq	r1, r1, r0
 8008d22:	6021      	streq	r1, [r4, #0]
 8008d24:	6054      	str	r4, [r2, #4]
 8008d26:	e7ca      	b.n	8008cbe <_free_r+0x22>
 8008d28:	bd38      	pop	{r3, r4, r5, pc}
 8008d2a:	bf00      	nop
 8008d2c:	20001d3c 	.word	0x20001d3c

08008d30 <sbrk_aligned>:
 8008d30:	b570      	push	{r4, r5, r6, lr}
 8008d32:	4e0f      	ldr	r6, [pc, #60]	@ (8008d70 <sbrk_aligned+0x40>)
 8008d34:	460c      	mov	r4, r1
 8008d36:	6831      	ldr	r1, [r6, #0]
 8008d38:	4605      	mov	r5, r0
 8008d3a:	b911      	cbnz	r1, 8008d42 <sbrk_aligned+0x12>
 8008d3c:	f000 fba6 	bl	800948c <_sbrk_r>
 8008d40:	6030      	str	r0, [r6, #0]
 8008d42:	4621      	mov	r1, r4
 8008d44:	4628      	mov	r0, r5
 8008d46:	f000 fba1 	bl	800948c <_sbrk_r>
 8008d4a:	1c43      	adds	r3, r0, #1
 8008d4c:	d103      	bne.n	8008d56 <sbrk_aligned+0x26>
 8008d4e:	f04f 34ff 	mov.w	r4, #4294967295
 8008d52:	4620      	mov	r0, r4
 8008d54:	bd70      	pop	{r4, r5, r6, pc}
 8008d56:	1cc4      	adds	r4, r0, #3
 8008d58:	f024 0403 	bic.w	r4, r4, #3
 8008d5c:	42a0      	cmp	r0, r4
 8008d5e:	d0f8      	beq.n	8008d52 <sbrk_aligned+0x22>
 8008d60:	1a21      	subs	r1, r4, r0
 8008d62:	4628      	mov	r0, r5
 8008d64:	f000 fb92 	bl	800948c <_sbrk_r>
 8008d68:	3001      	adds	r0, #1
 8008d6a:	d1f2      	bne.n	8008d52 <sbrk_aligned+0x22>
 8008d6c:	e7ef      	b.n	8008d4e <sbrk_aligned+0x1e>
 8008d6e:	bf00      	nop
 8008d70:	20001d38 	.word	0x20001d38

08008d74 <_malloc_r>:
 8008d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d78:	1ccd      	adds	r5, r1, #3
 8008d7a:	f025 0503 	bic.w	r5, r5, #3
 8008d7e:	3508      	adds	r5, #8
 8008d80:	2d0c      	cmp	r5, #12
 8008d82:	bf38      	it	cc
 8008d84:	250c      	movcc	r5, #12
 8008d86:	2d00      	cmp	r5, #0
 8008d88:	4606      	mov	r6, r0
 8008d8a:	db01      	blt.n	8008d90 <_malloc_r+0x1c>
 8008d8c:	42a9      	cmp	r1, r5
 8008d8e:	d904      	bls.n	8008d9a <_malloc_r+0x26>
 8008d90:	230c      	movs	r3, #12
 8008d92:	6033      	str	r3, [r6, #0]
 8008d94:	2000      	movs	r0, #0
 8008d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008e70 <_malloc_r+0xfc>
 8008d9e:	f000 f869 	bl	8008e74 <__malloc_lock>
 8008da2:	f8d8 3000 	ldr.w	r3, [r8]
 8008da6:	461c      	mov	r4, r3
 8008da8:	bb44      	cbnz	r4, 8008dfc <_malloc_r+0x88>
 8008daa:	4629      	mov	r1, r5
 8008dac:	4630      	mov	r0, r6
 8008dae:	f7ff ffbf 	bl	8008d30 <sbrk_aligned>
 8008db2:	1c43      	adds	r3, r0, #1
 8008db4:	4604      	mov	r4, r0
 8008db6:	d158      	bne.n	8008e6a <_malloc_r+0xf6>
 8008db8:	f8d8 4000 	ldr.w	r4, [r8]
 8008dbc:	4627      	mov	r7, r4
 8008dbe:	2f00      	cmp	r7, #0
 8008dc0:	d143      	bne.n	8008e4a <_malloc_r+0xd6>
 8008dc2:	2c00      	cmp	r4, #0
 8008dc4:	d04b      	beq.n	8008e5e <_malloc_r+0xea>
 8008dc6:	6823      	ldr	r3, [r4, #0]
 8008dc8:	4639      	mov	r1, r7
 8008dca:	4630      	mov	r0, r6
 8008dcc:	eb04 0903 	add.w	r9, r4, r3
 8008dd0:	f000 fb5c 	bl	800948c <_sbrk_r>
 8008dd4:	4581      	cmp	r9, r0
 8008dd6:	d142      	bne.n	8008e5e <_malloc_r+0xea>
 8008dd8:	6821      	ldr	r1, [r4, #0]
 8008dda:	1a6d      	subs	r5, r5, r1
 8008ddc:	4629      	mov	r1, r5
 8008dde:	4630      	mov	r0, r6
 8008de0:	f7ff ffa6 	bl	8008d30 <sbrk_aligned>
 8008de4:	3001      	adds	r0, #1
 8008de6:	d03a      	beq.n	8008e5e <_malloc_r+0xea>
 8008de8:	6823      	ldr	r3, [r4, #0]
 8008dea:	442b      	add	r3, r5
 8008dec:	6023      	str	r3, [r4, #0]
 8008dee:	f8d8 3000 	ldr.w	r3, [r8]
 8008df2:	685a      	ldr	r2, [r3, #4]
 8008df4:	bb62      	cbnz	r2, 8008e50 <_malloc_r+0xdc>
 8008df6:	f8c8 7000 	str.w	r7, [r8]
 8008dfa:	e00f      	b.n	8008e1c <_malloc_r+0xa8>
 8008dfc:	6822      	ldr	r2, [r4, #0]
 8008dfe:	1b52      	subs	r2, r2, r5
 8008e00:	d420      	bmi.n	8008e44 <_malloc_r+0xd0>
 8008e02:	2a0b      	cmp	r2, #11
 8008e04:	d917      	bls.n	8008e36 <_malloc_r+0xc2>
 8008e06:	1961      	adds	r1, r4, r5
 8008e08:	42a3      	cmp	r3, r4
 8008e0a:	6025      	str	r5, [r4, #0]
 8008e0c:	bf18      	it	ne
 8008e0e:	6059      	strne	r1, [r3, #4]
 8008e10:	6863      	ldr	r3, [r4, #4]
 8008e12:	bf08      	it	eq
 8008e14:	f8c8 1000 	streq.w	r1, [r8]
 8008e18:	5162      	str	r2, [r4, r5]
 8008e1a:	604b      	str	r3, [r1, #4]
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	f000 f82f 	bl	8008e80 <__malloc_unlock>
 8008e22:	f104 000b 	add.w	r0, r4, #11
 8008e26:	1d23      	adds	r3, r4, #4
 8008e28:	f020 0007 	bic.w	r0, r0, #7
 8008e2c:	1ac2      	subs	r2, r0, r3
 8008e2e:	bf1c      	itt	ne
 8008e30:	1a1b      	subne	r3, r3, r0
 8008e32:	50a3      	strne	r3, [r4, r2]
 8008e34:	e7af      	b.n	8008d96 <_malloc_r+0x22>
 8008e36:	6862      	ldr	r2, [r4, #4]
 8008e38:	42a3      	cmp	r3, r4
 8008e3a:	bf0c      	ite	eq
 8008e3c:	f8c8 2000 	streq.w	r2, [r8]
 8008e40:	605a      	strne	r2, [r3, #4]
 8008e42:	e7eb      	b.n	8008e1c <_malloc_r+0xa8>
 8008e44:	4623      	mov	r3, r4
 8008e46:	6864      	ldr	r4, [r4, #4]
 8008e48:	e7ae      	b.n	8008da8 <_malloc_r+0x34>
 8008e4a:	463c      	mov	r4, r7
 8008e4c:	687f      	ldr	r7, [r7, #4]
 8008e4e:	e7b6      	b.n	8008dbe <_malloc_r+0x4a>
 8008e50:	461a      	mov	r2, r3
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	42a3      	cmp	r3, r4
 8008e56:	d1fb      	bne.n	8008e50 <_malloc_r+0xdc>
 8008e58:	2300      	movs	r3, #0
 8008e5a:	6053      	str	r3, [r2, #4]
 8008e5c:	e7de      	b.n	8008e1c <_malloc_r+0xa8>
 8008e5e:	230c      	movs	r3, #12
 8008e60:	6033      	str	r3, [r6, #0]
 8008e62:	4630      	mov	r0, r6
 8008e64:	f000 f80c 	bl	8008e80 <__malloc_unlock>
 8008e68:	e794      	b.n	8008d94 <_malloc_r+0x20>
 8008e6a:	6005      	str	r5, [r0, #0]
 8008e6c:	e7d6      	b.n	8008e1c <_malloc_r+0xa8>
 8008e6e:	bf00      	nop
 8008e70:	20001d3c 	.word	0x20001d3c

08008e74 <__malloc_lock>:
 8008e74:	4801      	ldr	r0, [pc, #4]	@ (8008e7c <__malloc_lock+0x8>)
 8008e76:	f7ff bf01 	b.w	8008c7c <__retarget_lock_acquire_recursive>
 8008e7a:	bf00      	nop
 8008e7c:	20001d34 	.word	0x20001d34

08008e80 <__malloc_unlock>:
 8008e80:	4801      	ldr	r0, [pc, #4]	@ (8008e88 <__malloc_unlock+0x8>)
 8008e82:	f7ff befc 	b.w	8008c7e <__retarget_lock_release_recursive>
 8008e86:	bf00      	nop
 8008e88:	20001d34 	.word	0x20001d34

08008e8c <__ssputs_r>:
 8008e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e90:	688e      	ldr	r6, [r1, #8]
 8008e92:	461f      	mov	r7, r3
 8008e94:	42be      	cmp	r6, r7
 8008e96:	680b      	ldr	r3, [r1, #0]
 8008e98:	4682      	mov	sl, r0
 8008e9a:	460c      	mov	r4, r1
 8008e9c:	4690      	mov	r8, r2
 8008e9e:	d82d      	bhi.n	8008efc <__ssputs_r+0x70>
 8008ea0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ea4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008ea8:	d026      	beq.n	8008ef8 <__ssputs_r+0x6c>
 8008eaa:	6965      	ldr	r5, [r4, #20]
 8008eac:	6909      	ldr	r1, [r1, #16]
 8008eae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008eb2:	eba3 0901 	sub.w	r9, r3, r1
 8008eb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008eba:	1c7b      	adds	r3, r7, #1
 8008ebc:	444b      	add	r3, r9
 8008ebe:	106d      	asrs	r5, r5, #1
 8008ec0:	429d      	cmp	r5, r3
 8008ec2:	bf38      	it	cc
 8008ec4:	461d      	movcc	r5, r3
 8008ec6:	0553      	lsls	r3, r2, #21
 8008ec8:	d527      	bpl.n	8008f1a <__ssputs_r+0x8e>
 8008eca:	4629      	mov	r1, r5
 8008ecc:	f7ff ff52 	bl	8008d74 <_malloc_r>
 8008ed0:	4606      	mov	r6, r0
 8008ed2:	b360      	cbz	r0, 8008f2e <__ssputs_r+0xa2>
 8008ed4:	6921      	ldr	r1, [r4, #16]
 8008ed6:	464a      	mov	r2, r9
 8008ed8:	f7ff fed2 	bl	8008c80 <memcpy>
 8008edc:	89a3      	ldrh	r3, [r4, #12]
 8008ede:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008ee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ee6:	81a3      	strh	r3, [r4, #12]
 8008ee8:	6126      	str	r6, [r4, #16]
 8008eea:	6165      	str	r5, [r4, #20]
 8008eec:	444e      	add	r6, r9
 8008eee:	eba5 0509 	sub.w	r5, r5, r9
 8008ef2:	6026      	str	r6, [r4, #0]
 8008ef4:	60a5      	str	r5, [r4, #8]
 8008ef6:	463e      	mov	r6, r7
 8008ef8:	42be      	cmp	r6, r7
 8008efa:	d900      	bls.n	8008efe <__ssputs_r+0x72>
 8008efc:	463e      	mov	r6, r7
 8008efe:	6820      	ldr	r0, [r4, #0]
 8008f00:	4632      	mov	r2, r6
 8008f02:	4641      	mov	r1, r8
 8008f04:	f000 faa8 	bl	8009458 <memmove>
 8008f08:	68a3      	ldr	r3, [r4, #8]
 8008f0a:	1b9b      	subs	r3, r3, r6
 8008f0c:	60a3      	str	r3, [r4, #8]
 8008f0e:	6823      	ldr	r3, [r4, #0]
 8008f10:	4433      	add	r3, r6
 8008f12:	6023      	str	r3, [r4, #0]
 8008f14:	2000      	movs	r0, #0
 8008f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f1a:	462a      	mov	r2, r5
 8008f1c:	f000 fac6 	bl	80094ac <_realloc_r>
 8008f20:	4606      	mov	r6, r0
 8008f22:	2800      	cmp	r0, #0
 8008f24:	d1e0      	bne.n	8008ee8 <__ssputs_r+0x5c>
 8008f26:	6921      	ldr	r1, [r4, #16]
 8008f28:	4650      	mov	r0, sl
 8008f2a:	f7ff feb7 	bl	8008c9c <_free_r>
 8008f2e:	230c      	movs	r3, #12
 8008f30:	f8ca 3000 	str.w	r3, [sl]
 8008f34:	89a3      	ldrh	r3, [r4, #12]
 8008f36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f3a:	81a3      	strh	r3, [r4, #12]
 8008f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f40:	e7e9      	b.n	8008f16 <__ssputs_r+0x8a>
	...

08008f44 <_svfiprintf_r>:
 8008f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f48:	4698      	mov	r8, r3
 8008f4a:	898b      	ldrh	r3, [r1, #12]
 8008f4c:	061b      	lsls	r3, r3, #24
 8008f4e:	b09d      	sub	sp, #116	@ 0x74
 8008f50:	4607      	mov	r7, r0
 8008f52:	460d      	mov	r5, r1
 8008f54:	4614      	mov	r4, r2
 8008f56:	d510      	bpl.n	8008f7a <_svfiprintf_r+0x36>
 8008f58:	690b      	ldr	r3, [r1, #16]
 8008f5a:	b973      	cbnz	r3, 8008f7a <_svfiprintf_r+0x36>
 8008f5c:	2140      	movs	r1, #64	@ 0x40
 8008f5e:	f7ff ff09 	bl	8008d74 <_malloc_r>
 8008f62:	6028      	str	r0, [r5, #0]
 8008f64:	6128      	str	r0, [r5, #16]
 8008f66:	b930      	cbnz	r0, 8008f76 <_svfiprintf_r+0x32>
 8008f68:	230c      	movs	r3, #12
 8008f6a:	603b      	str	r3, [r7, #0]
 8008f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f70:	b01d      	add	sp, #116	@ 0x74
 8008f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f76:	2340      	movs	r3, #64	@ 0x40
 8008f78:	616b      	str	r3, [r5, #20]
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f7e:	2320      	movs	r3, #32
 8008f80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f84:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f88:	2330      	movs	r3, #48	@ 0x30
 8008f8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009128 <_svfiprintf_r+0x1e4>
 8008f8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f92:	f04f 0901 	mov.w	r9, #1
 8008f96:	4623      	mov	r3, r4
 8008f98:	469a      	mov	sl, r3
 8008f9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f9e:	b10a      	cbz	r2, 8008fa4 <_svfiprintf_r+0x60>
 8008fa0:	2a25      	cmp	r2, #37	@ 0x25
 8008fa2:	d1f9      	bne.n	8008f98 <_svfiprintf_r+0x54>
 8008fa4:	ebba 0b04 	subs.w	fp, sl, r4
 8008fa8:	d00b      	beq.n	8008fc2 <_svfiprintf_r+0x7e>
 8008faa:	465b      	mov	r3, fp
 8008fac:	4622      	mov	r2, r4
 8008fae:	4629      	mov	r1, r5
 8008fb0:	4638      	mov	r0, r7
 8008fb2:	f7ff ff6b 	bl	8008e8c <__ssputs_r>
 8008fb6:	3001      	adds	r0, #1
 8008fb8:	f000 80a7 	beq.w	800910a <_svfiprintf_r+0x1c6>
 8008fbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fbe:	445a      	add	r2, fp
 8008fc0:	9209      	str	r2, [sp, #36]	@ 0x24
 8008fc2:	f89a 3000 	ldrb.w	r3, [sl]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	f000 809f 	beq.w	800910a <_svfiprintf_r+0x1c6>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	f04f 32ff 	mov.w	r2, #4294967295
 8008fd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fd6:	f10a 0a01 	add.w	sl, sl, #1
 8008fda:	9304      	str	r3, [sp, #16]
 8008fdc:	9307      	str	r3, [sp, #28]
 8008fde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008fe2:	931a      	str	r3, [sp, #104]	@ 0x68
 8008fe4:	4654      	mov	r4, sl
 8008fe6:	2205      	movs	r2, #5
 8008fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fec:	484e      	ldr	r0, [pc, #312]	@ (8009128 <_svfiprintf_r+0x1e4>)
 8008fee:	f7f7 f8f7 	bl	80001e0 <memchr>
 8008ff2:	9a04      	ldr	r2, [sp, #16]
 8008ff4:	b9d8      	cbnz	r0, 800902e <_svfiprintf_r+0xea>
 8008ff6:	06d0      	lsls	r0, r2, #27
 8008ff8:	bf44      	itt	mi
 8008ffa:	2320      	movmi	r3, #32
 8008ffc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009000:	0711      	lsls	r1, r2, #28
 8009002:	bf44      	itt	mi
 8009004:	232b      	movmi	r3, #43	@ 0x2b
 8009006:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800900a:	f89a 3000 	ldrb.w	r3, [sl]
 800900e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009010:	d015      	beq.n	800903e <_svfiprintf_r+0xfa>
 8009012:	9a07      	ldr	r2, [sp, #28]
 8009014:	4654      	mov	r4, sl
 8009016:	2000      	movs	r0, #0
 8009018:	f04f 0c0a 	mov.w	ip, #10
 800901c:	4621      	mov	r1, r4
 800901e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009022:	3b30      	subs	r3, #48	@ 0x30
 8009024:	2b09      	cmp	r3, #9
 8009026:	d94b      	bls.n	80090c0 <_svfiprintf_r+0x17c>
 8009028:	b1b0      	cbz	r0, 8009058 <_svfiprintf_r+0x114>
 800902a:	9207      	str	r2, [sp, #28]
 800902c:	e014      	b.n	8009058 <_svfiprintf_r+0x114>
 800902e:	eba0 0308 	sub.w	r3, r0, r8
 8009032:	fa09 f303 	lsl.w	r3, r9, r3
 8009036:	4313      	orrs	r3, r2
 8009038:	9304      	str	r3, [sp, #16]
 800903a:	46a2      	mov	sl, r4
 800903c:	e7d2      	b.n	8008fe4 <_svfiprintf_r+0xa0>
 800903e:	9b03      	ldr	r3, [sp, #12]
 8009040:	1d19      	adds	r1, r3, #4
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	9103      	str	r1, [sp, #12]
 8009046:	2b00      	cmp	r3, #0
 8009048:	bfbb      	ittet	lt
 800904a:	425b      	neglt	r3, r3
 800904c:	f042 0202 	orrlt.w	r2, r2, #2
 8009050:	9307      	strge	r3, [sp, #28]
 8009052:	9307      	strlt	r3, [sp, #28]
 8009054:	bfb8      	it	lt
 8009056:	9204      	strlt	r2, [sp, #16]
 8009058:	7823      	ldrb	r3, [r4, #0]
 800905a:	2b2e      	cmp	r3, #46	@ 0x2e
 800905c:	d10a      	bne.n	8009074 <_svfiprintf_r+0x130>
 800905e:	7863      	ldrb	r3, [r4, #1]
 8009060:	2b2a      	cmp	r3, #42	@ 0x2a
 8009062:	d132      	bne.n	80090ca <_svfiprintf_r+0x186>
 8009064:	9b03      	ldr	r3, [sp, #12]
 8009066:	1d1a      	adds	r2, r3, #4
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	9203      	str	r2, [sp, #12]
 800906c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009070:	3402      	adds	r4, #2
 8009072:	9305      	str	r3, [sp, #20]
 8009074:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009138 <_svfiprintf_r+0x1f4>
 8009078:	7821      	ldrb	r1, [r4, #0]
 800907a:	2203      	movs	r2, #3
 800907c:	4650      	mov	r0, sl
 800907e:	f7f7 f8af 	bl	80001e0 <memchr>
 8009082:	b138      	cbz	r0, 8009094 <_svfiprintf_r+0x150>
 8009084:	9b04      	ldr	r3, [sp, #16]
 8009086:	eba0 000a 	sub.w	r0, r0, sl
 800908a:	2240      	movs	r2, #64	@ 0x40
 800908c:	4082      	lsls	r2, r0
 800908e:	4313      	orrs	r3, r2
 8009090:	3401      	adds	r4, #1
 8009092:	9304      	str	r3, [sp, #16]
 8009094:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009098:	4824      	ldr	r0, [pc, #144]	@ (800912c <_svfiprintf_r+0x1e8>)
 800909a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800909e:	2206      	movs	r2, #6
 80090a0:	f7f7 f89e 	bl	80001e0 <memchr>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	d036      	beq.n	8009116 <_svfiprintf_r+0x1d2>
 80090a8:	4b21      	ldr	r3, [pc, #132]	@ (8009130 <_svfiprintf_r+0x1ec>)
 80090aa:	bb1b      	cbnz	r3, 80090f4 <_svfiprintf_r+0x1b0>
 80090ac:	9b03      	ldr	r3, [sp, #12]
 80090ae:	3307      	adds	r3, #7
 80090b0:	f023 0307 	bic.w	r3, r3, #7
 80090b4:	3308      	adds	r3, #8
 80090b6:	9303      	str	r3, [sp, #12]
 80090b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090ba:	4433      	add	r3, r6
 80090bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80090be:	e76a      	b.n	8008f96 <_svfiprintf_r+0x52>
 80090c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80090c4:	460c      	mov	r4, r1
 80090c6:	2001      	movs	r0, #1
 80090c8:	e7a8      	b.n	800901c <_svfiprintf_r+0xd8>
 80090ca:	2300      	movs	r3, #0
 80090cc:	3401      	adds	r4, #1
 80090ce:	9305      	str	r3, [sp, #20]
 80090d0:	4619      	mov	r1, r3
 80090d2:	f04f 0c0a 	mov.w	ip, #10
 80090d6:	4620      	mov	r0, r4
 80090d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090dc:	3a30      	subs	r2, #48	@ 0x30
 80090de:	2a09      	cmp	r2, #9
 80090e0:	d903      	bls.n	80090ea <_svfiprintf_r+0x1a6>
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d0c6      	beq.n	8009074 <_svfiprintf_r+0x130>
 80090e6:	9105      	str	r1, [sp, #20]
 80090e8:	e7c4      	b.n	8009074 <_svfiprintf_r+0x130>
 80090ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80090ee:	4604      	mov	r4, r0
 80090f0:	2301      	movs	r3, #1
 80090f2:	e7f0      	b.n	80090d6 <_svfiprintf_r+0x192>
 80090f4:	ab03      	add	r3, sp, #12
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	462a      	mov	r2, r5
 80090fa:	4b0e      	ldr	r3, [pc, #56]	@ (8009134 <_svfiprintf_r+0x1f0>)
 80090fc:	a904      	add	r1, sp, #16
 80090fe:	4638      	mov	r0, r7
 8009100:	f3af 8000 	nop.w
 8009104:	1c42      	adds	r2, r0, #1
 8009106:	4606      	mov	r6, r0
 8009108:	d1d6      	bne.n	80090b8 <_svfiprintf_r+0x174>
 800910a:	89ab      	ldrh	r3, [r5, #12]
 800910c:	065b      	lsls	r3, r3, #25
 800910e:	f53f af2d 	bmi.w	8008f6c <_svfiprintf_r+0x28>
 8009112:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009114:	e72c      	b.n	8008f70 <_svfiprintf_r+0x2c>
 8009116:	ab03      	add	r3, sp, #12
 8009118:	9300      	str	r3, [sp, #0]
 800911a:	462a      	mov	r2, r5
 800911c:	4b05      	ldr	r3, [pc, #20]	@ (8009134 <_svfiprintf_r+0x1f0>)
 800911e:	a904      	add	r1, sp, #16
 8009120:	4638      	mov	r0, r7
 8009122:	f000 f879 	bl	8009218 <_printf_i>
 8009126:	e7ed      	b.n	8009104 <_svfiprintf_r+0x1c0>
 8009128:	0800968c 	.word	0x0800968c
 800912c:	08009696 	.word	0x08009696
 8009130:	00000000 	.word	0x00000000
 8009134:	08008e8d 	.word	0x08008e8d
 8009138:	08009692 	.word	0x08009692

0800913c <_printf_common>:
 800913c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009140:	4616      	mov	r6, r2
 8009142:	4698      	mov	r8, r3
 8009144:	688a      	ldr	r2, [r1, #8]
 8009146:	690b      	ldr	r3, [r1, #16]
 8009148:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800914c:	4293      	cmp	r3, r2
 800914e:	bfb8      	it	lt
 8009150:	4613      	movlt	r3, r2
 8009152:	6033      	str	r3, [r6, #0]
 8009154:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009158:	4607      	mov	r7, r0
 800915a:	460c      	mov	r4, r1
 800915c:	b10a      	cbz	r2, 8009162 <_printf_common+0x26>
 800915e:	3301      	adds	r3, #1
 8009160:	6033      	str	r3, [r6, #0]
 8009162:	6823      	ldr	r3, [r4, #0]
 8009164:	0699      	lsls	r1, r3, #26
 8009166:	bf42      	ittt	mi
 8009168:	6833      	ldrmi	r3, [r6, #0]
 800916a:	3302      	addmi	r3, #2
 800916c:	6033      	strmi	r3, [r6, #0]
 800916e:	6825      	ldr	r5, [r4, #0]
 8009170:	f015 0506 	ands.w	r5, r5, #6
 8009174:	d106      	bne.n	8009184 <_printf_common+0x48>
 8009176:	f104 0a19 	add.w	sl, r4, #25
 800917a:	68e3      	ldr	r3, [r4, #12]
 800917c:	6832      	ldr	r2, [r6, #0]
 800917e:	1a9b      	subs	r3, r3, r2
 8009180:	42ab      	cmp	r3, r5
 8009182:	dc26      	bgt.n	80091d2 <_printf_common+0x96>
 8009184:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009188:	6822      	ldr	r2, [r4, #0]
 800918a:	3b00      	subs	r3, #0
 800918c:	bf18      	it	ne
 800918e:	2301      	movne	r3, #1
 8009190:	0692      	lsls	r2, r2, #26
 8009192:	d42b      	bmi.n	80091ec <_printf_common+0xb0>
 8009194:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009198:	4641      	mov	r1, r8
 800919a:	4638      	mov	r0, r7
 800919c:	47c8      	blx	r9
 800919e:	3001      	adds	r0, #1
 80091a0:	d01e      	beq.n	80091e0 <_printf_common+0xa4>
 80091a2:	6823      	ldr	r3, [r4, #0]
 80091a4:	6922      	ldr	r2, [r4, #16]
 80091a6:	f003 0306 	and.w	r3, r3, #6
 80091aa:	2b04      	cmp	r3, #4
 80091ac:	bf02      	ittt	eq
 80091ae:	68e5      	ldreq	r5, [r4, #12]
 80091b0:	6833      	ldreq	r3, [r6, #0]
 80091b2:	1aed      	subeq	r5, r5, r3
 80091b4:	68a3      	ldr	r3, [r4, #8]
 80091b6:	bf0c      	ite	eq
 80091b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091bc:	2500      	movne	r5, #0
 80091be:	4293      	cmp	r3, r2
 80091c0:	bfc4      	itt	gt
 80091c2:	1a9b      	subgt	r3, r3, r2
 80091c4:	18ed      	addgt	r5, r5, r3
 80091c6:	2600      	movs	r6, #0
 80091c8:	341a      	adds	r4, #26
 80091ca:	42b5      	cmp	r5, r6
 80091cc:	d11a      	bne.n	8009204 <_printf_common+0xc8>
 80091ce:	2000      	movs	r0, #0
 80091d0:	e008      	b.n	80091e4 <_printf_common+0xa8>
 80091d2:	2301      	movs	r3, #1
 80091d4:	4652      	mov	r2, sl
 80091d6:	4641      	mov	r1, r8
 80091d8:	4638      	mov	r0, r7
 80091da:	47c8      	blx	r9
 80091dc:	3001      	adds	r0, #1
 80091de:	d103      	bne.n	80091e8 <_printf_common+0xac>
 80091e0:	f04f 30ff 	mov.w	r0, #4294967295
 80091e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091e8:	3501      	adds	r5, #1
 80091ea:	e7c6      	b.n	800917a <_printf_common+0x3e>
 80091ec:	18e1      	adds	r1, r4, r3
 80091ee:	1c5a      	adds	r2, r3, #1
 80091f0:	2030      	movs	r0, #48	@ 0x30
 80091f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80091f6:	4422      	add	r2, r4
 80091f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80091fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009200:	3302      	adds	r3, #2
 8009202:	e7c7      	b.n	8009194 <_printf_common+0x58>
 8009204:	2301      	movs	r3, #1
 8009206:	4622      	mov	r2, r4
 8009208:	4641      	mov	r1, r8
 800920a:	4638      	mov	r0, r7
 800920c:	47c8      	blx	r9
 800920e:	3001      	adds	r0, #1
 8009210:	d0e6      	beq.n	80091e0 <_printf_common+0xa4>
 8009212:	3601      	adds	r6, #1
 8009214:	e7d9      	b.n	80091ca <_printf_common+0x8e>
	...

08009218 <_printf_i>:
 8009218:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800921c:	7e0f      	ldrb	r7, [r1, #24]
 800921e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009220:	2f78      	cmp	r7, #120	@ 0x78
 8009222:	4691      	mov	r9, r2
 8009224:	4680      	mov	r8, r0
 8009226:	460c      	mov	r4, r1
 8009228:	469a      	mov	sl, r3
 800922a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800922e:	d807      	bhi.n	8009240 <_printf_i+0x28>
 8009230:	2f62      	cmp	r7, #98	@ 0x62
 8009232:	d80a      	bhi.n	800924a <_printf_i+0x32>
 8009234:	2f00      	cmp	r7, #0
 8009236:	f000 80d2 	beq.w	80093de <_printf_i+0x1c6>
 800923a:	2f58      	cmp	r7, #88	@ 0x58
 800923c:	f000 80b9 	beq.w	80093b2 <_printf_i+0x19a>
 8009240:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009244:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009248:	e03a      	b.n	80092c0 <_printf_i+0xa8>
 800924a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800924e:	2b15      	cmp	r3, #21
 8009250:	d8f6      	bhi.n	8009240 <_printf_i+0x28>
 8009252:	a101      	add	r1, pc, #4	@ (adr r1, 8009258 <_printf_i+0x40>)
 8009254:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009258:	080092b1 	.word	0x080092b1
 800925c:	080092c5 	.word	0x080092c5
 8009260:	08009241 	.word	0x08009241
 8009264:	08009241 	.word	0x08009241
 8009268:	08009241 	.word	0x08009241
 800926c:	08009241 	.word	0x08009241
 8009270:	080092c5 	.word	0x080092c5
 8009274:	08009241 	.word	0x08009241
 8009278:	08009241 	.word	0x08009241
 800927c:	08009241 	.word	0x08009241
 8009280:	08009241 	.word	0x08009241
 8009284:	080093c5 	.word	0x080093c5
 8009288:	080092ef 	.word	0x080092ef
 800928c:	0800937f 	.word	0x0800937f
 8009290:	08009241 	.word	0x08009241
 8009294:	08009241 	.word	0x08009241
 8009298:	080093e7 	.word	0x080093e7
 800929c:	08009241 	.word	0x08009241
 80092a0:	080092ef 	.word	0x080092ef
 80092a4:	08009241 	.word	0x08009241
 80092a8:	08009241 	.word	0x08009241
 80092ac:	08009387 	.word	0x08009387
 80092b0:	6833      	ldr	r3, [r6, #0]
 80092b2:	1d1a      	adds	r2, r3, #4
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	6032      	str	r2, [r6, #0]
 80092b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80092c0:	2301      	movs	r3, #1
 80092c2:	e09d      	b.n	8009400 <_printf_i+0x1e8>
 80092c4:	6833      	ldr	r3, [r6, #0]
 80092c6:	6820      	ldr	r0, [r4, #0]
 80092c8:	1d19      	adds	r1, r3, #4
 80092ca:	6031      	str	r1, [r6, #0]
 80092cc:	0606      	lsls	r6, r0, #24
 80092ce:	d501      	bpl.n	80092d4 <_printf_i+0xbc>
 80092d0:	681d      	ldr	r5, [r3, #0]
 80092d2:	e003      	b.n	80092dc <_printf_i+0xc4>
 80092d4:	0645      	lsls	r5, r0, #25
 80092d6:	d5fb      	bpl.n	80092d0 <_printf_i+0xb8>
 80092d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80092dc:	2d00      	cmp	r5, #0
 80092de:	da03      	bge.n	80092e8 <_printf_i+0xd0>
 80092e0:	232d      	movs	r3, #45	@ 0x2d
 80092e2:	426d      	negs	r5, r5
 80092e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092e8:	4859      	ldr	r0, [pc, #356]	@ (8009450 <_printf_i+0x238>)
 80092ea:	230a      	movs	r3, #10
 80092ec:	e011      	b.n	8009312 <_printf_i+0xfa>
 80092ee:	6821      	ldr	r1, [r4, #0]
 80092f0:	6833      	ldr	r3, [r6, #0]
 80092f2:	0608      	lsls	r0, r1, #24
 80092f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80092f8:	d402      	bmi.n	8009300 <_printf_i+0xe8>
 80092fa:	0649      	lsls	r1, r1, #25
 80092fc:	bf48      	it	mi
 80092fe:	b2ad      	uxthmi	r5, r5
 8009300:	2f6f      	cmp	r7, #111	@ 0x6f
 8009302:	4853      	ldr	r0, [pc, #332]	@ (8009450 <_printf_i+0x238>)
 8009304:	6033      	str	r3, [r6, #0]
 8009306:	bf14      	ite	ne
 8009308:	230a      	movne	r3, #10
 800930a:	2308      	moveq	r3, #8
 800930c:	2100      	movs	r1, #0
 800930e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009312:	6866      	ldr	r6, [r4, #4]
 8009314:	60a6      	str	r6, [r4, #8]
 8009316:	2e00      	cmp	r6, #0
 8009318:	bfa2      	ittt	ge
 800931a:	6821      	ldrge	r1, [r4, #0]
 800931c:	f021 0104 	bicge.w	r1, r1, #4
 8009320:	6021      	strge	r1, [r4, #0]
 8009322:	b90d      	cbnz	r5, 8009328 <_printf_i+0x110>
 8009324:	2e00      	cmp	r6, #0
 8009326:	d04b      	beq.n	80093c0 <_printf_i+0x1a8>
 8009328:	4616      	mov	r6, r2
 800932a:	fbb5 f1f3 	udiv	r1, r5, r3
 800932e:	fb03 5711 	mls	r7, r3, r1, r5
 8009332:	5dc7      	ldrb	r7, [r0, r7]
 8009334:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009338:	462f      	mov	r7, r5
 800933a:	42bb      	cmp	r3, r7
 800933c:	460d      	mov	r5, r1
 800933e:	d9f4      	bls.n	800932a <_printf_i+0x112>
 8009340:	2b08      	cmp	r3, #8
 8009342:	d10b      	bne.n	800935c <_printf_i+0x144>
 8009344:	6823      	ldr	r3, [r4, #0]
 8009346:	07df      	lsls	r7, r3, #31
 8009348:	d508      	bpl.n	800935c <_printf_i+0x144>
 800934a:	6923      	ldr	r3, [r4, #16]
 800934c:	6861      	ldr	r1, [r4, #4]
 800934e:	4299      	cmp	r1, r3
 8009350:	bfde      	ittt	le
 8009352:	2330      	movle	r3, #48	@ 0x30
 8009354:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009358:	f106 36ff 	addle.w	r6, r6, #4294967295
 800935c:	1b92      	subs	r2, r2, r6
 800935e:	6122      	str	r2, [r4, #16]
 8009360:	f8cd a000 	str.w	sl, [sp]
 8009364:	464b      	mov	r3, r9
 8009366:	aa03      	add	r2, sp, #12
 8009368:	4621      	mov	r1, r4
 800936a:	4640      	mov	r0, r8
 800936c:	f7ff fee6 	bl	800913c <_printf_common>
 8009370:	3001      	adds	r0, #1
 8009372:	d14a      	bne.n	800940a <_printf_i+0x1f2>
 8009374:	f04f 30ff 	mov.w	r0, #4294967295
 8009378:	b004      	add	sp, #16
 800937a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800937e:	6823      	ldr	r3, [r4, #0]
 8009380:	f043 0320 	orr.w	r3, r3, #32
 8009384:	6023      	str	r3, [r4, #0]
 8009386:	4833      	ldr	r0, [pc, #204]	@ (8009454 <_printf_i+0x23c>)
 8009388:	2778      	movs	r7, #120	@ 0x78
 800938a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800938e:	6823      	ldr	r3, [r4, #0]
 8009390:	6831      	ldr	r1, [r6, #0]
 8009392:	061f      	lsls	r7, r3, #24
 8009394:	f851 5b04 	ldr.w	r5, [r1], #4
 8009398:	d402      	bmi.n	80093a0 <_printf_i+0x188>
 800939a:	065f      	lsls	r7, r3, #25
 800939c:	bf48      	it	mi
 800939e:	b2ad      	uxthmi	r5, r5
 80093a0:	6031      	str	r1, [r6, #0]
 80093a2:	07d9      	lsls	r1, r3, #31
 80093a4:	bf44      	itt	mi
 80093a6:	f043 0320 	orrmi.w	r3, r3, #32
 80093aa:	6023      	strmi	r3, [r4, #0]
 80093ac:	b11d      	cbz	r5, 80093b6 <_printf_i+0x19e>
 80093ae:	2310      	movs	r3, #16
 80093b0:	e7ac      	b.n	800930c <_printf_i+0xf4>
 80093b2:	4827      	ldr	r0, [pc, #156]	@ (8009450 <_printf_i+0x238>)
 80093b4:	e7e9      	b.n	800938a <_printf_i+0x172>
 80093b6:	6823      	ldr	r3, [r4, #0]
 80093b8:	f023 0320 	bic.w	r3, r3, #32
 80093bc:	6023      	str	r3, [r4, #0]
 80093be:	e7f6      	b.n	80093ae <_printf_i+0x196>
 80093c0:	4616      	mov	r6, r2
 80093c2:	e7bd      	b.n	8009340 <_printf_i+0x128>
 80093c4:	6833      	ldr	r3, [r6, #0]
 80093c6:	6825      	ldr	r5, [r4, #0]
 80093c8:	6961      	ldr	r1, [r4, #20]
 80093ca:	1d18      	adds	r0, r3, #4
 80093cc:	6030      	str	r0, [r6, #0]
 80093ce:	062e      	lsls	r6, r5, #24
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	d501      	bpl.n	80093d8 <_printf_i+0x1c0>
 80093d4:	6019      	str	r1, [r3, #0]
 80093d6:	e002      	b.n	80093de <_printf_i+0x1c6>
 80093d8:	0668      	lsls	r0, r5, #25
 80093da:	d5fb      	bpl.n	80093d4 <_printf_i+0x1bc>
 80093dc:	8019      	strh	r1, [r3, #0]
 80093de:	2300      	movs	r3, #0
 80093e0:	6123      	str	r3, [r4, #16]
 80093e2:	4616      	mov	r6, r2
 80093e4:	e7bc      	b.n	8009360 <_printf_i+0x148>
 80093e6:	6833      	ldr	r3, [r6, #0]
 80093e8:	1d1a      	adds	r2, r3, #4
 80093ea:	6032      	str	r2, [r6, #0]
 80093ec:	681e      	ldr	r6, [r3, #0]
 80093ee:	6862      	ldr	r2, [r4, #4]
 80093f0:	2100      	movs	r1, #0
 80093f2:	4630      	mov	r0, r6
 80093f4:	f7f6 fef4 	bl	80001e0 <memchr>
 80093f8:	b108      	cbz	r0, 80093fe <_printf_i+0x1e6>
 80093fa:	1b80      	subs	r0, r0, r6
 80093fc:	6060      	str	r0, [r4, #4]
 80093fe:	6863      	ldr	r3, [r4, #4]
 8009400:	6123      	str	r3, [r4, #16]
 8009402:	2300      	movs	r3, #0
 8009404:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009408:	e7aa      	b.n	8009360 <_printf_i+0x148>
 800940a:	6923      	ldr	r3, [r4, #16]
 800940c:	4632      	mov	r2, r6
 800940e:	4649      	mov	r1, r9
 8009410:	4640      	mov	r0, r8
 8009412:	47d0      	blx	sl
 8009414:	3001      	adds	r0, #1
 8009416:	d0ad      	beq.n	8009374 <_printf_i+0x15c>
 8009418:	6823      	ldr	r3, [r4, #0]
 800941a:	079b      	lsls	r3, r3, #30
 800941c:	d413      	bmi.n	8009446 <_printf_i+0x22e>
 800941e:	68e0      	ldr	r0, [r4, #12]
 8009420:	9b03      	ldr	r3, [sp, #12]
 8009422:	4298      	cmp	r0, r3
 8009424:	bfb8      	it	lt
 8009426:	4618      	movlt	r0, r3
 8009428:	e7a6      	b.n	8009378 <_printf_i+0x160>
 800942a:	2301      	movs	r3, #1
 800942c:	4632      	mov	r2, r6
 800942e:	4649      	mov	r1, r9
 8009430:	4640      	mov	r0, r8
 8009432:	47d0      	blx	sl
 8009434:	3001      	adds	r0, #1
 8009436:	d09d      	beq.n	8009374 <_printf_i+0x15c>
 8009438:	3501      	adds	r5, #1
 800943a:	68e3      	ldr	r3, [r4, #12]
 800943c:	9903      	ldr	r1, [sp, #12]
 800943e:	1a5b      	subs	r3, r3, r1
 8009440:	42ab      	cmp	r3, r5
 8009442:	dcf2      	bgt.n	800942a <_printf_i+0x212>
 8009444:	e7eb      	b.n	800941e <_printf_i+0x206>
 8009446:	2500      	movs	r5, #0
 8009448:	f104 0619 	add.w	r6, r4, #25
 800944c:	e7f5      	b.n	800943a <_printf_i+0x222>
 800944e:	bf00      	nop
 8009450:	0800969d 	.word	0x0800969d
 8009454:	080096ae 	.word	0x080096ae

08009458 <memmove>:
 8009458:	4288      	cmp	r0, r1
 800945a:	b510      	push	{r4, lr}
 800945c:	eb01 0402 	add.w	r4, r1, r2
 8009460:	d902      	bls.n	8009468 <memmove+0x10>
 8009462:	4284      	cmp	r4, r0
 8009464:	4623      	mov	r3, r4
 8009466:	d807      	bhi.n	8009478 <memmove+0x20>
 8009468:	1e43      	subs	r3, r0, #1
 800946a:	42a1      	cmp	r1, r4
 800946c:	d008      	beq.n	8009480 <memmove+0x28>
 800946e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009472:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009476:	e7f8      	b.n	800946a <memmove+0x12>
 8009478:	4402      	add	r2, r0
 800947a:	4601      	mov	r1, r0
 800947c:	428a      	cmp	r2, r1
 800947e:	d100      	bne.n	8009482 <memmove+0x2a>
 8009480:	bd10      	pop	{r4, pc}
 8009482:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009486:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800948a:	e7f7      	b.n	800947c <memmove+0x24>

0800948c <_sbrk_r>:
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	4d06      	ldr	r5, [pc, #24]	@ (80094a8 <_sbrk_r+0x1c>)
 8009490:	2300      	movs	r3, #0
 8009492:	4604      	mov	r4, r0
 8009494:	4608      	mov	r0, r1
 8009496:	602b      	str	r3, [r5, #0]
 8009498:	f7f7 fb7a 	bl	8000b90 <_sbrk>
 800949c:	1c43      	adds	r3, r0, #1
 800949e:	d102      	bne.n	80094a6 <_sbrk_r+0x1a>
 80094a0:	682b      	ldr	r3, [r5, #0]
 80094a2:	b103      	cbz	r3, 80094a6 <_sbrk_r+0x1a>
 80094a4:	6023      	str	r3, [r4, #0]
 80094a6:	bd38      	pop	{r3, r4, r5, pc}
 80094a8:	20001d30 	.word	0x20001d30

080094ac <_realloc_r>:
 80094ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094b0:	4680      	mov	r8, r0
 80094b2:	4615      	mov	r5, r2
 80094b4:	460c      	mov	r4, r1
 80094b6:	b921      	cbnz	r1, 80094c2 <_realloc_r+0x16>
 80094b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094bc:	4611      	mov	r1, r2
 80094be:	f7ff bc59 	b.w	8008d74 <_malloc_r>
 80094c2:	b92a      	cbnz	r2, 80094d0 <_realloc_r+0x24>
 80094c4:	f7ff fbea 	bl	8008c9c <_free_r>
 80094c8:	2400      	movs	r4, #0
 80094ca:	4620      	mov	r0, r4
 80094cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094d0:	f000 f81a 	bl	8009508 <_malloc_usable_size_r>
 80094d4:	4285      	cmp	r5, r0
 80094d6:	4606      	mov	r6, r0
 80094d8:	d802      	bhi.n	80094e0 <_realloc_r+0x34>
 80094da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80094de:	d8f4      	bhi.n	80094ca <_realloc_r+0x1e>
 80094e0:	4629      	mov	r1, r5
 80094e2:	4640      	mov	r0, r8
 80094e4:	f7ff fc46 	bl	8008d74 <_malloc_r>
 80094e8:	4607      	mov	r7, r0
 80094ea:	2800      	cmp	r0, #0
 80094ec:	d0ec      	beq.n	80094c8 <_realloc_r+0x1c>
 80094ee:	42b5      	cmp	r5, r6
 80094f0:	462a      	mov	r2, r5
 80094f2:	4621      	mov	r1, r4
 80094f4:	bf28      	it	cs
 80094f6:	4632      	movcs	r2, r6
 80094f8:	f7ff fbc2 	bl	8008c80 <memcpy>
 80094fc:	4621      	mov	r1, r4
 80094fe:	4640      	mov	r0, r8
 8009500:	f7ff fbcc 	bl	8008c9c <_free_r>
 8009504:	463c      	mov	r4, r7
 8009506:	e7e0      	b.n	80094ca <_realloc_r+0x1e>

08009508 <_malloc_usable_size_r>:
 8009508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800950c:	1f18      	subs	r0, r3, #4
 800950e:	2b00      	cmp	r3, #0
 8009510:	bfbc      	itt	lt
 8009512:	580b      	ldrlt	r3, [r1, r0]
 8009514:	18c0      	addlt	r0, r0, r3
 8009516:	4770      	bx	lr

08009518 <_init>:
 8009518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800951a:	bf00      	nop
 800951c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800951e:	bc08      	pop	{r3}
 8009520:	469e      	mov	lr, r3
 8009522:	4770      	bx	lr

08009524 <_fini>:
 8009524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009526:	bf00      	nop
 8009528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800952a:	bc08      	pop	{r3}
 800952c:	469e      	mov	lr, r3
 800952e:	4770      	bx	lr
