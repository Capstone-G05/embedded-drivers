
nucleo-f334r8-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08006254  08006254  00007254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006318  08006318  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006318  08006318  00007318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006320  08006320  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006320  08006320  00007320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006324  08006324  00007324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006328  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008060  2**0
                  CONTENTS
 10 .bss          00001c70  20000060  20000060  00008060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001cd0  20001cd0  00008060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b84d  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003635  00000000  00000000  000238dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001638  00000000  00000000  00026f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001177  00000000  00000000  00028550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003526  00000000  00000000  000296c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bb06  00000000  00000000  0002cbed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdbcb  00000000  00000000  000486f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001162be  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006150  00000000  00000000  00116304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  0011c454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800623c 	.word	0x0800623c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800623c 	.word	0x0800623c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e4:	f000 fb2c 	bl	8000840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e8:	f000 f828 	bl	800023c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ec:	f000 f8f0 	bl	80003d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001f0:	f000 f8be 	bl	8000370 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80001f4:	f000 f87c 	bl	80002f0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001f8:	f003 f98a 	bl	8003510 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mainTask */
  mainTaskHandle = osThreadNew(StartMain, NULL, &mainTask_attributes);
 80001fc:	4a09      	ldr	r2, [pc, #36]	@ (8000224 <main+0x44>)
 80001fe:	2100      	movs	r1, #0
 8000200:	4809      	ldr	r0, [pc, #36]	@ (8000228 <main+0x48>)
 8000202:	f003 f9ed 	bl	80035e0 <osThreadNew>
 8000206:	4603      	mov	r3, r0
 8000208:	4a08      	ldr	r2, [pc, #32]	@ (800022c <main+0x4c>)
 800020a:	6013      	str	r3, [r2, #0]

  /* creation of otherTask */
  otherTaskHandle = osThreadNew(StartOther, NULL, &otherTask_attributes);
 800020c:	4a08      	ldr	r2, [pc, #32]	@ (8000230 <main+0x50>)
 800020e:	2100      	movs	r1, #0
 8000210:	4808      	ldr	r0, [pc, #32]	@ (8000234 <main+0x54>)
 8000212:	f003 f9e5 	bl	80035e0 <osThreadNew>
 8000216:	4603      	mov	r3, r0
 8000218:	4a07      	ldr	r2, [pc, #28]	@ (8000238 <main+0x58>)
 800021a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800021c:	f003 f9ac 	bl	8003578 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000220:	bf00      	nop
 8000222:	e7fd      	b.n	8000220 <main+0x40>
 8000224:	08006298 	.word	0x08006298
 8000228:	0800049d 	.word	0x0800049d
 800022c:	20000158 	.word	0x20000158
 8000230:	080062bc 	.word	0x080062bc
 8000234:	080004bd 	.word	0x080004bd
 8000238:	2000015c 	.word	0x2000015c

0800023c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b096      	sub	sp, #88	@ 0x58
 8000240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000246:	2228      	movs	r2, #40	@ 0x28
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f005 ff0e 	bl	800606c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	f107 031c 	add.w	r3, r7, #28
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
 8000258:	605a      	str	r2, [r3, #4]
 800025a:	609a      	str	r2, [r3, #8]
 800025c:	60da      	str	r2, [r3, #12]
 800025e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000260:	463b      	mov	r3, r7
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]
 800026c:	611a      	str	r2, [r3, #16]
 800026e:	615a      	str	r2, [r3, #20]
 8000270:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000272:	2302      	movs	r3, #2
 8000274:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000276:	2301      	movs	r3, #1
 8000278:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027a:	2310      	movs	r3, #16
 800027c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027e:	2302      	movs	r3, #2
 8000280:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000282:	2300      	movs	r3, #0
 8000284:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000286:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800028a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000290:	4618      	mov	r0, r3
 8000292:	f000 fec3 	bl	800101c <HAL_RCC_OscConfig>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800029c:	f000 f940 	bl	8000520 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a0:	230f      	movs	r3, #15
 80002a2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a4:	2302      	movs	r3, #2
 80002a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b6:	f107 031c 	add.w	r3, r7, #28
 80002ba:	2102      	movs	r1, #2
 80002bc:	4618      	mov	r0, r3
 80002be:	f001 feeb 	bl	8002098 <HAL_RCC_ClockConfig>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80002c8:	f000 f92a 	bl	8000520 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80002cc:	2320      	movs	r3, #32
 80002ce:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d4:	463b      	mov	r3, r7
 80002d6:	4618      	mov	r0, r3
 80002d8:	f002 f930 	bl	800253c <HAL_RCCEx_PeriphCLKConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80002e2:	f000 f91d 	bl	8000520 <Error_Handler>
  }
}
 80002e6:	bf00      	nop
 80002e8:	3758      	adds	r7, #88	@ 0x58
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000364 <MX_I2C1_Init+0x74>)
 80002f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000368 <MX_I2C1_Init+0x78>)
 80002f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80002fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000364 <MX_I2C1_Init+0x74>)
 80002fc:	4a1b      	ldr	r2, [pc, #108]	@ (800036c <MX_I2C1_Init+0x7c>)
 80002fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 32;
 8000300:	4b18      	ldr	r3, [pc, #96]	@ (8000364 <MX_I2C1_Init+0x74>)
 8000302:	2220      	movs	r2, #32
 8000304:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000306:	4b17      	ldr	r3, [pc, #92]	@ (8000364 <MX_I2C1_Init+0x74>)
 8000308:	2201      	movs	r2, #1
 800030a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800030c:	4b15      	ldr	r3, [pc, #84]	@ (8000364 <MX_I2C1_Init+0x74>)
 800030e:	2200      	movs	r2, #0
 8000310:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000312:	4b14      	ldr	r3, [pc, #80]	@ (8000364 <MX_I2C1_Init+0x74>)
 8000314:	2200      	movs	r2, #0
 8000316:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000318:	4b12      	ldr	r3, [pc, #72]	@ (8000364 <MX_I2C1_Init+0x74>)
 800031a:	2200      	movs	r2, #0
 800031c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800031e:	4b11      	ldr	r3, [pc, #68]	@ (8000364 <MX_I2C1_Init+0x74>)
 8000320:	2200      	movs	r2, #0
 8000322:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000324:	4b0f      	ldr	r3, [pc, #60]	@ (8000364 <MX_I2C1_Init+0x74>)
 8000326:	2200      	movs	r2, #0
 8000328:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800032a:	480e      	ldr	r0, [pc, #56]	@ (8000364 <MX_I2C1_Init+0x74>)
 800032c:	f000 fd44 	bl	8000db8 <HAL_I2C_Init>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000336:	f000 f8f3 	bl	8000520 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800033a:	2100      	movs	r1, #0
 800033c:	4809      	ldr	r0, [pc, #36]	@ (8000364 <MX_I2C1_Init+0x74>)
 800033e:	f000 fdd6 	bl	8000eee <HAL_I2CEx_ConfigAnalogFilter>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000348:	f000 f8ea 	bl	8000520 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800034c:	2100      	movs	r1, #0
 800034e:	4805      	ldr	r0, [pc, #20]	@ (8000364 <MX_I2C1_Init+0x74>)
 8000350:	f000 fe18 	bl	8000f84 <HAL_I2CEx_ConfigDigitalFilter>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800035a:	f000 f8e1 	bl	8000520 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	2000007c 	.word	0x2000007c
 8000368:	40005400 	.word	0x40005400
 800036c:	00201d2b 	.word	0x00201d2b

08000370 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000374:	4b14      	ldr	r3, [pc, #80]	@ (80003c8 <MX_USART2_UART_Init+0x58>)
 8000376:	4a15      	ldr	r2, [pc, #84]	@ (80003cc <MX_USART2_UART_Init+0x5c>)
 8000378:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800037a:	4b13      	ldr	r3, [pc, #76]	@ (80003c8 <MX_USART2_UART_Init+0x58>)
 800037c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000380:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000382:	4b11      	ldr	r3, [pc, #68]	@ (80003c8 <MX_USART2_UART_Init+0x58>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000388:	4b0f      	ldr	r3, [pc, #60]	@ (80003c8 <MX_USART2_UART_Init+0x58>)
 800038a:	2200      	movs	r2, #0
 800038c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800038e:	4b0e      	ldr	r3, [pc, #56]	@ (80003c8 <MX_USART2_UART_Init+0x58>)
 8000390:	2200      	movs	r2, #0
 8000392:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000394:	4b0c      	ldr	r3, [pc, #48]	@ (80003c8 <MX_USART2_UART_Init+0x58>)
 8000396:	220c      	movs	r2, #12
 8000398:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800039a:	4b0b      	ldr	r3, [pc, #44]	@ (80003c8 <MX_USART2_UART_Init+0x58>)
 800039c:	2200      	movs	r2, #0
 800039e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a0:	4b09      	ldr	r3, [pc, #36]	@ (80003c8 <MX_USART2_UART_Init+0x58>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003a6:	4b08      	ldr	r3, [pc, #32]	@ (80003c8 <MX_USART2_UART_Init+0x58>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003ac:	4b06      	ldr	r3, [pc, #24]	@ (80003c8 <MX_USART2_UART_Init+0x58>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003b2:	4805      	ldr	r0, [pc, #20]	@ (80003c8 <MX_USART2_UART_Init+0x58>)
 80003b4:	f002 fc82 	bl	8002cbc <HAL_UART_Init>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003be:	f000 f8af 	bl	8000520 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	200000d0 	.word	0x200000d0
 80003cc:	40004400 	.word	0x40004400

080003d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b08a      	sub	sp, #40	@ 0x28
 80003d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d6:	f107 0314 	add.w	r3, r7, #20
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
 80003e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000494 <MX_GPIO_Init+0xc4>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	4a2a      	ldr	r2, [pc, #168]	@ (8000494 <MX_GPIO_Init+0xc4>)
 80003ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80003f0:	6153      	str	r3, [r2, #20]
 80003f2:	4b28      	ldr	r3, [pc, #160]	@ (8000494 <MX_GPIO_Init+0xc4>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80003fa:	613b      	str	r3, [r7, #16]
 80003fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003fe:	4b25      	ldr	r3, [pc, #148]	@ (8000494 <MX_GPIO_Init+0xc4>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	4a24      	ldr	r2, [pc, #144]	@ (8000494 <MX_GPIO_Init+0xc4>)
 8000404:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000408:	6153      	str	r3, [r2, #20]
 800040a:	4b22      	ldr	r3, [pc, #136]	@ (8000494 <MX_GPIO_Init+0xc4>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000416:	4b1f      	ldr	r3, [pc, #124]	@ (8000494 <MX_GPIO_Init+0xc4>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	4a1e      	ldr	r2, [pc, #120]	@ (8000494 <MX_GPIO_Init+0xc4>)
 800041c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000420:	6153      	str	r3, [r2, #20]
 8000422:	4b1c      	ldr	r3, [pc, #112]	@ (8000494 <MX_GPIO_Init+0xc4>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800042a:	60bb      	str	r3, [r7, #8]
 800042c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800042e:	4b19      	ldr	r3, [pc, #100]	@ (8000494 <MX_GPIO_Init+0xc4>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4a18      	ldr	r2, [pc, #96]	@ (8000494 <MX_GPIO_Init+0xc4>)
 8000434:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000438:	6153      	str	r3, [r2, #20]
 800043a:	4b16      	ldr	r3, [pc, #88]	@ (8000494 <MX_GPIO_Init+0xc4>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000446:	2200      	movs	r2, #0
 8000448:	2120      	movs	r1, #32
 800044a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800044e:	f000 fc81 	bl	8000d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000452:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000458:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800045c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045e:	2300      	movs	r3, #0
 8000460:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000462:	f107 0314 	add.w	r3, r7, #20
 8000466:	4619      	mov	r1, r3
 8000468:	480b      	ldr	r0, [pc, #44]	@ (8000498 <MX_GPIO_Init+0xc8>)
 800046a:	f000 fb01 	bl	8000a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800046e:	2320      	movs	r3, #32
 8000470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000472:	2301      	movs	r3, #1
 8000474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000476:	2300      	movs	r3, #0
 8000478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047a:	2300      	movs	r3, #0
 800047c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800047e:	f107 0314 	add.w	r3, r7, #20
 8000482:	4619      	mov	r1, r3
 8000484:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000488:	f000 faf2 	bl	8000a70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800048c:	bf00      	nop
 800048e:	3728      	adds	r7, #40	@ 0x28
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	40021000 	.word	0x40021000
 8000498:	48000800 	.word	0x48000800

0800049c <StartMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMain */
void StartMain(void *argument)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    // Toggle on-board LED
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004a4:	2120      	movs	r1, #32
 80004a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004aa:	f000 fc6b 	bl	8000d84 <HAL_GPIO_TogglePin>
    osDelay(300);
 80004ae:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80004b2:	f003 f93f 	bl	8003734 <osDelay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004b6:	bf00      	nop
 80004b8:	e7f4      	b.n	80004a4 <StartMain+0x8>
	...

080004bc <StartOther>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOther */
void StartOther(void *argument)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOther */
  /* Infinite loop */
  for(;;)
  {
    // Toggle on-board LED
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004c4:	2120      	movs	r1, #32
 80004c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004ca:	f000 fc5b 	bl	8000d84 <HAL_GPIO_TogglePin>
    // Send heart beat to Serial Port
    char *hbeat = "STM32 heart beat\n\r";
 80004ce:	4b09      	ldr	r3, [pc, #36]	@ (80004f4 <StartOther+0x38>)
 80004d0:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart2, (uint8_t*)hbeat, strlen(hbeat), HAL_MAX_DELAY);
 80004d2:	68f8      	ldr	r0, [r7, #12]
 80004d4:	f7ff fe7c 	bl	80001d0 <strlen>
 80004d8:	4603      	mov	r3, r0
 80004da:	b29a      	uxth	r2, r3
 80004dc:	f04f 33ff 	mov.w	r3, #4294967295
 80004e0:	68f9      	ldr	r1, [r7, #12]
 80004e2:	4805      	ldr	r0, [pc, #20]	@ (80004f8 <StartOther+0x3c>)
 80004e4:	f002 fc38 	bl	8002d58 <HAL_UART_Transmit>
    osDelay(1000);
 80004e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004ec:	f003 f922 	bl	8003734 <osDelay>
  {
 80004f0:	bf00      	nop
 80004f2:	e7e7      	b.n	80004c4 <StartOther+0x8>
 80004f4:	0800626c 	.word	0x0800626c
 80004f8:	200000d0 	.word	0x200000d0

080004fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a04      	ldr	r2, [pc, #16]	@ (800051c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d101      	bne.n	8000512 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800050e:	f000 f9ad 	bl	800086c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40001000 	.word	0x40001000

08000520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000524:	b672      	cpsid	i
}
 8000526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000528:	bf00      	nop
 800052a:	e7fd      	b.n	8000528 <Error_Handler+0x8>

0800052c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000532:	4b11      	ldr	r3, [pc, #68]	@ (8000578 <HAL_MspInit+0x4c>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	4a10      	ldr	r2, [pc, #64]	@ (8000578 <HAL_MspInit+0x4c>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	6193      	str	r3, [r2, #24]
 800053e:	4b0e      	ldr	r3, [pc, #56]	@ (8000578 <HAL_MspInit+0x4c>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800054a:	4b0b      	ldr	r3, [pc, #44]	@ (8000578 <HAL_MspInit+0x4c>)
 800054c:	69db      	ldr	r3, [r3, #28]
 800054e:	4a0a      	ldr	r2, [pc, #40]	@ (8000578 <HAL_MspInit+0x4c>)
 8000550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000554:	61d3      	str	r3, [r2, #28]
 8000556:	4b08      	ldr	r3, [pc, #32]	@ (8000578 <HAL_MspInit+0x4c>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	210f      	movs	r1, #15
 8000566:	f06f 0001 	mvn.w	r0, #1
 800056a:	f000 fa57 	bl	8000a1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40021000 	.word	0x40021000

0800057c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	@ 0x28
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a17      	ldr	r2, [pc, #92]	@ (80005f8 <HAL_I2C_MspInit+0x7c>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d128      	bne.n	80005f0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800059e:	4b17      	ldr	r3, [pc, #92]	@ (80005fc <HAL_I2C_MspInit+0x80>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a16      	ldr	r2, [pc, #88]	@ (80005fc <HAL_I2C_MspInit+0x80>)
 80005a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005a8:	6153      	str	r3, [r2, #20]
 80005aa:	4b14      	ldr	r3, [pc, #80]	@ (80005fc <HAL_I2C_MspInit+0x80>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80005ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005bc:	2312      	movs	r3, #18
 80005be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c4:	2303      	movs	r3, #3
 80005c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005c8:	2304      	movs	r3, #4
 80005ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	4619      	mov	r1, r3
 80005d2:	480b      	ldr	r0, [pc, #44]	@ (8000600 <HAL_I2C_MspInit+0x84>)
 80005d4:	f000 fa4c 	bl	8000a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005d8:	4b08      	ldr	r3, [pc, #32]	@ (80005fc <HAL_I2C_MspInit+0x80>)
 80005da:	69db      	ldr	r3, [r3, #28]
 80005dc:	4a07      	ldr	r2, [pc, #28]	@ (80005fc <HAL_I2C_MspInit+0x80>)
 80005de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005e2:	61d3      	str	r3, [r2, #28]
 80005e4:	4b05      	ldr	r3, [pc, #20]	@ (80005fc <HAL_I2C_MspInit+0x80>)
 80005e6:	69db      	ldr	r3, [r3, #28]
 80005e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80005f0:	bf00      	nop
 80005f2:	3728      	adds	r7, #40	@ 0x28
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40005400 	.word	0x40005400
 80005fc:	40021000 	.word	0x40021000
 8000600:	48000400 	.word	0x48000400

08000604 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	@ 0x28
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a17      	ldr	r2, [pc, #92]	@ (8000680 <HAL_UART_MspInit+0x7c>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d128      	bne.n	8000678 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000626:	4b17      	ldr	r3, [pc, #92]	@ (8000684 <HAL_UART_MspInit+0x80>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	4a16      	ldr	r2, [pc, #88]	@ (8000684 <HAL_UART_MspInit+0x80>)
 800062c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000630:	61d3      	str	r3, [r2, #28]
 8000632:	4b14      	ldr	r3, [pc, #80]	@ (8000684 <HAL_UART_MspInit+0x80>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <HAL_UART_MspInit+0x80>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	4a10      	ldr	r2, [pc, #64]	@ (8000684 <HAL_UART_MspInit+0x80>)
 8000644:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000648:	6153      	str	r3, [r2, #20]
 800064a:	4b0e      	ldr	r3, [pc, #56]	@ (8000684 <HAL_UART_MspInit+0x80>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000656:	230c      	movs	r3, #12
 8000658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065a:	2302      	movs	r3, #2
 800065c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000662:	2303      	movs	r3, #3
 8000664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000666:	2307      	movs	r3, #7
 8000668:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000674:	f000 f9fc 	bl	8000a70 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000678:	bf00      	nop
 800067a:	3728      	adds	r7, #40	@ 0x28
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40004400 	.word	0x40004400
 8000684:	40021000 	.word	0x40021000

08000688 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08e      	sub	sp, #56	@ 0x38
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000690:	2300      	movs	r3, #0
 8000692:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000694:	2300      	movs	r3, #0
 8000696:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000698:	4b33      	ldr	r3, [pc, #204]	@ (8000768 <HAL_InitTick+0xe0>)
 800069a:	69db      	ldr	r3, [r3, #28]
 800069c:	4a32      	ldr	r2, [pc, #200]	@ (8000768 <HAL_InitTick+0xe0>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	61d3      	str	r3, [r2, #28]
 80006a4:	4b30      	ldr	r3, [pc, #192]	@ (8000768 <HAL_InitTick+0xe0>)
 80006a6:	69db      	ldr	r3, [r3, #28]
 80006a8:	f003 0310 	and.w	r3, r3, #16
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006b0:	f107 0210 	add.w	r2, r7, #16
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	4611      	mov	r1, r2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 ff0c 	bl	80024d8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80006c0:	6a3b      	ldr	r3, [r7, #32]
 80006c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80006c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d103      	bne.n	80006d2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80006ca:	f001 fec1 	bl	8002450 <HAL_RCC_GetPCLK1Freq>
 80006ce:	6378      	str	r0, [r7, #52]	@ 0x34
 80006d0:	e004      	b.n	80006dc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80006d2:	f001 febd 	bl	8002450 <HAL_RCC_GetPCLK1Freq>
 80006d6:	4603      	mov	r3, r0
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006de:	4a23      	ldr	r2, [pc, #140]	@ (800076c <HAL_InitTick+0xe4>)
 80006e0:	fba2 2303 	umull	r2, r3, r2, r3
 80006e4:	0c9b      	lsrs	r3, r3, #18
 80006e6:	3b01      	subs	r3, #1
 80006e8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80006ea:	4b21      	ldr	r3, [pc, #132]	@ (8000770 <HAL_InitTick+0xe8>)
 80006ec:	4a21      	ldr	r2, [pc, #132]	@ (8000774 <HAL_InitTick+0xec>)
 80006ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80006f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <HAL_InitTick+0xe8>)
 80006f2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006f6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80006f8:	4a1d      	ldr	r2, [pc, #116]	@ (8000770 <HAL_InitTick+0xe8>)
 80006fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006fc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80006fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <HAL_InitTick+0xe8>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000704:	4b1a      	ldr	r3, [pc, #104]	@ (8000770 <HAL_InitTick+0xe8>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070a:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <HAL_InitTick+0xe8>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000710:	4817      	ldr	r0, [pc, #92]	@ (8000770 <HAL_InitTick+0xe8>)
 8000712:	f002 f849 	bl	80027a8 <HAL_TIM_Base_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800071c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000720:	2b00      	cmp	r3, #0
 8000722:	d11b      	bne.n	800075c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000724:	4812      	ldr	r0, [pc, #72]	@ (8000770 <HAL_InitTick+0xe8>)
 8000726:	f002 f8a1 	bl	800286c <HAL_TIM_Base_Start_IT>
 800072a:	4603      	mov	r3, r0
 800072c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000730:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000734:	2b00      	cmp	r3, #0
 8000736:	d111      	bne.n	800075c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000738:	2036      	movs	r0, #54	@ 0x36
 800073a:	f000 f98b 	bl	8000a54 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2b0f      	cmp	r3, #15
 8000742:	d808      	bhi.n	8000756 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority, 0U);
 8000744:	2200      	movs	r2, #0
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	2036      	movs	r0, #54	@ 0x36
 800074a:	f000 f967 	bl	8000a1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800074e:	4a0a      	ldr	r2, [pc, #40]	@ (8000778 <HAL_InitTick+0xf0>)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	e002      	b.n	800075c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000756:	2301      	movs	r3, #1
 8000758:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800075c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000760:	4618      	mov	r0, r3
 8000762:	3738      	adds	r7, #56	@ 0x38
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40021000 	.word	0x40021000
 800076c:	431bde83 	.word	0x431bde83
 8000770:	20000160 	.word	0x20000160
 8000774:	40001000 	.word	0x40001000
 8000778:	20000004 	.word	0x20000004

0800077c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <NMI_Handler+0x4>

08000784 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <HardFault_Handler+0x4>

0800078c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <MemManage_Handler+0x4>

08000794 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <BusFault_Handler+0x4>

0800079c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <UsageFault_Handler+0x4>

080007a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
	...

080007b4 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80007b8:	4802      	ldr	r0, [pc, #8]	@ (80007c4 <TIM6_DAC1_IRQHandler+0x10>)
 80007ba:	f002 f8b3 	bl	8002924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000160 	.word	0x20000160

080007c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <SystemInit+0x20>)
 80007ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007d2:	4a05      	ldr	r2, [pc, #20]	@ (80007e8 <SystemInit+0x20>)
 80007d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000824 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80007f0:	f7ff ffea 	bl	80007c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f4:	480c      	ldr	r0, [pc, #48]	@ (8000828 <LoopForever+0x6>)
  ldr r1, =_edata
 80007f6:	490d      	ldr	r1, [pc, #52]	@ (800082c <LoopForever+0xa>)
  ldr r2, =_sidata
 80007f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000830 <LoopForever+0xe>)
  movs r3, #0
 80007fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007fc:	e002      	b.n	8000804 <LoopCopyDataInit>

080007fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000802:	3304      	adds	r3, #4

08000804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000808:	d3f9      	bcc.n	80007fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080a:	4a0a      	ldr	r2, [pc, #40]	@ (8000834 <LoopForever+0x12>)
  ldr r4, =_ebss
 800080c:	4c0a      	ldr	r4, [pc, #40]	@ (8000838 <LoopForever+0x16>)
  movs r3, #0
 800080e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000810:	e001      	b.n	8000816 <LoopFillZerobss>

08000812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000814:	3204      	adds	r2, #4

08000816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000818:	d3fb      	bcc.n	8000812 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800081a:	f005 fc85 	bl	8006128 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800081e:	f7ff fcdf 	bl	80001e0 <main>

08000822 <LoopForever>:

LoopForever:
    b LoopForever
 8000822:	e7fe      	b.n	8000822 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000824:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800082c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000830:	08006328 	.word	0x08006328
  ldr r2, =_sbss
 8000834:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000838:	20001cd0 	.word	0x20001cd0

0800083c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800083c:	e7fe      	b.n	800083c <ADC1_2_IRQHandler>
	...

08000840 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000844:	4b08      	ldr	r3, [pc, #32]	@ (8000868 <HAL_Init+0x28>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a07      	ldr	r2, [pc, #28]	@ (8000868 <HAL_Init+0x28>)
 800084a:	f043 0310 	orr.w	r3, r3, #16
 800084e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000850:	2003      	movs	r0, #3
 8000852:	f000 f8d8 	bl	8000a06 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000856:	200f      	movs	r0, #15
 8000858:	f7ff ff16 	bl	8000688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800085c:	f7ff fe66 	bl	800052c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40022000 	.word	0x40022000

0800086c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000870:	4b06      	ldr	r3, [pc, #24]	@ (800088c <HAL_IncTick+0x20>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	461a      	mov	r2, r3
 8000876:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <HAL_IncTick+0x24>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4413      	add	r3, r2
 800087c:	4a04      	ldr	r2, [pc, #16]	@ (8000890 <HAL_IncTick+0x24>)
 800087e:	6013      	str	r3, [r2, #0]
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	20000008 	.word	0x20000008
 8000890:	200001ac 	.word	0x200001ac

08000894 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  return uwTick;  
 8000898:	4b03      	ldr	r3, [pc, #12]	@ (80008a8 <HAL_GetTick+0x14>)
 800089a:	681b      	ldr	r3, [r3, #0]
}
 800089c:	4618      	mov	r0, r3
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	200001ac 	.word	0x200001ac

080008ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f003 0307 	and.w	r3, r3, #7
 80008ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008bc:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <__NVIC_SetPriorityGrouping+0x44>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008c2:	68ba      	ldr	r2, [r7, #8]
 80008c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008c8:	4013      	ands	r3, r2
 80008ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008de:	4a04      	ldr	r2, [pc, #16]	@ (80008f0 <__NVIC_SetPriorityGrouping+0x44>)
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	60d3      	str	r3, [r2, #12]
}
 80008e4:	bf00      	nop
 80008e6:	3714      	adds	r7, #20
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f8:	4b04      	ldr	r3, [pc, #16]	@ (800090c <__NVIC_GetPriorityGrouping+0x18>)
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	0a1b      	lsrs	r3, r3, #8
 80008fe:	f003 0307 	and.w	r3, r3, #7
}
 8000902:	4618      	mov	r0, r3
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800091a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091e:	2b00      	cmp	r3, #0
 8000920:	db0b      	blt.n	800093a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	f003 021f 	and.w	r2, r3, #31
 8000928:	4907      	ldr	r1, [pc, #28]	@ (8000948 <__NVIC_EnableIRQ+0x38>)
 800092a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092e:	095b      	lsrs	r3, r3, #5
 8000930:	2001      	movs	r0, #1
 8000932:	fa00 f202 	lsl.w	r2, r0, r2
 8000936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e000e100 	.word	0xe000e100

0800094c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	6039      	str	r1, [r7, #0]
 8000956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095c:	2b00      	cmp	r3, #0
 800095e:	db0a      	blt.n	8000976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	b2da      	uxtb	r2, r3
 8000964:	490c      	ldr	r1, [pc, #48]	@ (8000998 <__NVIC_SetPriority+0x4c>)
 8000966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096a:	0112      	lsls	r2, r2, #4
 800096c:	b2d2      	uxtb	r2, r2
 800096e:	440b      	add	r3, r1
 8000970:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000974:	e00a      	b.n	800098c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	b2da      	uxtb	r2, r3
 800097a:	4908      	ldr	r1, [pc, #32]	@ (800099c <__NVIC_SetPriority+0x50>)
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	f003 030f 	and.w	r3, r3, #15
 8000982:	3b04      	subs	r3, #4
 8000984:	0112      	lsls	r2, r2, #4
 8000986:	b2d2      	uxtb	r2, r2
 8000988:	440b      	add	r3, r1
 800098a:	761a      	strb	r2, [r3, #24]
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	e000e100 	.word	0xe000e100
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b089      	sub	sp, #36	@ 0x24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f003 0307 	and.w	r3, r3, #7
 80009b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	f1c3 0307 	rsb	r3, r3, #7
 80009ba:	2b04      	cmp	r3, #4
 80009bc:	bf28      	it	cs
 80009be:	2304      	movcs	r3, #4
 80009c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	3304      	adds	r3, #4
 80009c6:	2b06      	cmp	r3, #6
 80009c8:	d902      	bls.n	80009d0 <NVIC_EncodePriority+0x30>
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	3b03      	subs	r3, #3
 80009ce:	e000      	b.n	80009d2 <NVIC_EncodePriority+0x32>
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d4:	f04f 32ff 	mov.w	r2, #4294967295
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	43da      	mvns	r2, r3
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	401a      	ands	r2, r3
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e8:	f04f 31ff 	mov.w	r1, #4294967295
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	fa01 f303 	lsl.w	r3, r1, r3
 80009f2:	43d9      	mvns	r1, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f8:	4313      	orrs	r3, r2
         );
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3724      	adds	r7, #36	@ 0x24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff ff4c 	bl	80008ac <__NVIC_SetPriorityGrouping>
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
 8000a28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a2e:	f7ff ff61 	bl	80008f4 <__NVIC_GetPriorityGrouping>
 8000a32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	68b9      	ldr	r1, [r7, #8]
 8000a38:	6978      	ldr	r0, [r7, #20]
 8000a3a:	f7ff ffb1 	bl	80009a0 <NVIC_EncodePriority>
 8000a3e:	4602      	mov	r2, r0
 8000a40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a44:	4611      	mov	r1, r2
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff ff80 	bl	800094c <__NVIC_SetPriority>
}
 8000a4c:	bf00      	nop
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff ff54 	bl	8000910 <__NVIC_EnableIRQ>
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b087      	sub	sp, #28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a7e:	e14e      	b.n	8000d1e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	2101      	movs	r1, #1
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	f000 8140 	beq.w	8000d18 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f003 0303 	and.w	r3, r3, #3
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d005      	beq.n	8000ab0 <HAL_GPIO_Init+0x40>
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f003 0303 	and.w	r3, r3, #3
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d130      	bne.n	8000b12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	689b      	ldr	r3, [r3, #8]
 8000ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	2203      	movs	r2, #3
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	68da      	ldr	r2, [r3, #12]
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43db      	mvns	r3, r3
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	4013      	ands	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	091b      	lsrs	r3, r3, #4
 8000afc:	f003 0201 	and.w	r2, r3, #1
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f003 0303 	and.w	r3, r3, #3
 8000b1a:	2b03      	cmp	r3, #3
 8000b1c:	d017      	beq.n	8000b4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	68db      	ldr	r3, [r3, #12]
 8000b22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	2203      	movs	r2, #3
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	4013      	ands	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	689a      	ldr	r2, [r3, #8]
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f003 0303 	and.w	r3, r3, #3
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d123      	bne.n	8000ba2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	08da      	lsrs	r2, r3, #3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	3208      	adds	r2, #8
 8000b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	220f      	movs	r2, #15
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43db      	mvns	r3, r3
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	691a      	ldr	r2, [r3, #16]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	f003 0307 	and.w	r3, r3, #7
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	08da      	lsrs	r2, r3, #3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3208      	adds	r2, #8
 8000b9c:	6939      	ldr	r1, [r7, #16]
 8000b9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	2203      	movs	r2, #3
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f003 0203 	and.w	r2, r3, #3
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f000 809a 	beq.w	8000d18 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be4:	4b55      	ldr	r3, [pc, #340]	@ (8000d3c <HAL_GPIO_Init+0x2cc>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	4a54      	ldr	r2, [pc, #336]	@ (8000d3c <HAL_GPIO_Init+0x2cc>)
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	6193      	str	r3, [r2, #24]
 8000bf0:	4b52      	ldr	r3, [pc, #328]	@ (8000d3c <HAL_GPIO_Init+0x2cc>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bfc:	4a50      	ldr	r2, [pc, #320]	@ (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	089b      	lsrs	r3, r3, #2
 8000c02:	3302      	adds	r3, #2
 8000c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	f003 0303 	and.w	r3, r3, #3
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	220f      	movs	r2, #15
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c26:	d013      	beq.n	8000c50 <HAL_GPIO_Init+0x1e0>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a46      	ldr	r2, [pc, #280]	@ (8000d44 <HAL_GPIO_Init+0x2d4>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d00d      	beq.n	8000c4c <HAL_GPIO_Init+0x1dc>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a45      	ldr	r2, [pc, #276]	@ (8000d48 <HAL_GPIO_Init+0x2d8>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d007      	beq.n	8000c48 <HAL_GPIO_Init+0x1d8>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a44      	ldr	r2, [pc, #272]	@ (8000d4c <HAL_GPIO_Init+0x2dc>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d101      	bne.n	8000c44 <HAL_GPIO_Init+0x1d4>
 8000c40:	2303      	movs	r3, #3
 8000c42:	e006      	b.n	8000c52 <HAL_GPIO_Init+0x1e2>
 8000c44:	2305      	movs	r3, #5
 8000c46:	e004      	b.n	8000c52 <HAL_GPIO_Init+0x1e2>
 8000c48:	2302      	movs	r3, #2
 8000c4a:	e002      	b.n	8000c52 <HAL_GPIO_Init+0x1e2>
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e000      	b.n	8000c52 <HAL_GPIO_Init+0x1e2>
 8000c50:	2300      	movs	r3, #0
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	f002 0203 	and.w	r2, r2, #3
 8000c58:	0092      	lsls	r2, r2, #2
 8000c5a:	4093      	lsls	r3, r2
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c62:	4937      	ldr	r1, [pc, #220]	@ (8000d40 <HAL_GPIO_Init+0x2d0>)
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	089b      	lsrs	r3, r3, #2
 8000c68:	3302      	adds	r3, #2
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c70:	4b37      	ldr	r3, [pc, #220]	@ (8000d50 <HAL_GPIO_Init+0x2e0>)
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d003      	beq.n	8000c94 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c94:	4a2e      	ldr	r2, [pc, #184]	@ (8000d50 <HAL_GPIO_Init+0x2e0>)
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c9a:	4b2d      	ldr	r3, [pc, #180]	@ (8000d50 <HAL_GPIO_Init+0x2e0>)
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d003      	beq.n	8000cbe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cbe:	4a24      	ldr	r2, [pc, #144]	@ (8000d50 <HAL_GPIO_Init+0x2e0>)
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000cc4:	4b22      	ldr	r3, [pc, #136]	@ (8000d50 <HAL_GPIO_Init+0x2e0>)
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d003      	beq.n	8000ce8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ce8:	4a19      	ldr	r2, [pc, #100]	@ (8000d50 <HAL_GPIO_Init+0x2e0>)
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cee:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <HAL_GPIO_Init+0x2e0>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d12:	4a0f      	ldr	r2, [pc, #60]	@ (8000d50 <HAL_GPIO_Init+0x2e0>)
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	fa22 f303 	lsr.w	r3, r2, r3
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	f47f aea9 	bne.w	8000a80 <HAL_GPIO_Init+0x10>
  }
}
 8000d2e:	bf00      	nop
 8000d30:	bf00      	nop
 8000d32:	371c      	adds	r7, #28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40010000 	.word	0x40010000
 8000d44:	48000400 	.word	0x48000400
 8000d48:	48000800 	.word	0x48000800
 8000d4c:	48000c00 	.word	0x48000c00
 8000d50:	40010400 	.word	0x40010400

08000d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	807b      	strh	r3, [r7, #2]
 8000d60:	4613      	mov	r3, r2
 8000d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d64:	787b      	ldrb	r3, [r7, #1]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d003      	beq.n	8000d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d6a:	887a      	ldrh	r2, [r7, #2]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d70:	e002      	b.n	8000d78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d72:	887a      	ldrh	r2, [r7, #2]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d96:	887a      	ldrh	r2, [r7, #2]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	041a      	lsls	r2, r3, #16
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	43d9      	mvns	r1, r3
 8000da2:	887b      	ldrh	r3, [r7, #2]
 8000da4:	400b      	ands	r3, r1
 8000da6:	431a      	orrs	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	619a      	str	r2, [r3, #24]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e08d      	b.n	8000ee6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d106      	bne.n	8000de4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff fbcc 	bl	800057c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2224      	movs	r2, #36	@ 0x24
 8000de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 0201 	bic.w	r2, r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685a      	ldr	r2, [r3, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000e08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	689a      	ldr	r2, [r3, #8]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000e18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d107      	bne.n	8000e32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	689a      	ldr	r2, [r3, #8]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	e006      	b.n	8000e40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	689a      	ldr	r2, [r3, #8]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000e3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d108      	bne.n	8000e5a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	e007      	b.n	8000e6a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000e68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	6812      	ldr	r2, [r2, #0]
 8000e74:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	68da      	ldr	r2, [r3, #12]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000e8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	691a      	ldr	r2, [r3, #16]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	69d9      	ldr	r1, [r3, #28]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6a1a      	ldr	r2, [r3, #32]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f042 0201 	orr.w	r2, r2, #1
 8000ec6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2220      	movs	r2, #32
 8000ed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
 8000ef6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b20      	cmp	r3, #32
 8000f02:	d138      	bne.n	8000f76 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d101      	bne.n	8000f12 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000f0e:	2302      	movs	r3, #2
 8000f10:	e032      	b.n	8000f78 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2201      	movs	r2, #1
 8000f16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2224      	movs	r2, #36	@ 0x24
 8000f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f022 0201 	bic.w	r2, r2, #1
 8000f30:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000f40:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	6819      	ldr	r1, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	683a      	ldr	r2, [r7, #0]
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f042 0201 	orr.w	r2, r2, #1
 8000f60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2220      	movs	r2, #32
 8000f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e000      	b.n	8000f78 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000f76:	2302      	movs	r3, #2
  }
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b20      	cmp	r3, #32
 8000f98:	d139      	bne.n	800100e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d101      	bne.n	8000fa8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	e033      	b.n	8001010 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2201      	movs	r2, #1
 8000fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2224      	movs	r2, #36	@ 0x24
 8000fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 0201 	bic.w	r2, r2, #1
 8000fc6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000fd6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	021b      	lsls	r3, r3, #8
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f042 0201 	orr.w	r2, r2, #1
 8000ff8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2220      	movs	r2, #32
 8000ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e000      	b.n	8001010 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800100e:	2302      	movs	r3, #2
  }
}
 8001010:	4618      	mov	r0, r3
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001022:	af00      	add	r7, sp, #0
 8001024:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001028:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800102c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800102e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001032:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d102      	bne.n	8001042 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	f001 b823 	b.w	8002088 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001042:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001046:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b00      	cmp	r3, #0
 8001054:	f000 817d 	beq.w	8001352 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001058:	4bbc      	ldr	r3, [pc, #752]	@ (800134c <HAL_RCC_OscConfig+0x330>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 030c 	and.w	r3, r3, #12
 8001060:	2b04      	cmp	r3, #4
 8001062:	d00c      	beq.n	800107e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001064:	4bb9      	ldr	r3, [pc, #740]	@ (800134c <HAL_RCC_OscConfig+0x330>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 030c 	and.w	r3, r3, #12
 800106c:	2b08      	cmp	r3, #8
 800106e:	d15c      	bne.n	800112a <HAL_RCC_OscConfig+0x10e>
 8001070:	4bb6      	ldr	r3, [pc, #728]	@ (800134c <HAL_RCC_OscConfig+0x330>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800107c:	d155      	bne.n	800112a <HAL_RCC_OscConfig+0x10e>
 800107e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001082:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001086:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800108a:	fa93 f3a3 	rbit	r3, r3
 800108e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001092:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001096:	fab3 f383 	clz	r3, r3
 800109a:	b2db      	uxtb	r3, r3
 800109c:	095b      	lsrs	r3, r3, #5
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d102      	bne.n	80010b0 <HAL_RCC_OscConfig+0x94>
 80010aa:	4ba8      	ldr	r3, [pc, #672]	@ (800134c <HAL_RCC_OscConfig+0x330>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	e015      	b.n	80010dc <HAL_RCC_OscConfig+0xc0>
 80010b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010b4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80010bc:	fa93 f3a3 	rbit	r3, r3
 80010c0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80010c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010c8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80010cc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80010d0:	fa93 f3a3 	rbit	r3, r3
 80010d4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80010d8:	4b9c      	ldr	r3, [pc, #624]	@ (800134c <HAL_RCC_OscConfig+0x330>)
 80010da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010dc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010e0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80010e4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80010e8:	fa92 f2a2 	rbit	r2, r2
 80010ec:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80010f0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80010f4:	fab2 f282 	clz	r2, r2
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	f042 0220 	orr.w	r2, r2, #32
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	f002 021f 	and.w	r2, r2, #31
 8001104:	2101      	movs	r1, #1
 8001106:	fa01 f202 	lsl.w	r2, r1, r2
 800110a:	4013      	ands	r3, r2
 800110c:	2b00      	cmp	r3, #0
 800110e:	f000 811f 	beq.w	8001350 <HAL_RCC_OscConfig+0x334>
 8001112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001116:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	f040 8116 	bne.w	8001350 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	f000 bfaf 	b.w	8002088 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800112a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800112e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800113a:	d106      	bne.n	800114a <HAL_RCC_OscConfig+0x12e>
 800113c:	4b83      	ldr	r3, [pc, #524]	@ (800134c <HAL_RCC_OscConfig+0x330>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a82      	ldr	r2, [pc, #520]	@ (800134c <HAL_RCC_OscConfig+0x330>)
 8001142:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	e036      	b.n	80011b8 <HAL_RCC_OscConfig+0x19c>
 800114a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800114e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10c      	bne.n	8001174 <HAL_RCC_OscConfig+0x158>
 800115a:	4b7c      	ldr	r3, [pc, #496]	@ (800134c <HAL_RCC_OscConfig+0x330>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a7b      	ldr	r2, [pc, #492]	@ (800134c <HAL_RCC_OscConfig+0x330>)
 8001160:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	4b79      	ldr	r3, [pc, #484]	@ (800134c <HAL_RCC_OscConfig+0x330>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a78      	ldr	r2, [pc, #480]	@ (800134c <HAL_RCC_OscConfig+0x330>)
 800116c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	e021      	b.n	80011b8 <HAL_RCC_OscConfig+0x19c>
 8001174:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001178:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001184:	d10c      	bne.n	80011a0 <HAL_RCC_OscConfig+0x184>
 8001186:	4b71      	ldr	r3, [pc, #452]	@ (800134c <HAL_RCC_OscConfig+0x330>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a70      	ldr	r2, [pc, #448]	@ (800134c <HAL_RCC_OscConfig+0x330>)
 800118c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	4b6e      	ldr	r3, [pc, #440]	@ (800134c <HAL_RCC_OscConfig+0x330>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a6d      	ldr	r2, [pc, #436]	@ (800134c <HAL_RCC_OscConfig+0x330>)
 8001198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	e00b      	b.n	80011b8 <HAL_RCC_OscConfig+0x19c>
 80011a0:	4b6a      	ldr	r3, [pc, #424]	@ (800134c <HAL_RCC_OscConfig+0x330>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a69      	ldr	r2, [pc, #420]	@ (800134c <HAL_RCC_OscConfig+0x330>)
 80011a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	4b67      	ldr	r3, [pc, #412]	@ (800134c <HAL_RCC_OscConfig+0x330>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a66      	ldr	r2, [pc, #408]	@ (800134c <HAL_RCC_OscConfig+0x330>)
 80011b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011b6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011b8:	4b64      	ldr	r3, [pc, #400]	@ (800134c <HAL_RCC_OscConfig+0x330>)
 80011ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011bc:	f023 020f 	bic.w	r2, r3, #15
 80011c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	495f      	ldr	r1, [pc, #380]	@ (800134c <HAL_RCC_OscConfig+0x330>)
 80011ce:	4313      	orrs	r3, r2
 80011d0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d059      	beq.n	8001296 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e2:	f7ff fb57 	bl	8000894 <HAL_GetTick>
 80011e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ea:	e00a      	b.n	8001202 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ec:	f7ff fb52 	bl	8000894 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b64      	cmp	r3, #100	@ 0x64
 80011fa:	d902      	bls.n	8001202 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	f000 bf43 	b.w	8002088 <HAL_RCC_OscConfig+0x106c>
 8001202:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001206:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800120e:	fa93 f3a3 	rbit	r3, r3
 8001212:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001216:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121a:	fab3 f383 	clz	r3, r3
 800121e:	b2db      	uxtb	r3, r3
 8001220:	095b      	lsrs	r3, r3, #5
 8001222:	b2db      	uxtb	r3, r3
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b01      	cmp	r3, #1
 800122c:	d102      	bne.n	8001234 <HAL_RCC_OscConfig+0x218>
 800122e:	4b47      	ldr	r3, [pc, #284]	@ (800134c <HAL_RCC_OscConfig+0x330>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	e015      	b.n	8001260 <HAL_RCC_OscConfig+0x244>
 8001234:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001238:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001240:	fa93 f3a3 	rbit	r3, r3
 8001244:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001248:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800124c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001250:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001254:	fa93 f3a3 	rbit	r3, r3
 8001258:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800125c:	4b3b      	ldr	r3, [pc, #236]	@ (800134c <HAL_RCC_OscConfig+0x330>)
 800125e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001260:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001264:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001268:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800126c:	fa92 f2a2 	rbit	r2, r2
 8001270:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001274:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001278:	fab2 f282 	clz	r2, r2
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	f042 0220 	orr.w	r2, r2, #32
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	f002 021f 	and.w	r2, r2, #31
 8001288:	2101      	movs	r1, #1
 800128a:	fa01 f202 	lsl.w	r2, r1, r2
 800128e:	4013      	ands	r3, r2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0ab      	beq.n	80011ec <HAL_RCC_OscConfig+0x1d0>
 8001294:	e05d      	b.n	8001352 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001296:	f7ff fafd 	bl	8000894 <HAL_GetTick>
 800129a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129e:	e00a      	b.n	80012b6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012a0:	f7ff faf8 	bl	8000894 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b64      	cmp	r3, #100	@ 0x64
 80012ae:	d902      	bls.n	80012b6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	f000 bee9 	b.w	8002088 <HAL_RCC_OscConfig+0x106c>
 80012b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012ba:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012be:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80012c2:	fa93 f3a3 	rbit	r3, r3
 80012c6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80012ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ce:	fab3 f383 	clz	r3, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	095b      	lsrs	r3, r3, #5
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d102      	bne.n	80012e8 <HAL_RCC_OscConfig+0x2cc>
 80012e2:	4b1a      	ldr	r3, [pc, #104]	@ (800134c <HAL_RCC_OscConfig+0x330>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	e015      	b.n	8001314 <HAL_RCC_OscConfig+0x2f8>
 80012e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012ec:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80012f4:	fa93 f3a3 	rbit	r3, r3
 80012f8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80012fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001300:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001304:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001308:	fa93 f3a3 	rbit	r3, r3
 800130c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001310:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <HAL_RCC_OscConfig+0x330>)
 8001312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001314:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001318:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800131c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001320:	fa92 f2a2 	rbit	r2, r2
 8001324:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001328:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800132c:	fab2 f282 	clz	r2, r2
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	f042 0220 	orr.w	r2, r2, #32
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	f002 021f 	and.w	r2, r2, #31
 800133c:	2101      	movs	r1, #1
 800133e:	fa01 f202 	lsl.w	r2, r1, r2
 8001342:	4013      	ands	r3, r2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1ab      	bne.n	80012a0 <HAL_RCC_OscConfig+0x284>
 8001348:	e003      	b.n	8001352 <HAL_RCC_OscConfig+0x336>
 800134a:	bf00      	nop
 800134c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001352:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001356:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 817d 	beq.w	8001662 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001368:	4ba6      	ldr	r3, [pc, #664]	@ (8001604 <HAL_RCC_OscConfig+0x5e8>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 030c 	and.w	r3, r3, #12
 8001370:	2b00      	cmp	r3, #0
 8001372:	d00b      	beq.n	800138c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001374:	4ba3      	ldr	r3, [pc, #652]	@ (8001604 <HAL_RCC_OscConfig+0x5e8>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 030c 	and.w	r3, r3, #12
 800137c:	2b08      	cmp	r3, #8
 800137e:	d172      	bne.n	8001466 <HAL_RCC_OscConfig+0x44a>
 8001380:	4ba0      	ldr	r3, [pc, #640]	@ (8001604 <HAL_RCC_OscConfig+0x5e8>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d16c      	bne.n	8001466 <HAL_RCC_OscConfig+0x44a>
 800138c:	2302      	movs	r3, #2
 800138e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001392:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001396:	fa93 f3a3 	rbit	r3, r3
 800139a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800139e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a2:	fab3 f383 	clz	r3, r3
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	095b      	lsrs	r3, r3, #5
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d102      	bne.n	80013bc <HAL_RCC_OscConfig+0x3a0>
 80013b6:	4b93      	ldr	r3, [pc, #588]	@ (8001604 <HAL_RCC_OscConfig+0x5e8>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	e013      	b.n	80013e4 <HAL_RCC_OscConfig+0x3c8>
 80013bc:	2302      	movs	r3, #2
 80013be:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80013c6:	fa93 f3a3 	rbit	r3, r3
 80013ca:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80013ce:	2302      	movs	r3, #2
 80013d0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80013d4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80013d8:	fa93 f3a3 	rbit	r3, r3
 80013dc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80013e0:	4b88      	ldr	r3, [pc, #544]	@ (8001604 <HAL_RCC_OscConfig+0x5e8>)
 80013e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e4:	2202      	movs	r2, #2
 80013e6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80013ea:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80013ee:	fa92 f2a2 	rbit	r2, r2
 80013f2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80013f6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80013fa:	fab2 f282 	clz	r2, r2
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	f042 0220 	orr.w	r2, r2, #32
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	f002 021f 	and.w	r2, r2, #31
 800140a:	2101      	movs	r1, #1
 800140c:	fa01 f202 	lsl.w	r2, r1, r2
 8001410:	4013      	ands	r3, r2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00a      	beq.n	800142c <HAL_RCC_OscConfig+0x410>
 8001416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800141a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d002      	beq.n	800142c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	f000 be2e 	b.w	8002088 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142c:	4b75      	ldr	r3, [pc, #468]	@ (8001604 <HAL_RCC_OscConfig+0x5e8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001434:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001438:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	695b      	ldr	r3, [r3, #20]
 8001440:	21f8      	movs	r1, #248	@ 0xf8
 8001442:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001446:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800144a:	fa91 f1a1 	rbit	r1, r1
 800144e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001452:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001456:	fab1 f181 	clz	r1, r1
 800145a:	b2c9      	uxtb	r1, r1
 800145c:	408b      	lsls	r3, r1
 800145e:	4969      	ldr	r1, [pc, #420]	@ (8001604 <HAL_RCC_OscConfig+0x5e8>)
 8001460:	4313      	orrs	r3, r2
 8001462:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001464:	e0fd      	b.n	8001662 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800146a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 8088 	beq.w	8001588 <HAL_RCC_OscConfig+0x56c>
 8001478:	2301      	movs	r3, #1
 800147a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001482:	fa93 f3a3 	rbit	r3, r3
 8001486:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800148a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800148e:	fab3 f383 	clz	r3, r3
 8001492:	b2db      	uxtb	r3, r3
 8001494:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001498:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	461a      	mov	r2, r3
 80014a0:	2301      	movs	r3, #1
 80014a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff f9f6 	bl	8000894 <HAL_GetTick>
 80014a8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ac:	e00a      	b.n	80014c4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ae:	f7ff f9f1 	bl	8000894 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d902      	bls.n	80014c4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	f000 bde2 	b.w	8002088 <HAL_RCC_OscConfig+0x106c>
 80014c4:	2302      	movs	r3, #2
 80014c6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ca:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80014ce:	fa93 f3a3 	rbit	r3, r3
 80014d2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80014d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014da:	fab3 f383 	clz	r3, r3
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	095b      	lsrs	r3, r3, #5
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d102      	bne.n	80014f4 <HAL_RCC_OscConfig+0x4d8>
 80014ee:	4b45      	ldr	r3, [pc, #276]	@ (8001604 <HAL_RCC_OscConfig+0x5e8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	e013      	b.n	800151c <HAL_RCC_OscConfig+0x500>
 80014f4:	2302      	movs	r3, #2
 80014f6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fa:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80014fe:	fa93 f3a3 	rbit	r3, r3
 8001502:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001506:	2302      	movs	r3, #2
 8001508:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800150c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001510:	fa93 f3a3 	rbit	r3, r3
 8001514:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001518:	4b3a      	ldr	r3, [pc, #232]	@ (8001604 <HAL_RCC_OscConfig+0x5e8>)
 800151a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800151c:	2202      	movs	r2, #2
 800151e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001522:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001526:	fa92 f2a2 	rbit	r2, r2
 800152a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800152e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001532:	fab2 f282 	clz	r2, r2
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	f042 0220 	orr.w	r2, r2, #32
 800153c:	b2d2      	uxtb	r2, r2
 800153e:	f002 021f 	and.w	r2, r2, #31
 8001542:	2101      	movs	r1, #1
 8001544:	fa01 f202 	lsl.w	r2, r1, r2
 8001548:	4013      	ands	r3, r2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0af      	beq.n	80014ae <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154e:	4b2d      	ldr	r3, [pc, #180]	@ (8001604 <HAL_RCC_OscConfig+0x5e8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001556:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800155a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	21f8      	movs	r1, #248	@ 0xf8
 8001564:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001568:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800156c:	fa91 f1a1 	rbit	r1, r1
 8001570:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001574:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001578:	fab1 f181 	clz	r1, r1
 800157c:	b2c9      	uxtb	r1, r1
 800157e:	408b      	lsls	r3, r1
 8001580:	4920      	ldr	r1, [pc, #128]	@ (8001604 <HAL_RCC_OscConfig+0x5e8>)
 8001582:	4313      	orrs	r3, r2
 8001584:	600b      	str	r3, [r1, #0]
 8001586:	e06c      	b.n	8001662 <HAL_RCC_OscConfig+0x646>
 8001588:	2301      	movs	r3, #1
 800158a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001592:	fa93 f3a3 	rbit	r3, r3
 8001596:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800159a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800159e:	fab3 f383 	clz	r3, r3
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80015a8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	461a      	mov	r2, r3
 80015b0:	2300      	movs	r3, #0
 80015b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7ff f96e 	bl	8000894 <HAL_GetTick>
 80015b8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015bc:	e00a      	b.n	80015d4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015be:	f7ff f969 	bl	8000894 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d902      	bls.n	80015d4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	f000 bd5a 	b.w	8002088 <HAL_RCC_OscConfig+0x106c>
 80015d4:	2302      	movs	r3, #2
 80015d6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015da:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80015de:	fa93 f3a3 	rbit	r3, r3
 80015e2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80015e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ea:	fab3 f383 	clz	r3, r3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	095b      	lsrs	r3, r3, #5
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d104      	bne.n	8001608 <HAL_RCC_OscConfig+0x5ec>
 80015fe:	4b01      	ldr	r3, [pc, #4]	@ (8001604 <HAL_RCC_OscConfig+0x5e8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	e015      	b.n	8001630 <HAL_RCC_OscConfig+0x614>
 8001604:	40021000 	.word	0x40021000
 8001608:	2302      	movs	r3, #2
 800160a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001612:	fa93 f3a3 	rbit	r3, r3
 8001616:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800161a:	2302      	movs	r3, #2
 800161c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001620:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001624:	fa93 f3a3 	rbit	r3, r3
 8001628:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800162c:	4bc8      	ldr	r3, [pc, #800]	@ (8001950 <HAL_RCC_OscConfig+0x934>)
 800162e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001630:	2202      	movs	r2, #2
 8001632:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001636:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800163a:	fa92 f2a2 	rbit	r2, r2
 800163e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001642:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001646:	fab2 f282 	clz	r2, r2
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	f042 0220 	orr.w	r2, r2, #32
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	f002 021f 	and.w	r2, r2, #31
 8001656:	2101      	movs	r1, #1
 8001658:	fa01 f202 	lsl.w	r2, r1, r2
 800165c:	4013      	ands	r3, r2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1ad      	bne.n	80015be <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001662:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001666:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 8110 	beq.w	8001898 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001678:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800167c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d079      	beq.n	800177c <HAL_RCC_OscConfig+0x760>
 8001688:	2301      	movs	r3, #1
 800168a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001692:	fa93 f3a3 	rbit	r3, r3
 8001696:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800169a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800169e:	fab3 f383 	clz	r3, r3
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	461a      	mov	r2, r3
 80016a6:	4bab      	ldr	r3, [pc, #684]	@ (8001954 <HAL_RCC_OscConfig+0x938>)
 80016a8:	4413      	add	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	461a      	mov	r2, r3
 80016ae:	2301      	movs	r3, #1
 80016b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b2:	f7ff f8ef 	bl	8000894 <HAL_GetTick>
 80016b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ba:	e00a      	b.n	80016d2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016bc:	f7ff f8ea 	bl	8000894 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d902      	bls.n	80016d2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	f000 bcdb 	b.w	8002088 <HAL_RCC_OscConfig+0x106c>
 80016d2:	2302      	movs	r3, #2
 80016d4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80016dc:	fa93 f3a3 	rbit	r3, r3
 80016e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80016e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016e8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80016ec:	2202      	movs	r2, #2
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016f4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	fa93 f2a3 	rbit	r2, r3
 80016fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001702:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800170c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001710:	2202      	movs	r2, #2
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001718:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	fa93 f2a3 	rbit	r2, r3
 8001722:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001726:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800172a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172c:	4b88      	ldr	r3, [pc, #544]	@ (8001950 <HAL_RCC_OscConfig+0x934>)
 800172e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001730:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001734:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001738:	2102      	movs	r1, #2
 800173a:	6019      	str	r1, [r3, #0]
 800173c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001740:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	fa93 f1a3 	rbit	r1, r3
 800174a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800174e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001752:	6019      	str	r1, [r3, #0]
  return result;
 8001754:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001758:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	fab3 f383 	clz	r3, r3
 8001762:	b2db      	uxtb	r3, r3
 8001764:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001768:	b2db      	uxtb	r3, r3
 800176a:	f003 031f 	and.w	r3, r3, #31
 800176e:	2101      	movs	r1, #1
 8001770:	fa01 f303 	lsl.w	r3, r1, r3
 8001774:	4013      	ands	r3, r2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0a0      	beq.n	80016bc <HAL_RCC_OscConfig+0x6a0>
 800177a:	e08d      	b.n	8001898 <HAL_RCC_OscConfig+0x87c>
 800177c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001780:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001784:	2201      	movs	r2, #1
 8001786:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001788:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800178c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	fa93 f2a3 	rbit	r2, r3
 8001796:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800179a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800179e:	601a      	str	r2, [r3, #0]
  return result;
 80017a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017a4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80017a8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017aa:	fab3 f383 	clz	r3, r3
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b68      	ldr	r3, [pc, #416]	@ (8001954 <HAL_RCC_OscConfig+0x938>)
 80017b4:	4413      	add	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	461a      	mov	r2, r3
 80017ba:	2300      	movs	r3, #0
 80017bc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017be:	f7ff f869 	bl	8000894 <HAL_GetTick>
 80017c2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c6:	e00a      	b.n	80017de <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c8:	f7ff f864 	bl	8000894 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d902      	bls.n	80017de <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	f000 bc55 	b.w	8002088 <HAL_RCC_OscConfig+0x106c>
 80017de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80017e6:	2202      	movs	r2, #2
 80017e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	fa93 f2a3 	rbit	r2, r3
 80017f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017fc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001806:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800180a:	2202      	movs	r2, #2
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001812:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	fa93 f2a3 	rbit	r2, r3
 800181c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001820:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800182a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800182e:	2202      	movs	r2, #2
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001836:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	fa93 f2a3 	rbit	r2, r3
 8001840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001844:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001848:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800184a:	4b41      	ldr	r3, [pc, #260]	@ (8001950 <HAL_RCC_OscConfig+0x934>)
 800184c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800184e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001852:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001856:	2102      	movs	r1, #2
 8001858:	6019      	str	r1, [r3, #0]
 800185a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800185e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	fa93 f1a3 	rbit	r1, r3
 8001868:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800186c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001870:	6019      	str	r1, [r3, #0]
  return result;
 8001872:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001876:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	fab3 f383 	clz	r3, r3
 8001880:	b2db      	uxtb	r3, r3
 8001882:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001886:	b2db      	uxtb	r3, r3
 8001888:	f003 031f 	and.w	r3, r3, #31
 800188c:	2101      	movs	r1, #1
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
 8001892:	4013      	ands	r3, r2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d197      	bne.n	80017c8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800189c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 81a1 	beq.w	8001bf0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ae:	2300      	movs	r3, #0
 80018b0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018b4:	4b26      	ldr	r3, [pc, #152]	@ (8001950 <HAL_RCC_OscConfig+0x934>)
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d116      	bne.n	80018ee <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018c0:	4b23      	ldr	r3, [pc, #140]	@ (8001950 <HAL_RCC_OscConfig+0x934>)
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	4a22      	ldr	r2, [pc, #136]	@ (8001950 <HAL_RCC_OscConfig+0x934>)
 80018c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ca:	61d3      	str	r3, [r2, #28]
 80018cc:	4b20      	ldr	r3, [pc, #128]	@ (8001950 <HAL_RCC_OscConfig+0x934>)
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80018d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80018e6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80018e8:	2301      	movs	r3, #1
 80018ea:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001958 <HAL_RCC_OscConfig+0x93c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d11a      	bne.n	8001930 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018fa:	4b17      	ldr	r3, [pc, #92]	@ (8001958 <HAL_RCC_OscConfig+0x93c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a16      	ldr	r2, [pc, #88]	@ (8001958 <HAL_RCC_OscConfig+0x93c>)
 8001900:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001904:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001906:	f7fe ffc5 	bl	8000894 <HAL_GetTick>
 800190a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190e:	e009      	b.n	8001924 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001910:	f7fe ffc0 	bl	8000894 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b64      	cmp	r3, #100	@ 0x64
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e3b1      	b.n	8002088 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001924:	4b0c      	ldr	r3, [pc, #48]	@ (8001958 <HAL_RCC_OscConfig+0x93c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0ef      	beq.n	8001910 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001934:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d10d      	bne.n	800195c <HAL_RCC_OscConfig+0x940>
 8001940:	4b03      	ldr	r3, [pc, #12]	@ (8001950 <HAL_RCC_OscConfig+0x934>)
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	4a02      	ldr	r2, [pc, #8]	@ (8001950 <HAL_RCC_OscConfig+0x934>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	6213      	str	r3, [r2, #32]
 800194c:	e03c      	b.n	80019c8 <HAL_RCC_OscConfig+0x9ac>
 800194e:	bf00      	nop
 8001950:	40021000 	.word	0x40021000
 8001954:	10908120 	.word	0x10908120
 8001958:	40007000 	.word	0x40007000
 800195c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001960:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10c      	bne.n	8001986 <HAL_RCC_OscConfig+0x96a>
 800196c:	4bc1      	ldr	r3, [pc, #772]	@ (8001c74 <HAL_RCC_OscConfig+0xc58>)
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	4ac0      	ldr	r2, [pc, #768]	@ (8001c74 <HAL_RCC_OscConfig+0xc58>)
 8001972:	f023 0301 	bic.w	r3, r3, #1
 8001976:	6213      	str	r3, [r2, #32]
 8001978:	4bbe      	ldr	r3, [pc, #760]	@ (8001c74 <HAL_RCC_OscConfig+0xc58>)
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	4abd      	ldr	r2, [pc, #756]	@ (8001c74 <HAL_RCC_OscConfig+0xc58>)
 800197e:	f023 0304 	bic.w	r3, r3, #4
 8001982:	6213      	str	r3, [r2, #32]
 8001984:	e020      	b.n	80019c8 <HAL_RCC_OscConfig+0x9ac>
 8001986:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800198a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	2b05      	cmp	r3, #5
 8001994:	d10c      	bne.n	80019b0 <HAL_RCC_OscConfig+0x994>
 8001996:	4bb7      	ldr	r3, [pc, #732]	@ (8001c74 <HAL_RCC_OscConfig+0xc58>)
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	4ab6      	ldr	r2, [pc, #728]	@ (8001c74 <HAL_RCC_OscConfig+0xc58>)
 800199c:	f043 0304 	orr.w	r3, r3, #4
 80019a0:	6213      	str	r3, [r2, #32]
 80019a2:	4bb4      	ldr	r3, [pc, #720]	@ (8001c74 <HAL_RCC_OscConfig+0xc58>)
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	4ab3      	ldr	r2, [pc, #716]	@ (8001c74 <HAL_RCC_OscConfig+0xc58>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6213      	str	r3, [r2, #32]
 80019ae:	e00b      	b.n	80019c8 <HAL_RCC_OscConfig+0x9ac>
 80019b0:	4bb0      	ldr	r3, [pc, #704]	@ (8001c74 <HAL_RCC_OscConfig+0xc58>)
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	4aaf      	ldr	r2, [pc, #700]	@ (8001c74 <HAL_RCC_OscConfig+0xc58>)
 80019b6:	f023 0301 	bic.w	r3, r3, #1
 80019ba:	6213      	str	r3, [r2, #32]
 80019bc:	4bad      	ldr	r3, [pc, #692]	@ (8001c74 <HAL_RCC_OscConfig+0xc58>)
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	4aac      	ldr	r2, [pc, #688]	@ (8001c74 <HAL_RCC_OscConfig+0xc58>)
 80019c2:	f023 0304 	bic.w	r3, r3, #4
 80019c6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 8081 	beq.w	8001adc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019da:	f7fe ff5b 	bl	8000894 <HAL_GetTick>
 80019de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e4:	f7fe ff56 	bl	8000894 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e345      	b.n	8002088 <HAL_RCC_OscConfig+0x106c>
 80019fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a00:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001a04:	2202      	movs	r2, #2
 8001a06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a0c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	fa93 f2a3 	rbit	r2, r3
 8001a16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a1a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a24:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001a28:	2202      	movs	r2, #2
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a30:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	fa93 f2a3 	rbit	r2, r3
 8001a3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a3e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001a42:	601a      	str	r2, [r3, #0]
  return result;
 8001a44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a48:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001a4c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4e:	fab3 f383 	clz	r3, r3
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	095b      	lsrs	r3, r3, #5
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d102      	bne.n	8001a68 <HAL_RCC_OscConfig+0xa4c>
 8001a62:	4b84      	ldr	r3, [pc, #528]	@ (8001c74 <HAL_RCC_OscConfig+0xc58>)
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	e013      	b.n	8001a90 <HAL_RCC_OscConfig+0xa74>
 8001a68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a6c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001a70:	2202      	movs	r2, #2
 8001a72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a78:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	fa93 f2a3 	rbit	r2, r3
 8001a82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a86:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	4b79      	ldr	r3, [pc, #484]	@ (8001c74 <HAL_RCC_OscConfig+0xc58>)
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a94:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001a98:	2102      	movs	r1, #2
 8001a9a:	6011      	str	r1, [r2, #0]
 8001a9c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001aa0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001aa4:	6812      	ldr	r2, [r2, #0]
 8001aa6:	fa92 f1a2 	rbit	r1, r2
 8001aaa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001aae:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001ab2:	6011      	str	r1, [r2, #0]
  return result;
 8001ab4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ab8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	fab2 f282 	clz	r2, r2
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	f002 021f 	and.w	r2, r2, #31
 8001ace:	2101      	movs	r1, #1
 8001ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d084      	beq.n	80019e4 <HAL_RCC_OscConfig+0x9c8>
 8001ada:	e07f      	b.n	8001bdc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001adc:	f7fe feda 	bl	8000894 <HAL_GetTick>
 8001ae0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae4:	e00b      	b.n	8001afe <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae6:	f7fe fed5 	bl	8000894 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e2c4      	b.n	8002088 <HAL_RCC_OscConfig+0x106c>
 8001afe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b02:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001b06:	2202      	movs	r2, #2
 8001b08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b0e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	fa93 f2a3 	rbit	r2, r3
 8001b18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b1c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b26:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b32:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	fa93 f2a3 	rbit	r2, r3
 8001b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b40:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001b44:	601a      	str	r2, [r3, #0]
  return result;
 8001b46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b4a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001b4e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b50:	fab3 f383 	clz	r3, r3
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	095b      	lsrs	r3, r3, #5
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	f043 0302 	orr.w	r3, r3, #2
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d102      	bne.n	8001b6a <HAL_RCC_OscConfig+0xb4e>
 8001b64:	4b43      	ldr	r3, [pc, #268]	@ (8001c74 <HAL_RCC_OscConfig+0xc58>)
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	e013      	b.n	8001b92 <HAL_RCC_OscConfig+0xb76>
 8001b6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b6e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001b72:	2202      	movs	r2, #2
 8001b74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b7a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	fa93 f2a3 	rbit	r2, r3
 8001b84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b88:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	4b39      	ldr	r3, [pc, #228]	@ (8001c74 <HAL_RCC_OscConfig+0xc58>)
 8001b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b92:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b96:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	6011      	str	r1, [r2, #0]
 8001b9e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ba2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	fa92 f1a2 	rbit	r1, r2
 8001bac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bb0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001bb4:	6011      	str	r1, [r2, #0]
  return result;
 8001bb6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bba:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	fab2 f282 	clz	r2, r2
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	f002 021f 	and.w	r2, r2, #31
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d184      	bne.n	8001ae6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bdc:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d105      	bne.n	8001bf0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be4:	4b23      	ldr	r3, [pc, #140]	@ (8001c74 <HAL_RCC_OscConfig+0xc58>)
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	4a22      	ldr	r2, [pc, #136]	@ (8001c74 <HAL_RCC_OscConfig+0xc58>)
 8001bea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 8242 	beq.w	8002086 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c02:	4b1c      	ldr	r3, [pc, #112]	@ (8001c74 <HAL_RCC_OscConfig+0xc58>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	f000 8213 	beq.w	8002036 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	f040 8162 	bne.w	8001ee6 <HAL_RCC_OscConfig+0xeca>
 8001c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c26:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001c2a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c34:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	fa93 f2a3 	rbit	r2, r3
 8001c3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c42:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001c46:	601a      	str	r2, [r3, #0]
  return result;
 8001c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c4c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001c50:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c52:	fab3 f383 	clz	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c5c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	461a      	mov	r2, r3
 8001c64:	2300      	movs	r3, #0
 8001c66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c68:	f7fe fe14 	bl	8000894 <HAL_GetTick>
 8001c6c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c70:	e00c      	b.n	8001c8c <HAL_RCC_OscConfig+0xc70>
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c78:	f7fe fe0c 	bl	8000894 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e1fd      	b.n	8002088 <HAL_RCC_OscConfig+0x106c>
 8001c8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c90:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001c94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c9e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	fa93 f2a3 	rbit	r2, r3
 8001ca8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cac:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001cb0:	601a      	str	r2, [r3, #0]
  return result;
 8001cb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001cba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cbc:	fab3 f383 	clz	r3, r3
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d102      	bne.n	8001cd6 <HAL_RCC_OscConfig+0xcba>
 8001cd0:	4bb0      	ldr	r3, [pc, #704]	@ (8001f94 <HAL_RCC_OscConfig+0xf78>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	e027      	b.n	8001d26 <HAL_RCC_OscConfig+0xd0a>
 8001cd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cda:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001cde:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ce2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	fa93 f2a3 	rbit	r2, r3
 8001cf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d00:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001d04:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d0e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	fa93 f2a3 	rbit	r2, r3
 8001d18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d1c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	4b9c      	ldr	r3, [pc, #624]	@ (8001f94 <HAL_RCC_OscConfig+0xf78>)
 8001d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d26:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d2a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001d2e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001d32:	6011      	str	r1, [r2, #0]
 8001d34:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d38:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001d3c:	6812      	ldr	r2, [r2, #0]
 8001d3e:	fa92 f1a2 	rbit	r1, r2
 8001d42:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d46:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001d4a:	6011      	str	r1, [r2, #0]
  return result;
 8001d4c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d50:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	fab2 f282 	clz	r2, r2
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	f042 0220 	orr.w	r2, r2, #32
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	f002 021f 	and.w	r2, r2, #31
 8001d66:	2101      	movs	r1, #1
 8001d68:	fa01 f202 	lsl.w	r2, r1, r2
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d182      	bne.n	8001c78 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d72:	4b88      	ldr	r3, [pc, #544]	@ (8001f94 <HAL_RCC_OscConfig+0xf78>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001d7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001d86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	430b      	orrs	r3, r1
 8001d94:	497f      	ldr	r1, [pc, #508]	@ (8001f94 <HAL_RCC_OscConfig+0xf78>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	604b      	str	r3, [r1, #4]
 8001d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d9e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001da2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001da6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dac:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	fa93 f2a3 	rbit	r2, r3
 8001db6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dba:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001dbe:	601a      	str	r2, [r3, #0]
  return result;
 8001dc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001dc8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001dd4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	461a      	mov	r2, r3
 8001ddc:	2301      	movs	r3, #1
 8001dde:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7fe fd58 	bl	8000894 <HAL_GetTick>
 8001de4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de8:	e009      	b.n	8001dfe <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dea:	f7fe fd53 	bl	8000894 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e144      	b.n	8002088 <HAL_RCC_OscConfig+0x106c>
 8001dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e02:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001e06:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e10:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	fa93 f2a3 	rbit	r2, r3
 8001e1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e1e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001e22:	601a      	str	r2, [r3, #0]
  return result;
 8001e24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e28:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001e2c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e2e:	fab3 f383 	clz	r3, r3
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	095b      	lsrs	r3, r3, #5
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d102      	bne.n	8001e48 <HAL_RCC_OscConfig+0xe2c>
 8001e42:	4b54      	ldr	r3, [pc, #336]	@ (8001f94 <HAL_RCC_OscConfig+0xf78>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	e027      	b.n	8001e98 <HAL_RCC_OscConfig+0xe7c>
 8001e48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e4c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001e50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e5a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	fa93 f2a3 	rbit	r2, r3
 8001e64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e68:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e72:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001e76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e80:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	fa93 f2a3 	rbit	r2, r3
 8001e8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e8e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	4b3f      	ldr	r3, [pc, #252]	@ (8001f94 <HAL_RCC_OscConfig+0xf78>)
 8001e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e98:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e9c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001ea0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001ea4:	6011      	str	r1, [r2, #0]
 8001ea6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001eaa:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	fa92 f1a2 	rbit	r1, r2
 8001eb4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001eb8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001ebc:	6011      	str	r1, [r2, #0]
  return result;
 8001ebe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ec2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	fab2 f282 	clz	r2, r2
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	f042 0220 	orr.w	r2, r2, #32
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	f002 021f 	and.w	r2, r2, #31
 8001ed8:	2101      	movs	r1, #1
 8001eda:	fa01 f202 	lsl.w	r2, r1, r2
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d082      	beq.n	8001dea <HAL_RCC_OscConfig+0xdce>
 8001ee4:	e0cf      	b.n	8002086 <HAL_RCC_OscConfig+0x106a>
 8001ee6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eea:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001eee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001ef2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	fa93 f2a3 	rbit	r2, r3
 8001f02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f06:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001f0a:	601a      	str	r2, [r3, #0]
  return result;
 8001f0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f10:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001f14:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f20:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	461a      	mov	r2, r3
 8001f28:	2300      	movs	r3, #0
 8001f2a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7fe fcb2 	bl	8000894 <HAL_GetTick>
 8001f30:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f34:	e009      	b.n	8001f4a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f36:	f7fe fcad 	bl	8000894 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e09e      	b.n	8002088 <HAL_RCC_OscConfig+0x106c>
 8001f4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f4e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001f52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f5c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	fa93 f2a3 	rbit	r2, r3
 8001f66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f6a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001f6e:	601a      	str	r2, [r3, #0]
  return result;
 8001f70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f74:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001f78:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7a:	fab3 f383 	clz	r3, r3
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	095b      	lsrs	r3, r3, #5
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d104      	bne.n	8001f98 <HAL_RCC_OscConfig+0xf7c>
 8001f8e:	4b01      	ldr	r3, [pc, #4]	@ (8001f94 <HAL_RCC_OscConfig+0xf78>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	e029      	b.n	8001fe8 <HAL_RCC_OscConfig+0xfcc>
 8001f94:	40021000 	.word	0x40021000
 8001f98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f9c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001fa0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001faa:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	fa93 f2a3 	rbit	r2, r3
 8001fb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001fc6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	fa93 f2a3 	rbit	r2, r3
 8001fda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fde:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	4b2b      	ldr	r3, [pc, #172]	@ (8002094 <HAL_RCC_OscConfig+0x1078>)
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fec:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001ff0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001ff4:	6011      	str	r1, [r2, #0]
 8001ff6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ffa:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001ffe:	6812      	ldr	r2, [r2, #0]
 8002000:	fa92 f1a2 	rbit	r1, r2
 8002004:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002008:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800200c:	6011      	str	r1, [r2, #0]
  return result;
 800200e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002012:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002016:	6812      	ldr	r2, [r2, #0]
 8002018:	fab2 f282 	clz	r2, r2
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	f042 0220 	orr.w	r2, r2, #32
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	f002 021f 	and.w	r2, r2, #31
 8002028:	2101      	movs	r1, #1
 800202a:	fa01 f202 	lsl.w	r2, r1, r2
 800202e:	4013      	ands	r3, r2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d180      	bne.n	8001f36 <HAL_RCC_OscConfig+0xf1a>
 8002034:	e027      	b.n	8002086 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002036:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800203a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e01e      	b.n	8002088 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800204a:	4b12      	ldr	r3, [pc, #72]	@ (8002094 <HAL_RCC_OscConfig+0x1078>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002052:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002056:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800205a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800205e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	429a      	cmp	r2, r3
 8002068:	d10b      	bne.n	8002082 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800206a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800206e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002072:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002076:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800207e:	429a      	cmp	r2, r3
 8002080:	d001      	beq.n	8002086 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000

08002098 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b09e      	sub	sp, #120	@ 0x78
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e162      	b.n	8002376 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020b0:	4b90      	ldr	r3, [pc, #576]	@ (80022f4 <HAL_RCC_ClockConfig+0x25c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d910      	bls.n	80020e0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020be:	4b8d      	ldr	r3, [pc, #564]	@ (80022f4 <HAL_RCC_ClockConfig+0x25c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f023 0207 	bic.w	r2, r3, #7
 80020c6:	498b      	ldr	r1, [pc, #556]	@ (80022f4 <HAL_RCC_ClockConfig+0x25c>)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ce:	4b89      	ldr	r3, [pc, #548]	@ (80022f4 <HAL_RCC_ClockConfig+0x25c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d001      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e14a      	b.n	8002376 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ec:	4b82      	ldr	r3, [pc, #520]	@ (80022f8 <HAL_RCC_ClockConfig+0x260>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	497f      	ldr	r1, [pc, #508]	@ (80022f8 <HAL_RCC_ClockConfig+0x260>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 80dc 	beq.w	80022c4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d13c      	bne.n	800218e <HAL_RCC_ClockConfig+0xf6>
 8002114:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002118:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800211c:	fa93 f3a3 	rbit	r3, r3
 8002120:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002122:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002124:	fab3 f383 	clz	r3, r3
 8002128:	b2db      	uxtb	r3, r3
 800212a:	095b      	lsrs	r3, r3, #5
 800212c:	b2db      	uxtb	r3, r3
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b01      	cmp	r3, #1
 8002136:	d102      	bne.n	800213e <HAL_RCC_ClockConfig+0xa6>
 8002138:	4b6f      	ldr	r3, [pc, #444]	@ (80022f8 <HAL_RCC_ClockConfig+0x260>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	e00f      	b.n	800215e <HAL_RCC_ClockConfig+0xc6>
 800213e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002142:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002144:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002146:	fa93 f3a3 	rbit	r3, r3
 800214a:	667b      	str	r3, [r7, #100]	@ 0x64
 800214c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002150:	663b      	str	r3, [r7, #96]	@ 0x60
 8002152:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002154:	fa93 f3a3 	rbit	r3, r3
 8002158:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800215a:	4b67      	ldr	r3, [pc, #412]	@ (80022f8 <HAL_RCC_ClockConfig+0x260>)
 800215c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002162:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002164:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002166:	fa92 f2a2 	rbit	r2, r2
 800216a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800216c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800216e:	fab2 f282 	clz	r2, r2
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	f042 0220 	orr.w	r2, r2, #32
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	f002 021f 	and.w	r2, r2, #31
 800217e:	2101      	movs	r1, #1
 8002180:	fa01 f202 	lsl.w	r2, r1, r2
 8002184:	4013      	ands	r3, r2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d17b      	bne.n	8002282 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e0f3      	b.n	8002376 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d13c      	bne.n	8002210 <HAL_RCC_ClockConfig+0x178>
 8002196:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800219a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800219e:	fa93 f3a3 	rbit	r3, r3
 80021a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80021a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a6:	fab3 f383 	clz	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	095b      	lsrs	r3, r3, #5
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d102      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x128>
 80021ba:	4b4f      	ldr	r3, [pc, #316]	@ (80022f8 <HAL_RCC_ClockConfig+0x260>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	e00f      	b.n	80021e0 <HAL_RCC_ClockConfig+0x148>
 80021c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021c8:	fa93 f3a3 	rbit	r3, r3
 80021cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80021ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80021d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021d6:	fa93 f3a3 	rbit	r3, r3
 80021da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021dc:	4b46      	ldr	r3, [pc, #280]	@ (80022f8 <HAL_RCC_ClockConfig+0x260>)
 80021de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021e4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80021e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80021e8:	fa92 f2a2 	rbit	r2, r2
 80021ec:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80021ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80021f0:	fab2 f282 	clz	r2, r2
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	f042 0220 	orr.w	r2, r2, #32
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	f002 021f 	and.w	r2, r2, #31
 8002200:	2101      	movs	r1, #1
 8002202:	fa01 f202 	lsl.w	r2, r1, r2
 8002206:	4013      	ands	r3, r2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d13a      	bne.n	8002282 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e0b2      	b.n	8002376 <HAL_RCC_ClockConfig+0x2de>
 8002210:	2302      	movs	r3, #2
 8002212:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800221c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	095b      	lsrs	r3, r3, #5
 8002226:	b2db      	uxtb	r3, r3
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d102      	bne.n	8002238 <HAL_RCC_ClockConfig+0x1a0>
 8002232:	4b31      	ldr	r3, [pc, #196]	@ (80022f8 <HAL_RCC_ClockConfig+0x260>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	e00d      	b.n	8002254 <HAL_RCC_ClockConfig+0x1bc>
 8002238:	2302      	movs	r3, #2
 800223a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800223e:	fa93 f3a3 	rbit	r3, r3
 8002242:	627b      	str	r3, [r7, #36]	@ 0x24
 8002244:	2302      	movs	r3, #2
 8002246:	623b      	str	r3, [r7, #32]
 8002248:	6a3b      	ldr	r3, [r7, #32]
 800224a:	fa93 f3a3 	rbit	r3, r3
 800224e:	61fb      	str	r3, [r7, #28]
 8002250:	4b29      	ldr	r3, [pc, #164]	@ (80022f8 <HAL_RCC_ClockConfig+0x260>)
 8002252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002254:	2202      	movs	r2, #2
 8002256:	61ba      	str	r2, [r7, #24]
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	fa92 f2a2 	rbit	r2, r2
 800225e:	617a      	str	r2, [r7, #20]
  return result;
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	fab2 f282 	clz	r2, r2
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	f042 0220 	orr.w	r2, r2, #32
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	f002 021f 	and.w	r2, r2, #31
 8002272:	2101      	movs	r1, #1
 8002274:	fa01 f202 	lsl.w	r2, r1, r2
 8002278:	4013      	ands	r3, r2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e079      	b.n	8002376 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002282:	4b1d      	ldr	r3, [pc, #116]	@ (80022f8 <HAL_RCC_ClockConfig+0x260>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f023 0203 	bic.w	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	491a      	ldr	r1, [pc, #104]	@ (80022f8 <HAL_RCC_ClockConfig+0x260>)
 8002290:	4313      	orrs	r3, r2
 8002292:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002294:	f7fe fafe 	bl	8000894 <HAL_GetTick>
 8002298:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229a:	e00a      	b.n	80022b2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800229c:	f7fe fafa 	bl	8000894 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e061      	b.n	8002376 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b2:	4b11      	ldr	r3, [pc, #68]	@ (80022f8 <HAL_RCC_ClockConfig+0x260>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 020c 	and.w	r2, r3, #12
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d1eb      	bne.n	800229c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022c4:	4b0b      	ldr	r3, [pc, #44]	@ (80022f4 <HAL_RCC_ClockConfig+0x25c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d214      	bcs.n	80022fc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d2:	4b08      	ldr	r3, [pc, #32]	@ (80022f4 <HAL_RCC_ClockConfig+0x25c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 0207 	bic.w	r2, r3, #7
 80022da:	4906      	ldr	r1, [pc, #24]	@ (80022f4 <HAL_RCC_ClockConfig+0x25c>)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e2:	4b04      	ldr	r3, [pc, #16]	@ (80022f4 <HAL_RCC_ClockConfig+0x25c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d005      	beq.n	80022fc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e040      	b.n	8002376 <HAL_RCC_ClockConfig+0x2de>
 80022f4:	40022000 	.word	0x40022000
 80022f8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	d008      	beq.n	800231a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002308:	4b1d      	ldr	r3, [pc, #116]	@ (8002380 <HAL_RCC_ClockConfig+0x2e8>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	491a      	ldr	r1, [pc, #104]	@ (8002380 <HAL_RCC_ClockConfig+0x2e8>)
 8002316:	4313      	orrs	r3, r2
 8002318:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d009      	beq.n	800233a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002326:	4b16      	ldr	r3, [pc, #88]	@ (8002380 <HAL_RCC_ClockConfig+0x2e8>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4912      	ldr	r1, [pc, #72]	@ (8002380 <HAL_RCC_ClockConfig+0x2e8>)
 8002336:	4313      	orrs	r3, r2
 8002338:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800233a:	f000 f829 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 800233e:	4601      	mov	r1, r0
 8002340:	4b0f      	ldr	r3, [pc, #60]	@ (8002380 <HAL_RCC_ClockConfig+0x2e8>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002348:	22f0      	movs	r2, #240	@ 0xf0
 800234a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	fa92 f2a2 	rbit	r2, r2
 8002352:	60fa      	str	r2, [r7, #12]
  return result;
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	fab2 f282 	clz	r2, r2
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	40d3      	lsrs	r3, r2
 800235e:	4a09      	ldr	r2, [pc, #36]	@ (8002384 <HAL_RCC_ClockConfig+0x2ec>)
 8002360:	5cd3      	ldrb	r3, [r2, r3]
 8002362:	fa21 f303 	lsr.w	r3, r1, r3
 8002366:	4a08      	ldr	r2, [pc, #32]	@ (8002388 <HAL_RCC_ClockConfig+0x2f0>)
 8002368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800236a:	4b08      	ldr	r3, [pc, #32]	@ (800238c <HAL_RCC_ClockConfig+0x2f4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe f98a 	bl	8000688 <HAL_InitTick>
  
  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3778      	adds	r7, #120	@ 0x78
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000
 8002384:	080062e0 	.word	0x080062e0
 8002388:	20000000 	.word	0x20000000
 800238c:	20000004 	.word	0x20000004

08002390 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002390:	b480      	push	{r7}
 8002392:	b087      	sub	sp, #28
 8002394:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002396:	2300      	movs	r3, #0
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	2300      	movs	r3, #0
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	2300      	movs	r3, #0
 80023a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80023aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x94>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d002      	beq.n	80023c0 <HAL_RCC_GetSysClockFreq+0x30>
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d003      	beq.n	80023c6 <HAL_RCC_GetSysClockFreq+0x36>
 80023be:	e026      	b.n	800240e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023c0:	4b19      	ldr	r3, [pc, #100]	@ (8002428 <HAL_RCC_GetSysClockFreq+0x98>)
 80023c2:	613b      	str	r3, [r7, #16]
      break;
 80023c4:	e026      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	0c9b      	lsrs	r3, r3, #18
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	4a17      	ldr	r2, [pc, #92]	@ (800242c <HAL_RCC_GetSysClockFreq+0x9c>)
 80023d0:	5cd3      	ldrb	r3, [r2, r3]
 80023d2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80023d4:	4b13      	ldr	r3, [pc, #76]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x94>)
 80023d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d8:	f003 030f 	and.w	r3, r3, #15
 80023dc:	4a14      	ldr	r2, [pc, #80]	@ (8002430 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023de:	5cd3      	ldrb	r3, [r2, r3]
 80023e0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023ec:	4a0e      	ldr	r2, [pc, #56]	@ (8002428 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	fb02 f303 	mul.w	r3, r2, r3
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	e004      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a0c      	ldr	r2, [pc, #48]	@ (8002434 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002402:	fb02 f303 	mul.w	r3, r2, r3
 8002406:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	613b      	str	r3, [r7, #16]
      break;
 800240c:	e002      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800240e:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <HAL_RCC_GetSysClockFreq+0x98>)
 8002410:	613b      	str	r3, [r7, #16]
      break;
 8002412:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002414:	693b      	ldr	r3, [r7, #16]
}
 8002416:	4618      	mov	r0, r3
 8002418:	371c      	adds	r7, #28
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40021000 	.word	0x40021000
 8002428:	007a1200 	.word	0x007a1200
 800242c:	080062f8 	.word	0x080062f8
 8002430:	08006308 	.word	0x08006308
 8002434:	003d0900 	.word	0x003d0900

08002438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800243c:	4b03      	ldr	r3, [pc, #12]	@ (800244c <HAL_RCC_GetHCLKFreq+0x14>)
 800243e:	681b      	ldr	r3, [r3, #0]
}
 8002440:	4618      	mov	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	20000000 	.word	0x20000000

08002450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002456:	f7ff ffef 	bl	8002438 <HAL_RCC_GetHCLKFreq>
 800245a:	4601      	mov	r1, r0
 800245c:	4b0b      	ldr	r3, [pc, #44]	@ (800248c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002464:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002468:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	fa92 f2a2 	rbit	r2, r2
 8002470:	603a      	str	r2, [r7, #0]
  return result;
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	fab2 f282 	clz	r2, r2
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	40d3      	lsrs	r3, r2
 800247c:	4a04      	ldr	r2, [pc, #16]	@ (8002490 <HAL_RCC_GetPCLK1Freq+0x40>)
 800247e:	5cd3      	ldrb	r3, [r2, r3]
 8002480:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40021000 	.word	0x40021000
 8002490:	080062f0 	.word	0x080062f0

08002494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800249a:	f7ff ffcd 	bl	8002438 <HAL_RCC_GetHCLKFreq>
 800249e:	4601      	mov	r1, r0
 80024a0:	4b0b      	ldr	r3, [pc, #44]	@ (80024d0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80024a8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80024ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	fa92 f2a2 	rbit	r2, r2
 80024b4:	603a      	str	r2, [r7, #0]
  return result;
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	fab2 f282 	clz	r2, r2
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	40d3      	lsrs	r3, r2
 80024c0:	4a04      	ldr	r2, [pc, #16]	@ (80024d4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80024c2:	5cd3      	ldrb	r3, [r2, r3]
 80024c4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40021000 	.word	0x40021000
 80024d4:	080062f0 	.word	0x080062f0

080024d8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	220f      	movs	r2, #15
 80024e6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024e8:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <HAL_RCC_GetClockConfig+0x5c>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 0203 	and.w	r2, r3, #3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80024f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002534 <HAL_RCC_GetClockConfig+0x5c>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002500:	4b0c      	ldr	r3, [pc, #48]	@ (8002534 <HAL_RCC_GetClockConfig+0x5c>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800250c:	4b09      	ldr	r3, [pc, #36]	@ (8002534 <HAL_RCC_GetClockConfig+0x5c>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	08db      	lsrs	r3, r3, #3
 8002512:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800251a:	4b07      	ldr	r3, [pc, #28]	@ (8002538 <HAL_RCC_GetClockConfig+0x60>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0207 	and.w	r2, r3, #7
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	601a      	str	r2, [r3, #0]
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000
 8002538:	40022000 	.word	0x40022000

0800253c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b092      	sub	sp, #72	@ 0x48
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800254c:	2300      	movs	r3, #0
 800254e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 80cd 	beq.w	80026fa <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002560:	4b8e      	ldr	r3, [pc, #568]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10e      	bne.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800256c:	4b8b      	ldr	r3, [pc, #556]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	4a8a      	ldr	r2, [pc, #552]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002576:	61d3      	str	r3, [r2, #28]
 8002578:	4b88      	ldr	r3, [pc, #544]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002584:	2301      	movs	r3, #1
 8002586:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258a:	4b85      	ldr	r3, [pc, #532]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002592:	2b00      	cmp	r3, #0
 8002594:	d118      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002596:	4b82      	ldr	r3, [pc, #520]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a81      	ldr	r2, [pc, #516]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800259c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025a0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025a2:	f7fe f977 	bl	8000894 <HAL_GetTick>
 80025a6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a8:	e008      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025aa:	f7fe f973 	bl	8000894 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b64      	cmp	r3, #100	@ 0x64
 80025b6:	d901      	bls.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e0ea      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025bc:	4b78      	ldr	r3, [pc, #480]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025c8:	4b74      	ldr	r3, [pc, #464]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d07d      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d076      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025e6:	4b6d      	ldr	r3, [pc, #436]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025f4:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80025fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002600:	fab3 f383 	clz	r3, r3
 8002604:	b2db      	uxtb	r3, r3
 8002606:	461a      	mov	r2, r3
 8002608:	4b66      	ldr	r3, [pc, #408]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800260a:	4413      	add	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	461a      	mov	r2, r3
 8002610:	2301      	movs	r3, #1
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002618:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800261c:	fa93 f3a3 	rbit	r3, r3
 8002620:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002624:	fab3 f383 	clz	r3, r3
 8002628:	b2db      	uxtb	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	4b5d      	ldr	r3, [pc, #372]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	461a      	mov	r2, r3
 8002634:	2300      	movs	r3, #0
 8002636:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002638:	4a58      	ldr	r2, [pc, #352]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800263c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800263e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d045      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7fe f924 	bl	8000894 <HAL_GetTick>
 800264c:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800264e:	e00a      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002650:	f7fe f920 	bl	8000894 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800265e:	4293      	cmp	r3, r2
 8002660:	d901      	bls.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e095      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8002666:	2302      	movs	r3, #2
 8002668:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800266c:	fa93 f3a3 	rbit	r3, r3
 8002670:	627b      	str	r3, [r7, #36]	@ 0x24
 8002672:	2302      	movs	r3, #2
 8002674:	623b      	str	r3, [r7, #32]
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	fa93 f3a3 	rbit	r3, r3
 800267c:	61fb      	str	r3, [r7, #28]
  return result;
 800267e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002680:	fab3 f383 	clz	r3, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	095b      	lsrs	r3, r3, #5
 8002688:	b2db      	uxtb	r3, r3
 800268a:	f043 0302 	orr.w	r3, r3, #2
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d102      	bne.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002694:	4b41      	ldr	r3, [pc, #260]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	e007      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800269a:	2302      	movs	r3, #2
 800269c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	fa93 f3a3 	rbit	r3, r3
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	4b3d      	ldr	r3, [pc, #244]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026aa:	2202      	movs	r2, #2
 80026ac:	613a      	str	r2, [r7, #16]
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	fa92 f2a2 	rbit	r2, r2
 80026b4:	60fa      	str	r2, [r7, #12]
  return result;
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	fab2 f282 	clz	r2, r2
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	f002 021f 	and.w	r2, r2, #31
 80026c8:	2101      	movs	r1, #1
 80026ca:	fa01 f202 	lsl.w	r2, r1, r2
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0bd      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80026d4:	4b31      	ldr	r3, [pc, #196]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	492e      	ldr	r1, [pc, #184]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026e6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d105      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ee:	4b2b      	ldr	r3, [pc, #172]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	4a2a      	ldr	r2, [pc, #168]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026f8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d008      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002706:	4b25      	ldr	r3, [pc, #148]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270a:	f023 0203 	bic.w	r2, r3, #3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	4922      	ldr	r1, [pc, #136]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002714:	4313      	orrs	r3, r2
 8002716:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0320 	and.w	r3, r3, #32
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002724:	4b1d      	ldr	r3, [pc, #116]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002728:	f023 0210 	bic.w	r2, r3, #16
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	491a      	ldr	r1, [pc, #104]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002732:	4313      	orrs	r3, r2
 8002734:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800273e:	2b00      	cmp	r3, #0
 8002740:	d008      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002742:	4b16      	ldr	r3, [pc, #88]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002746:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	4913      	ldr	r1, [pc, #76]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002750:	4313      	orrs	r3, r2
 8002752:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002760:	4b0e      	ldr	r3, [pc, #56]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002764:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	490b      	ldr	r1, [pc, #44]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800276e:	4313      	orrs	r3, r2
 8002770:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d008      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800277e:	4b07      	ldr	r3, [pc, #28]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	4904      	ldr	r1, [pc, #16]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278c:	4313      	orrs	r3, r2
 800278e:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3748      	adds	r7, #72	@ 0x48
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000
 80027a0:	40007000 	.word	0x40007000
 80027a4:	10908100 	.word	0x10908100

080027a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e049      	b.n	800284e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f841 	bl	8002856 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3304      	adds	r3, #4
 80027e4:	4619      	mov	r1, r3
 80027e6:	4610      	mov	r0, r2
 80027e8:	f000 f9c6 	bl	8002b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b01      	cmp	r3, #1
 800287e:	d001      	beq.n	8002884 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e040      	b.n	8002906 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a1c      	ldr	r2, [pc, #112]	@ (8002914 <HAL_TIM_Base_Start_IT+0xa8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d00e      	beq.n	80028c4 <HAL_TIM_Base_Start_IT+0x58>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028ae:	d009      	beq.n	80028c4 <HAL_TIM_Base_Start_IT+0x58>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a18      	ldr	r2, [pc, #96]	@ (8002918 <HAL_TIM_Base_Start_IT+0xac>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d004      	beq.n	80028c4 <HAL_TIM_Base_Start_IT+0x58>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a17      	ldr	r2, [pc, #92]	@ (800291c <HAL_TIM_Base_Start_IT+0xb0>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d115      	bne.n	80028f0 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	4b15      	ldr	r3, [pc, #84]	@ (8002920 <HAL_TIM_Base_Start_IT+0xb4>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2b06      	cmp	r3, #6
 80028d4:	d015      	beq.n	8002902 <HAL_TIM_Base_Start_IT+0x96>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028dc:	d011      	beq.n	8002902 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f042 0201 	orr.w	r2, r2, #1
 80028ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ee:	e008      	b.n	8002902 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	e000      	b.n	8002904 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002902:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	40012c00 	.word	0x40012c00
 8002918:	40000400 	.word	0x40000400
 800291c:	40014000 	.word	0x40014000
 8002920:	00010007 	.word	0x00010007

08002924 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d020      	beq.n	8002988 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d01b      	beq.n	8002988 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f06f 0202 	mvn.w	r2, #2
 8002958:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f8e4 	bl	8002b3c <HAL_TIM_IC_CaptureCallback>
 8002974:	e005      	b.n	8002982 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f8d6 	bl	8002b28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f8e7 	bl	8002b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	2b00      	cmp	r3, #0
 8002990:	d020      	beq.n	80029d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d01b      	beq.n	80029d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f06f 0204 	mvn.w	r2, #4
 80029a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2202      	movs	r2, #2
 80029aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f8be 	bl	8002b3c <HAL_TIM_IC_CaptureCallback>
 80029c0:	e005      	b.n	80029ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f8b0 	bl	8002b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f8c1 	bl	8002b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d020      	beq.n	8002a20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d01b      	beq.n	8002a20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f06f 0208 	mvn.w	r2, #8
 80029f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2204      	movs	r2, #4
 80029f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f898 	bl	8002b3c <HAL_TIM_IC_CaptureCallback>
 8002a0c:	e005      	b.n	8002a1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f88a 	bl	8002b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f89b 	bl	8002b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f003 0310 	and.w	r3, r3, #16
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d020      	beq.n	8002a6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f003 0310 	and.w	r3, r3, #16
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d01b      	beq.n	8002a6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0210 	mvn.w	r2, #16
 8002a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2208      	movs	r2, #8
 8002a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f872 	bl	8002b3c <HAL_TIM_IC_CaptureCallback>
 8002a58:	e005      	b.n	8002a66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f864 	bl	8002b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f875 	bl	8002b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00c      	beq.n	8002a90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d007      	beq.n	8002a90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0201 	mvn.w	r2, #1
 8002a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7fd fd36 	bl	80004fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00c      	beq.n	8002ab4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d007      	beq.n	8002ab4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f8f0 	bl	8002c94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00c      	beq.n	8002ad8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d007      	beq.n	8002ad8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f8e8 	bl	8002ca8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00c      	beq.n	8002afc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d007      	beq.n	8002afc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f834 	bl	8002b64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f003 0320 	and.w	r3, r3, #32
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00c      	beq.n	8002b20 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f003 0320 	and.w	r3, r3, #32
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d007      	beq.n	8002b20 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f06f 0220 	mvn.w	r2, #32
 8002b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f8b0 	bl	8002c80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b20:	bf00      	nop
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a38      	ldr	r2, [pc, #224]	@ (8002c6c <TIM_Base_SetConfig+0xf4>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d007      	beq.n	8002ba0 <TIM_Base_SetConfig+0x28>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b96:	d003      	beq.n	8002ba0 <TIM_Base_SetConfig+0x28>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a35      	ldr	r2, [pc, #212]	@ (8002c70 <TIM_Base_SetConfig+0xf8>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d108      	bne.n	8002bb2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ba6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a2d      	ldr	r2, [pc, #180]	@ (8002c6c <TIM_Base_SetConfig+0xf4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d013      	beq.n	8002be2 <TIM_Base_SetConfig+0x6a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bc0:	d00f      	beq.n	8002be2 <TIM_Base_SetConfig+0x6a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a2a      	ldr	r2, [pc, #168]	@ (8002c70 <TIM_Base_SetConfig+0xf8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d00b      	beq.n	8002be2 <TIM_Base_SetConfig+0x6a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a29      	ldr	r2, [pc, #164]	@ (8002c74 <TIM_Base_SetConfig+0xfc>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d007      	beq.n	8002be2 <TIM_Base_SetConfig+0x6a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a28      	ldr	r2, [pc, #160]	@ (8002c78 <TIM_Base_SetConfig+0x100>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d003      	beq.n	8002be2 <TIM_Base_SetConfig+0x6a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a27      	ldr	r2, [pc, #156]	@ (8002c7c <TIM_Base_SetConfig+0x104>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d108      	bne.n	8002bf4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002be8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a14      	ldr	r2, [pc, #80]	@ (8002c6c <TIM_Base_SetConfig+0xf4>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d00b      	beq.n	8002c38 <TIM_Base_SetConfig+0xc0>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a14      	ldr	r2, [pc, #80]	@ (8002c74 <TIM_Base_SetConfig+0xfc>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d007      	beq.n	8002c38 <TIM_Base_SetConfig+0xc0>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a13      	ldr	r2, [pc, #76]	@ (8002c78 <TIM_Base_SetConfig+0x100>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d003      	beq.n	8002c38 <TIM_Base_SetConfig+0xc0>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a12      	ldr	r2, [pc, #72]	@ (8002c7c <TIM_Base_SetConfig+0x104>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d103      	bne.n	8002c40 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	691a      	ldr	r2, [r3, #16]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d105      	bne.n	8002c5e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f023 0201 	bic.w	r2, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	611a      	str	r2, [r3, #16]
  }
}
 8002c5e:	bf00      	nop
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40012c00 	.word	0x40012c00
 8002c70:	40000400 	.word	0x40000400
 8002c74:	40014000 	.word	0x40014000
 8002c78:	40014400 	.word	0x40014400
 8002c7c:	40014800 	.word	0x40014800

08002c80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e040      	b.n	8002d50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d106      	bne.n	8002ce4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7fd fc90 	bl	8000604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2224      	movs	r2, #36	@ 0x24
 8002ce8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0201 	bic.w	r2, r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f9e8 	bl	80030d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f8af 	bl	8002e6c <UART_SetConfig>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e01b      	b.n	8002d50 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0201 	orr.w	r2, r2, #1
 8002d46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 fa67 	bl	800321c <UART_CheckIdleState>
 8002d4e:	4603      	mov	r3, r0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08a      	sub	sp, #40	@ 0x28
 8002d5c:	af02      	add	r7, sp, #8
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	4613      	mov	r3, r2
 8002d66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d6c:	2b20      	cmp	r3, #32
 8002d6e:	d177      	bne.n	8002e60 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <HAL_UART_Transmit+0x24>
 8002d76:	88fb      	ldrh	r3, [r7, #6]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e070      	b.n	8002e62 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2221      	movs	r2, #33	@ 0x21
 8002d8c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d8e:	f7fd fd81 	bl	8000894 <HAL_GetTick>
 8002d92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	88fa      	ldrh	r2, [r7, #6]
 8002d98:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	88fa      	ldrh	r2, [r7, #6]
 8002da0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dac:	d108      	bne.n	8002dc0 <HAL_UART_Transmit+0x68>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d104      	bne.n	8002dc0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	61bb      	str	r3, [r7, #24]
 8002dbe:	e003      	b.n	8002dc8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002dc8:	e02f      	b.n	8002e2a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2180      	movs	r1, #128	@ 0x80
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 fac9 	bl	800336c <UART_WaitOnFlagUntilTimeout>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d004      	beq.n	8002dea <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2220      	movs	r2, #32
 8002de4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e03b      	b.n	8002e62 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10b      	bne.n	8002e08 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	881a      	ldrh	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dfc:	b292      	uxth	r2, r2
 8002dfe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	3302      	adds	r3, #2
 8002e04:	61bb      	str	r3, [r7, #24]
 8002e06:	e007      	b.n	8002e18 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	781a      	ldrb	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3301      	adds	r3, #1
 8002e16:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1c9      	bne.n	8002dca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2140      	movs	r1, #64	@ 0x40
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 fa93 	bl	800336c <UART_WaitOnFlagUntilTimeout>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d004      	beq.n	8002e56 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e005      	b.n	8002e62 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	e000      	b.n	8002e62 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002e60:	2302      	movs	r3, #2
  }
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3720      	adds	r7, #32
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	4b8a      	ldr	r3, [pc, #552]	@ (80030c0 <UART_SetConfig+0x254>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6812      	ldr	r2, [r2, #0]
 8002e9e:	6979      	ldr	r1, [r7, #20]
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a78      	ldr	r2, [pc, #480]	@ (80030c4 <UART_SetConfig+0x258>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d120      	bne.n	8002f2a <UART_SetConfig+0xbe>
 8002ee8:	4b77      	ldr	r3, [pc, #476]	@ (80030c8 <UART_SetConfig+0x25c>)
 8002eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eec:	f003 0303 	and.w	r3, r3, #3
 8002ef0:	2b03      	cmp	r3, #3
 8002ef2:	d817      	bhi.n	8002f24 <UART_SetConfig+0xb8>
 8002ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8002efc <UART_SetConfig+0x90>)
 8002ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efa:	bf00      	nop
 8002efc:	08002f0d 	.word	0x08002f0d
 8002f00:	08002f19 	.word	0x08002f19
 8002f04:	08002f1f 	.word	0x08002f1f
 8002f08:	08002f13 	.word	0x08002f13
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	77fb      	strb	r3, [r7, #31]
 8002f10:	e01d      	b.n	8002f4e <UART_SetConfig+0xe2>
 8002f12:	2302      	movs	r3, #2
 8002f14:	77fb      	strb	r3, [r7, #31]
 8002f16:	e01a      	b.n	8002f4e <UART_SetConfig+0xe2>
 8002f18:	2304      	movs	r3, #4
 8002f1a:	77fb      	strb	r3, [r7, #31]
 8002f1c:	e017      	b.n	8002f4e <UART_SetConfig+0xe2>
 8002f1e:	2308      	movs	r3, #8
 8002f20:	77fb      	strb	r3, [r7, #31]
 8002f22:	e014      	b.n	8002f4e <UART_SetConfig+0xe2>
 8002f24:	2310      	movs	r3, #16
 8002f26:	77fb      	strb	r3, [r7, #31]
 8002f28:	e011      	b.n	8002f4e <UART_SetConfig+0xe2>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a67      	ldr	r2, [pc, #412]	@ (80030cc <UART_SetConfig+0x260>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d102      	bne.n	8002f3a <UART_SetConfig+0xce>
 8002f34:	2300      	movs	r3, #0
 8002f36:	77fb      	strb	r3, [r7, #31]
 8002f38:	e009      	b.n	8002f4e <UART_SetConfig+0xe2>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a64      	ldr	r2, [pc, #400]	@ (80030d0 <UART_SetConfig+0x264>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d102      	bne.n	8002f4a <UART_SetConfig+0xde>
 8002f44:	2300      	movs	r3, #0
 8002f46:	77fb      	strb	r3, [r7, #31]
 8002f48:	e001      	b.n	8002f4e <UART_SetConfig+0xe2>
 8002f4a:	2310      	movs	r3, #16
 8002f4c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f56:	d15a      	bne.n	800300e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002f58:	7ffb      	ldrb	r3, [r7, #31]
 8002f5a:	2b08      	cmp	r3, #8
 8002f5c:	d827      	bhi.n	8002fae <UART_SetConfig+0x142>
 8002f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f64 <UART_SetConfig+0xf8>)
 8002f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f64:	08002f89 	.word	0x08002f89
 8002f68:	08002f91 	.word	0x08002f91
 8002f6c:	08002f99 	.word	0x08002f99
 8002f70:	08002faf 	.word	0x08002faf
 8002f74:	08002f9f 	.word	0x08002f9f
 8002f78:	08002faf 	.word	0x08002faf
 8002f7c:	08002faf 	.word	0x08002faf
 8002f80:	08002faf 	.word	0x08002faf
 8002f84:	08002fa7 	.word	0x08002fa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f88:	f7ff fa62 	bl	8002450 <HAL_RCC_GetPCLK1Freq>
 8002f8c:	61b8      	str	r0, [r7, #24]
        break;
 8002f8e:	e013      	b.n	8002fb8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f90:	f7ff fa80 	bl	8002494 <HAL_RCC_GetPCLK2Freq>
 8002f94:	61b8      	str	r0, [r7, #24]
        break;
 8002f96:	e00f      	b.n	8002fb8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f98:	4b4e      	ldr	r3, [pc, #312]	@ (80030d4 <UART_SetConfig+0x268>)
 8002f9a:	61bb      	str	r3, [r7, #24]
        break;
 8002f9c:	e00c      	b.n	8002fb8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f9e:	f7ff f9f7 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 8002fa2:	61b8      	str	r0, [r7, #24]
        break;
 8002fa4:	e008      	b.n	8002fb8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002faa:	61bb      	str	r3, [r7, #24]
        break;
 8002fac:	e004      	b.n	8002fb8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	77bb      	strb	r3, [r7, #30]
        break;
 8002fb6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d074      	beq.n	80030a8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	005a      	lsls	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	085b      	lsrs	r3, r3, #1
 8002fc8:	441a      	add	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	2b0f      	cmp	r3, #15
 8002fd8:	d916      	bls.n	8003008 <UART_SetConfig+0x19c>
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fe0:	d212      	bcs.n	8003008 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	f023 030f 	bic.w	r3, r3, #15
 8002fea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	085b      	lsrs	r3, r3, #1
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	89fb      	ldrh	r3, [r7, #14]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	89fa      	ldrh	r2, [r7, #14]
 8003004:	60da      	str	r2, [r3, #12]
 8003006:	e04f      	b.n	80030a8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	77bb      	strb	r3, [r7, #30]
 800300c:	e04c      	b.n	80030a8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800300e:	7ffb      	ldrb	r3, [r7, #31]
 8003010:	2b08      	cmp	r3, #8
 8003012:	d828      	bhi.n	8003066 <UART_SetConfig+0x1fa>
 8003014:	a201      	add	r2, pc, #4	@ (adr r2, 800301c <UART_SetConfig+0x1b0>)
 8003016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301a:	bf00      	nop
 800301c:	08003041 	.word	0x08003041
 8003020:	08003049 	.word	0x08003049
 8003024:	08003051 	.word	0x08003051
 8003028:	08003067 	.word	0x08003067
 800302c:	08003057 	.word	0x08003057
 8003030:	08003067 	.word	0x08003067
 8003034:	08003067 	.word	0x08003067
 8003038:	08003067 	.word	0x08003067
 800303c:	0800305f 	.word	0x0800305f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003040:	f7ff fa06 	bl	8002450 <HAL_RCC_GetPCLK1Freq>
 8003044:	61b8      	str	r0, [r7, #24]
        break;
 8003046:	e013      	b.n	8003070 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003048:	f7ff fa24 	bl	8002494 <HAL_RCC_GetPCLK2Freq>
 800304c:	61b8      	str	r0, [r7, #24]
        break;
 800304e:	e00f      	b.n	8003070 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003050:	4b20      	ldr	r3, [pc, #128]	@ (80030d4 <UART_SetConfig+0x268>)
 8003052:	61bb      	str	r3, [r7, #24]
        break;
 8003054:	e00c      	b.n	8003070 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003056:	f7ff f99b 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 800305a:	61b8      	str	r0, [r7, #24]
        break;
 800305c:	e008      	b.n	8003070 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800305e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003062:	61bb      	str	r3, [r7, #24]
        break;
 8003064:	e004      	b.n	8003070 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	77bb      	strb	r3, [r7, #30]
        break;
 800306e:	bf00      	nop
    }

    if (pclk != 0U)
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d018      	beq.n	80030a8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	085a      	lsrs	r2, r3, #1
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	441a      	add	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	fbb2 f3f3 	udiv	r3, r2, r3
 8003088:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	2b0f      	cmp	r3, #15
 800308e:	d909      	bls.n	80030a4 <UART_SetConfig+0x238>
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003096:	d205      	bcs.n	80030a4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	b29a      	uxth	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	60da      	str	r2, [r3, #12]
 80030a2:	e001      	b.n	80030a8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80030b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3720      	adds	r7, #32
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	efff69f3 	.word	0xefff69f3
 80030c4:	40013800 	.word	0x40013800
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40004400 	.word	0x40004400
 80030d0:	40004800 	.word	0x40004800
 80030d4:	007a1200 	.word	0x007a1200

080030d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e4:	f003 0308 	and.w	r3, r3, #8
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00a      	beq.n	8003102 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00a      	beq.n	8003124 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00a      	beq.n	8003146 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316c:	f003 0310 	and.w	r3, r3, #16
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00a      	beq.n	800318a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d01a      	beq.n	80031ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031d6:	d10a      	bne.n	80031ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	605a      	str	r2, [r3, #4]
  }
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b098      	sub	sp, #96	@ 0x60
 8003220:	af02      	add	r7, sp, #8
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800322c:	f7fd fb32 	bl	8000894 <HAL_GetTick>
 8003230:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b08      	cmp	r3, #8
 800323e:	d12e      	bne.n	800329e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003240:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003248:	2200      	movs	r2, #0
 800324a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f88c 	bl	800336c <UART_WaitOnFlagUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d021      	beq.n	800329e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003262:	e853 3f00 	ldrex	r3, [r3]
 8003266:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800326a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800326e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003278:	647b      	str	r3, [r7, #68]	@ 0x44
 800327a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800327e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003280:	e841 2300 	strex	r3, r2, [r1]
 8003284:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1e6      	bne.n	800325a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2220      	movs	r2, #32
 8003290:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e062      	b.n	8003364 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	d149      	bne.n	8003340 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032b4:	2200      	movs	r2, #0
 80032b6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f856 	bl	800336c <UART_WaitOnFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d03c      	beq.n	8003340 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ce:	e853 3f00 	ldrex	r3, [r3]
 80032d2:	623b      	str	r3, [r7, #32]
   return(result);
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80032e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032ec:	e841 2300 	strex	r3, r2, [r1]
 80032f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80032f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1e6      	bne.n	80032c6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	3308      	adds	r3, #8
 80032fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	e853 3f00 	ldrex	r3, [r3]
 8003306:	60fb      	str	r3, [r7, #12]
   return(result);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 0301 	bic.w	r3, r3, #1
 800330e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	3308      	adds	r3, #8
 8003316:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003318:	61fa      	str	r2, [r7, #28]
 800331a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800331c:	69b9      	ldr	r1, [r7, #24]
 800331e:	69fa      	ldr	r2, [r7, #28]
 8003320:	e841 2300 	strex	r3, r2, [r1]
 8003324:	617b      	str	r3, [r7, #20]
   return(result);
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1e5      	bne.n	80032f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2220      	movs	r2, #32
 8003330:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e011      	b.n	8003364 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2220      	movs	r2, #32
 8003344:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2220      	movs	r2, #32
 800334a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3758      	adds	r7, #88	@ 0x58
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	4613      	mov	r3, r2
 800337a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800337c:	e04f      	b.n	800341e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003384:	d04b      	beq.n	800341e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003386:	f7fd fa85 	bl	8000894 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	429a      	cmp	r2, r3
 8003394:	d302      	bcc.n	800339c <UART_WaitOnFlagUntilTimeout+0x30>
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e04e      	b.n	800343e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d037      	beq.n	800341e <UART_WaitOnFlagUntilTimeout+0xb2>
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	2b80      	cmp	r3, #128	@ 0x80
 80033b2:	d034      	beq.n	800341e <UART_WaitOnFlagUntilTimeout+0xb2>
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2b40      	cmp	r3, #64	@ 0x40
 80033b8:	d031      	beq.n	800341e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d110      	bne.n	80033ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2208      	movs	r2, #8
 80033ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 f838 	bl	8003446 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2208      	movs	r2, #8
 80033da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e029      	b.n	800343e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033f8:	d111      	bne.n	800341e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003402:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 f81e 	bl	8003446 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2220      	movs	r2, #32
 800340e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e00f      	b.n	800343e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	69da      	ldr	r2, [r3, #28]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	4013      	ands	r3, r2
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	429a      	cmp	r2, r3
 800342c:	bf0c      	ite	eq
 800342e:	2301      	moveq	r3, #1
 8003430:	2300      	movne	r3, #0
 8003432:	b2db      	uxtb	r3, r3
 8003434:	461a      	mov	r2, r3
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	429a      	cmp	r2, r3
 800343a:	d0a0      	beq.n	800337e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003446:	b480      	push	{r7}
 8003448:	b095      	sub	sp, #84	@ 0x54
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003456:	e853 3f00 	ldrex	r3, [r3]
 800345a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800345c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003462:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	461a      	mov	r2, r3
 800346a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800346c:	643b      	str	r3, [r7, #64]	@ 0x40
 800346e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003470:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003472:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003474:	e841 2300 	strex	r3, r2, [r1]
 8003478:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800347a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1e6      	bne.n	800344e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3308      	adds	r3, #8
 8003486:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	e853 3f00 	ldrex	r3, [r3]
 800348e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f023 0301 	bic.w	r3, r3, #1
 8003496:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	3308      	adds	r3, #8
 800349e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034a8:	e841 2300 	strex	r3, r2, [r1]
 80034ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1e5      	bne.n	8003480 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d118      	bne.n	80034ee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	e853 3f00 	ldrex	r3, [r3]
 80034c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	f023 0310 	bic.w	r3, r3, #16
 80034d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034da:	61bb      	str	r3, [r7, #24]
 80034dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034de:	6979      	ldr	r1, [r7, #20]
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	e841 2300 	strex	r3, r2, [r1]
 80034e6:	613b      	str	r3, [r7, #16]
   return(result);
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1e6      	bne.n	80034bc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003502:	bf00      	nop
 8003504:	3754      	adds	r7, #84	@ 0x54
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
	...

08003510 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003516:	f3ef 8305 	mrs	r3, IPSR
 800351a:	60bb      	str	r3, [r7, #8]
  return(result);
 800351c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10f      	bne.n	8003542 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003522:	f3ef 8310 	mrs	r3, PRIMASK
 8003526:	607b      	str	r3, [r7, #4]
  return(result);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d109      	bne.n	8003542 <osKernelInitialize+0x32>
 800352e:	4b11      	ldr	r3, [pc, #68]	@ (8003574 <osKernelInitialize+0x64>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b02      	cmp	r3, #2
 8003534:	d109      	bne.n	800354a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003536:	f3ef 8311 	mrs	r3, BASEPRI
 800353a:	603b      	str	r3, [r7, #0]
  return(result);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003542:	f06f 0305 	mvn.w	r3, #5
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	e00c      	b.n	8003564 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800354a:	4b0a      	ldr	r3, [pc, #40]	@ (8003574 <osKernelInitialize+0x64>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d105      	bne.n	800355e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003552:	4b08      	ldr	r3, [pc, #32]	@ (8003574 <osKernelInitialize+0x64>)
 8003554:	2201      	movs	r2, #1
 8003556:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003558:	2300      	movs	r3, #0
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	e002      	b.n	8003564 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800355e:	f04f 33ff 	mov.w	r3, #4294967295
 8003562:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003564:	68fb      	ldr	r3, [r7, #12]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	200001b0 	.word	0x200001b0

08003578 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800357e:	f3ef 8305 	mrs	r3, IPSR
 8003582:	60bb      	str	r3, [r7, #8]
  return(result);
 8003584:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10f      	bne.n	80035aa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800358a:	f3ef 8310 	mrs	r3, PRIMASK
 800358e:	607b      	str	r3, [r7, #4]
  return(result);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d109      	bne.n	80035aa <osKernelStart+0x32>
 8003596:	4b11      	ldr	r3, [pc, #68]	@ (80035dc <osKernelStart+0x64>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b02      	cmp	r3, #2
 800359c:	d109      	bne.n	80035b2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800359e:	f3ef 8311 	mrs	r3, BASEPRI
 80035a2:	603b      	str	r3, [r7, #0]
  return(result);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80035aa:	f06f 0305 	mvn.w	r3, #5
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	e00e      	b.n	80035d0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80035b2:	4b0a      	ldr	r3, [pc, #40]	@ (80035dc <osKernelStart+0x64>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d107      	bne.n	80035ca <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80035ba:	4b08      	ldr	r3, [pc, #32]	@ (80035dc <osKernelStart+0x64>)
 80035bc:	2202      	movs	r2, #2
 80035be:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80035c0:	f001 f8b0 	bl	8004724 <vTaskStartScheduler>
      stat = osOK;
 80035c4:	2300      	movs	r3, #0
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	e002      	b.n	80035d0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80035ca:	f04f 33ff 	mov.w	r3, #4294967295
 80035ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80035d0:	68fb      	ldr	r3, [r7, #12]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	200001b0 	.word	0x200001b0

080035e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b092      	sub	sp, #72	@ 0x48
 80035e4:	af04      	add	r7, sp, #16
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80035ec:	2300      	movs	r3, #0
 80035ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035f0:	f3ef 8305 	mrs	r3, IPSR
 80035f4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80035f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f040 8094 	bne.w	8003726 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003602:	623b      	str	r3, [r7, #32]
  return(result);
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	2b00      	cmp	r3, #0
 8003608:	f040 808d 	bne.w	8003726 <osThreadNew+0x146>
 800360c:	4b48      	ldr	r3, [pc, #288]	@ (8003730 <osThreadNew+0x150>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b02      	cmp	r3, #2
 8003612:	d106      	bne.n	8003622 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003614:	f3ef 8311 	mrs	r3, BASEPRI
 8003618:	61fb      	str	r3, [r7, #28]
  return(result);
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	2b00      	cmp	r3, #0
 800361e:	f040 8082 	bne.w	8003726 <osThreadNew+0x146>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d07e      	beq.n	8003726 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003628:	2380      	movs	r3, #128	@ 0x80
 800362a:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800362c:	2318      	movs	r3, #24
 800362e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8003630:	2300      	movs	r3, #0
 8003632:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003634:	f107 031b 	add.w	r3, r7, #27
 8003638:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800363a:	f04f 33ff 	mov.w	r3, #4294967295
 800363e:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d045      	beq.n	80036d2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <osThreadNew+0x74>
        name = attr->name;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d002      	beq.n	8003662 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003664:	2b00      	cmp	r3, #0
 8003666:	d008      	beq.n	800367a <osThreadNew+0x9a>
 8003668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800366a:	2b38      	cmp	r3, #56	@ 0x38
 800366c:	d805      	bhi.n	800367a <osThreadNew+0x9a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <osThreadNew+0x9e>
        return (NULL);
 800367a:	2300      	movs	r3, #0
 800367c:	e054      	b.n	8003728 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	089b      	lsrs	r3, r3, #2
 800368c:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00e      	beq.n	80036b4 <osThreadNew+0xd4>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	2ba7      	cmp	r3, #167	@ 0xa7
 800369c:	d90a      	bls.n	80036b4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d006      	beq.n	80036b4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <osThreadNew+0xd4>
        mem = 1;
 80036ae:	2301      	movs	r3, #1
 80036b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036b2:	e010      	b.n	80036d6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10c      	bne.n	80036d6 <osThreadNew+0xf6>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d108      	bne.n	80036d6 <osThreadNew+0xf6>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d104      	bne.n	80036d6 <osThreadNew+0xf6>
          mem = 0;
 80036cc:	2300      	movs	r3, #0
 80036ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036d0:	e001      	b.n	80036d6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80036d2:	2300      	movs	r3, #0
 80036d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 80036d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d110      	bne.n	80036fe <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80036e4:	9202      	str	r2, [sp, #8]
 80036e6:	9301      	str	r3, [sp, #4]
 80036e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036f0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 fe2c 	bl	8004350 <xTaskCreateStatic>
 80036f8:	4603      	mov	r3, r0
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	e013      	b.n	8003726 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80036fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003700:	2b00      	cmp	r3, #0
 8003702:	d110      	bne.n	8003726 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003706:	b29a      	uxth	r2, r3
 8003708:	f107 0314 	add.w	r3, r7, #20
 800370c:	9301      	str	r3, [sp, #4]
 800370e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 fe79 	bl	800440e <xTaskCreate>
 800371c:	4603      	mov	r3, r0
 800371e:	2b01      	cmp	r3, #1
 8003720:	d001      	beq.n	8003726 <osThreadNew+0x146>
          hTask = NULL;
 8003722:	2300      	movs	r3, #0
 8003724:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003726:	697b      	ldr	r3, [r7, #20]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3738      	adds	r7, #56	@ 0x38
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	200001b0 	.word	0x200001b0

08003734 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800373c:	f3ef 8305 	mrs	r3, IPSR
 8003740:	613b      	str	r3, [r7, #16]
  return(result);
 8003742:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10f      	bne.n	8003768 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003748:	f3ef 8310 	mrs	r3, PRIMASK
 800374c:	60fb      	str	r3, [r7, #12]
  return(result);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d109      	bne.n	8003768 <osDelay+0x34>
 8003754:	4b0d      	ldr	r3, [pc, #52]	@ (800378c <osDelay+0x58>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b02      	cmp	r3, #2
 800375a:	d109      	bne.n	8003770 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800375c:	f3ef 8311 	mrs	r3, BASEPRI
 8003760:	60bb      	str	r3, [r7, #8]
  return(result);
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <osDelay+0x3c>
    stat = osErrorISR;
 8003768:	f06f 0305 	mvn.w	r3, #5
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	e007      	b.n	8003780 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <osDelay+0x4c>
      vTaskDelay(ticks);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 ff9c 	bl	80046b8 <vTaskDelay>
    }
  }

  return (stat);
 8003780:	697b      	ldr	r3, [r7, #20]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	200001b0 	.word	0x200001b0

08003790 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4a07      	ldr	r2, [pc, #28]	@ (80037bc <vApplicationGetIdleTaskMemory+0x2c>)
 80037a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	4a06      	ldr	r2, [pc, #24]	@ (80037c0 <vApplicationGetIdleTaskMemory+0x30>)
 80037a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2280      	movs	r2, #128	@ 0x80
 80037ac:	601a      	str	r2, [r3, #0]
}
 80037ae:	bf00      	nop
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	200001b4 	.word	0x200001b4
 80037c0:	2000025c 	.word	0x2000025c

080037c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4a07      	ldr	r2, [pc, #28]	@ (80037f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80037d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	4a06      	ldr	r2, [pc, #24]	@ (80037f4 <vApplicationGetTimerTaskMemory+0x30>)
 80037da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037e2:	601a      	str	r2, [r3, #0]
}
 80037e4:	bf00      	nop
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	2000045c 	.word	0x2000045c
 80037f4:	20000504 	.word	0x20000504

080037f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f103 0208 	add.w	r2, r3, #8
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f04f 32ff 	mov.w	r2, #4294967295
 8003810:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f103 0208 	add.w	r2, r3, #8
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f103 0208 	add.w	r2, r3, #8
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003852:	b480      	push	{r7}
 8003854:	b085      	sub	sp, #20
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
 800385a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	601a      	str	r2, [r3, #0]
}
 800388e:	bf00      	nop
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800389a:	b480      	push	{r7}
 800389c:	b085      	sub	sp, #20
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b0:	d103      	bne.n	80038ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	e00c      	b.n	80038d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	3308      	adds	r3, #8
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	e002      	b.n	80038c8 <vListInsert+0x2e>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d2f6      	bcs.n	80038c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	601a      	str	r2, [r3, #0]
}
 8003900:	bf00      	nop
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6892      	ldr	r2, [r2, #8]
 8003922:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6852      	ldr	r2, [r2, #4]
 800392c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	429a      	cmp	r2, r3
 8003936:	d103      	bne.n	8003940 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	1e5a      	subs	r2, r3, #1
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3714      	adds	r7, #20
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10b      	bne.n	800398c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003978:	f383 8811 	msr	BASEPRI, r3
 800397c:	f3bf 8f6f 	isb	sy
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003986:	bf00      	nop
 8003988:	bf00      	nop
 800398a:	e7fd      	b.n	8003988 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800398c:	f002 f86c 	bl	8005a68 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003998:	68f9      	ldr	r1, [r7, #12]
 800399a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800399c:	fb01 f303 	mul.w	r3, r1, r3
 80039a0:	441a      	add	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039bc:	3b01      	subs	r3, #1
 80039be:	68f9      	ldr	r1, [r7, #12]
 80039c0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80039c2:	fb01 f303 	mul.w	r3, r1, r3
 80039c6:	441a      	add	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	22ff      	movs	r2, #255	@ 0xff
 80039d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	22ff      	movs	r2, #255	@ 0xff
 80039d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d114      	bne.n	8003a0c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d01a      	beq.n	8003a20 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	3310      	adds	r3, #16
 80039ee:	4618      	mov	r0, r3
 80039f0:	f001 f93c 	bl	8004c6c <xTaskRemoveFromEventList>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d012      	beq.n	8003a20 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80039fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003a30 <xQueueGenericReset+0xd0>)
 80039fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	f3bf 8f4f 	dsb	sy
 8003a06:	f3bf 8f6f 	isb	sy
 8003a0a:	e009      	b.n	8003a20 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	3310      	adds	r3, #16
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff fef1 	bl	80037f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	3324      	adds	r3, #36	@ 0x24
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7ff feec 	bl	80037f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003a20:	f002 f854 	bl	8005acc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003a24:	2301      	movs	r3, #1
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	e000ed04 	.word	0xe000ed04

08003a34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b08e      	sub	sp, #56	@ 0x38
 8003a38:	af02      	add	r7, sp, #8
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10b      	bne.n	8003a60 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a4c:	f383 8811 	msr	BASEPRI, r3
 8003a50:	f3bf 8f6f 	isb	sy
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003a5a:	bf00      	nop
 8003a5c:	bf00      	nop
 8003a5e:	e7fd      	b.n	8003a5c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10b      	bne.n	8003a7e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a6a:	f383 8811 	msr	BASEPRI, r3
 8003a6e:	f3bf 8f6f 	isb	sy
 8003a72:	f3bf 8f4f 	dsb	sy
 8003a76:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003a78:	bf00      	nop
 8003a7a:	bf00      	nop
 8003a7c:	e7fd      	b.n	8003a7a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d002      	beq.n	8003a8a <xQueueGenericCreateStatic+0x56>
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <xQueueGenericCreateStatic+0x5a>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <xQueueGenericCreateStatic+0x5c>
 8003a8e:	2300      	movs	r3, #0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10b      	bne.n	8003aac <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a98:	f383 8811 	msr	BASEPRI, r3
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	623b      	str	r3, [r7, #32]
}
 8003aa6:	bf00      	nop
 8003aa8:	bf00      	nop
 8003aaa:	e7fd      	b.n	8003aa8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d102      	bne.n	8003ab8 <xQueueGenericCreateStatic+0x84>
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <xQueueGenericCreateStatic+0x88>
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e000      	b.n	8003abe <xQueueGenericCreateStatic+0x8a>
 8003abc:	2300      	movs	r3, #0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10b      	bne.n	8003ada <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ac6:	f383 8811 	msr	BASEPRI, r3
 8003aca:	f3bf 8f6f 	isb	sy
 8003ace:	f3bf 8f4f 	dsb	sy
 8003ad2:	61fb      	str	r3, [r7, #28]
}
 8003ad4:	bf00      	nop
 8003ad6:	bf00      	nop
 8003ad8:	e7fd      	b.n	8003ad6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003ada:	2350      	movs	r3, #80	@ 0x50
 8003adc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2b50      	cmp	r3, #80	@ 0x50
 8003ae2:	d00b      	beq.n	8003afc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae8:	f383 8811 	msr	BASEPRI, r3
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	61bb      	str	r3, [r7, #24]
}
 8003af6:	bf00      	nop
 8003af8:	bf00      	nop
 8003afa:	e7fd      	b.n	8003af8 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00d      	beq.n	8003b22 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b0e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	4613      	mov	r3, r2
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	68b9      	ldr	r1, [r7, #8]
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 f805 	bl	8003b2c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3730      	adds	r7, #48	@ 0x30
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
 8003b38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d103      	bne.n	8003b48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	e002      	b.n	8003b4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	69b8      	ldr	r0, [r7, #24]
 8003b5e:	f7ff feff 	bl	8003960 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	78fa      	ldrb	r2, [r7, #3]
 8003b66:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b6a:	bf00      	nop
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
	...

08003b74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08e      	sub	sp, #56	@ 0x38
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
 8003b80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b82:	2300      	movs	r3, #0
 8003b84:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10b      	bne.n	8003ba8 <xQueueGenericSend+0x34>
	__asm volatile
 8003b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b94:	f383 8811 	msr	BASEPRI, r3
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003ba2:	bf00      	nop
 8003ba4:	bf00      	nop
 8003ba6:	e7fd      	b.n	8003ba4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d103      	bne.n	8003bb6 <xQueueGenericSend+0x42>
 8003bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <xQueueGenericSend+0x46>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <xQueueGenericSend+0x48>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10b      	bne.n	8003bd8 <xQueueGenericSend+0x64>
	__asm volatile
 8003bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003bd2:	bf00      	nop
 8003bd4:	bf00      	nop
 8003bd6:	e7fd      	b.n	8003bd4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d103      	bne.n	8003be6 <xQueueGenericSend+0x72>
 8003bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d101      	bne.n	8003bea <xQueueGenericSend+0x76>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <xQueueGenericSend+0x78>
 8003bea:	2300      	movs	r3, #0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10b      	bne.n	8003c08 <xQueueGenericSend+0x94>
	__asm volatile
 8003bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf4:	f383 8811 	msr	BASEPRI, r3
 8003bf8:	f3bf 8f6f 	isb	sy
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	623b      	str	r3, [r7, #32]
}
 8003c02:	bf00      	nop
 8003c04:	bf00      	nop
 8003c06:	e7fd      	b.n	8003c04 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c08:	f001 f9fc 	bl	8005004 <xTaskGetSchedulerState>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d102      	bne.n	8003c18 <xQueueGenericSend+0xa4>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <xQueueGenericSend+0xa8>
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e000      	b.n	8003c1e <xQueueGenericSend+0xaa>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10b      	bne.n	8003c3a <xQueueGenericSend+0xc6>
	__asm volatile
 8003c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c26:	f383 8811 	msr	BASEPRI, r3
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	61fb      	str	r3, [r7, #28]
}
 8003c34:	bf00      	nop
 8003c36:	bf00      	nop
 8003c38:	e7fd      	b.n	8003c36 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c3a:	f001 ff15 	bl	8005a68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d302      	bcc.n	8003c50 <xQueueGenericSend+0xdc>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d129      	bne.n	8003ca4 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	68b9      	ldr	r1, [r7, #8]
 8003c54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c56:	f000 fa0d 	bl	8004074 <prvCopyDataToQueue>
 8003c5a:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d010      	beq.n	8003c86 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c66:	3324      	adds	r3, #36	@ 0x24
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 ffff 	bl	8004c6c <xTaskRemoveFromEventList>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d013      	beq.n	8003c9c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c74:	4b3f      	ldr	r3, [pc, #252]	@ (8003d74 <xQueueGenericSend+0x200>)
 8003c76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	f3bf 8f6f 	isb	sy
 8003c84:	e00a      	b.n	8003c9c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d007      	beq.n	8003c9c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c8c:	4b39      	ldr	r3, [pc, #228]	@ (8003d74 <xQueueGenericSend+0x200>)
 8003c8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c9c:	f001 ff16 	bl	8005acc <vPortExitCritical>
				return pdPASS;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e063      	b.n	8003d6c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d103      	bne.n	8003cb2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003caa:	f001 ff0f 	bl	8005acc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	e05c      	b.n	8003d6c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d106      	bne.n	8003cc6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cb8:	f107 0314 	add.w	r3, r7, #20
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f001 f839 	bl	8004d34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cc6:	f001 ff01 	bl	8005acc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cca:	f000 fd9b 	bl	8004804 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cce:	f001 fecb 	bl	8005a68 <vPortEnterCritical>
 8003cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cd8:	b25b      	sxtb	r3, r3
 8003cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cde:	d103      	bne.n	8003ce8 <xQueueGenericSend+0x174>
 8003ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003cee:	b25b      	sxtb	r3, r3
 8003cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf4:	d103      	bne.n	8003cfe <xQueueGenericSend+0x18a>
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003cfe:	f001 fee5 	bl	8005acc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d02:	1d3a      	adds	r2, r7, #4
 8003d04:	f107 0314 	add.w	r3, r7, #20
 8003d08:	4611      	mov	r1, r2
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f001 f828 	bl	8004d60 <xTaskCheckForTimeOut>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d124      	bne.n	8003d60 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d18:	f000 faa4 	bl	8004264 <prvIsQueueFull>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d018      	beq.n	8003d54 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d24:	3310      	adds	r3, #16
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	4611      	mov	r1, r2
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 ff4c 	bl	8004bc8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003d30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d32:	f000 fa2f 	bl	8004194 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003d36:	f000 fd73 	bl	8004820 <xTaskResumeAll>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f47f af7c 	bne.w	8003c3a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003d42:	4b0c      	ldr	r3, [pc, #48]	@ (8003d74 <xQueueGenericSend+0x200>)
 8003d44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	f3bf 8f6f 	isb	sy
 8003d52:	e772      	b.n	8003c3a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003d54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d56:	f000 fa1d 	bl	8004194 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d5a:	f000 fd61 	bl	8004820 <xTaskResumeAll>
 8003d5e:	e76c      	b.n	8003c3a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003d60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d62:	f000 fa17 	bl	8004194 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d66:	f000 fd5b 	bl	8004820 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003d6a:	2300      	movs	r3, #0
		}
	}
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3738      	adds	r7, #56	@ 0x38
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	e000ed04 	.word	0xe000ed04

08003d78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08e      	sub	sp, #56	@ 0x38
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
 8003d84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10b      	bne.n	8003da8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d94:	f383 8811 	msr	BASEPRI, r3
 8003d98:	f3bf 8f6f 	isb	sy
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003da2:	bf00      	nop
 8003da4:	bf00      	nop
 8003da6:	e7fd      	b.n	8003da4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d103      	bne.n	8003db6 <xQueueGenericSendFromISR+0x3e>
 8003dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <xQueueGenericSendFromISR+0x42>
 8003db6:	2301      	movs	r3, #1
 8003db8:	e000      	b.n	8003dbc <xQueueGenericSendFromISR+0x44>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10b      	bne.n	8003dd8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dc4:	f383 8811 	msr	BASEPRI, r3
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	623b      	str	r3, [r7, #32]
}
 8003dd2:	bf00      	nop
 8003dd4:	bf00      	nop
 8003dd6:	e7fd      	b.n	8003dd4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d103      	bne.n	8003de6 <xQueueGenericSendFromISR+0x6e>
 8003dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <xQueueGenericSendFromISR+0x72>
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <xQueueGenericSendFromISR+0x74>
 8003dea:	2300      	movs	r3, #0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10b      	bne.n	8003e08 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df4:	f383 8811 	msr	BASEPRI, r3
 8003df8:	f3bf 8f6f 	isb	sy
 8003dfc:	f3bf 8f4f 	dsb	sy
 8003e00:	61fb      	str	r3, [r7, #28]
}
 8003e02:	bf00      	nop
 8003e04:	bf00      	nop
 8003e06:	e7fd      	b.n	8003e04 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e08:	f001 ff0e 	bl	8005c28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003e0c:	f3ef 8211 	mrs	r2, BASEPRI
 8003e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	61ba      	str	r2, [r7, #24]
 8003e22:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003e24:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d302      	bcc.n	8003e3a <xQueueGenericSendFromISR+0xc2>
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d12c      	bne.n	8003e94 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	68b9      	ldr	r1, [r7, #8]
 8003e48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e4a:	f000 f913 	bl	8004074 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003e4e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8003e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e56:	d112      	bne.n	8003e7e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d016      	beq.n	8003e8e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e62:	3324      	adds	r3, #36	@ 0x24
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 ff01 	bl	8004c6c <xTaskRemoveFromEventList>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00e      	beq.n	8003e8e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00b      	beq.n	8003e8e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	e007      	b.n	8003e8e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e82:	3301      	adds	r3, #1
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	b25a      	sxtb	r2, r3
 8003e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8003e92:	e001      	b.n	8003e98 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003e94:	2300      	movs	r3, #0
 8003e96:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e9a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003ea2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3738      	adds	r7, #56	@ 0x38
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
	...

08003eb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08c      	sub	sp, #48	@ 0x30
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10b      	bne.n	8003ee2 <xQueueReceive+0x32>
	__asm volatile
 8003eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ece:	f383 8811 	msr	BASEPRI, r3
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	623b      	str	r3, [r7, #32]
}
 8003edc:	bf00      	nop
 8003ede:	bf00      	nop
 8003ee0:	e7fd      	b.n	8003ede <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d103      	bne.n	8003ef0 <xQueueReceive+0x40>
 8003ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <xQueueReceive+0x44>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e000      	b.n	8003ef6 <xQueueReceive+0x46>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10b      	bne.n	8003f12 <xQueueReceive+0x62>
	__asm volatile
 8003efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003efe:	f383 8811 	msr	BASEPRI, r3
 8003f02:	f3bf 8f6f 	isb	sy
 8003f06:	f3bf 8f4f 	dsb	sy
 8003f0a:	61fb      	str	r3, [r7, #28]
}
 8003f0c:	bf00      	nop
 8003f0e:	bf00      	nop
 8003f10:	e7fd      	b.n	8003f0e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f12:	f001 f877 	bl	8005004 <xTaskGetSchedulerState>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d102      	bne.n	8003f22 <xQueueReceive+0x72>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <xQueueReceive+0x76>
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <xQueueReceive+0x78>
 8003f26:	2300      	movs	r3, #0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10b      	bne.n	8003f44 <xQueueReceive+0x94>
	__asm volatile
 8003f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f30:	f383 8811 	msr	BASEPRI, r3
 8003f34:	f3bf 8f6f 	isb	sy
 8003f38:	f3bf 8f4f 	dsb	sy
 8003f3c:	61bb      	str	r3, [r7, #24]
}
 8003f3e:	bf00      	nop
 8003f40:	bf00      	nop
 8003f42:	e7fd      	b.n	8003f40 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f44:	f001 fd90 	bl	8005a68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d01f      	beq.n	8003f94 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f54:	68b9      	ldr	r1, [r7, #8]
 8003f56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f58:	f000 f8f6 	bl	8004148 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5e:	1e5a      	subs	r2, r3, #1
 8003f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f62:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00f      	beq.n	8003f8c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f6e:	3310      	adds	r3, #16
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 fe7b 	bl	8004c6c <xTaskRemoveFromEventList>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d007      	beq.n	8003f8c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f7c:	4b3c      	ldr	r3, [pc, #240]	@ (8004070 <xQueueReceive+0x1c0>)
 8003f7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f8c:	f001 fd9e 	bl	8005acc <vPortExitCritical>
				return pdPASS;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e069      	b.n	8004068 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d103      	bne.n	8003fa2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f9a:	f001 fd97 	bl	8005acc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	e062      	b.n	8004068 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d106      	bne.n	8003fb6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fa8:	f107 0310 	add.w	r3, r7, #16
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 fec1 	bl	8004d34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003fb6:	f001 fd89 	bl	8005acc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003fba:	f000 fc23 	bl	8004804 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fbe:	f001 fd53 	bl	8005a68 <vPortEnterCritical>
 8003fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003fc8:	b25b      	sxtb	r3, r3
 8003fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fce:	d103      	bne.n	8003fd8 <xQueueReceive+0x128>
 8003fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003fde:	b25b      	sxtb	r3, r3
 8003fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe4:	d103      	bne.n	8003fee <xQueueReceive+0x13e>
 8003fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fee:	f001 fd6d 	bl	8005acc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ff2:	1d3a      	adds	r2, r7, #4
 8003ff4:	f107 0310 	add.w	r3, r7, #16
 8003ff8:	4611      	mov	r1, r2
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 feb0 	bl	8004d60 <xTaskCheckForTimeOut>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d123      	bne.n	800404e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004006:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004008:	f000 f916 	bl	8004238 <prvIsQueueEmpty>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d017      	beq.n	8004042 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004014:	3324      	adds	r3, #36	@ 0x24
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	4611      	mov	r1, r2
 800401a:	4618      	mov	r0, r3
 800401c:	f000 fdd4 	bl	8004bc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004020:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004022:	f000 f8b7 	bl	8004194 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004026:	f000 fbfb 	bl	8004820 <xTaskResumeAll>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d189      	bne.n	8003f44 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004030:	4b0f      	ldr	r3, [pc, #60]	@ (8004070 <xQueueReceive+0x1c0>)
 8004032:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	e780      	b.n	8003f44 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004042:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004044:	f000 f8a6 	bl	8004194 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004048:	f000 fbea 	bl	8004820 <xTaskResumeAll>
 800404c:	e77a      	b.n	8003f44 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800404e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004050:	f000 f8a0 	bl	8004194 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004054:	f000 fbe4 	bl	8004820 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004058:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800405a:	f000 f8ed 	bl	8004238 <prvIsQueueEmpty>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	f43f af6f 	beq.w	8003f44 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004066:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004068:	4618      	mov	r0, r3
 800406a:	3730      	adds	r7, #48	@ 0x30
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	e000ed04 	.word	0xe000ed04

08004074 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004080:	2300      	movs	r3, #0
 8004082:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004088:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10d      	bne.n	80040ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d14d      	bne.n	8004136 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 ffce 	bl	8005040 <xTaskPriorityDisinherit>
 80040a4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	605a      	str	r2, [r3, #4]
 80040ac:	e043      	b.n	8004136 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d119      	bne.n	80040e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6898      	ldr	r0, [r3, #8]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040bc:	461a      	mov	r2, r3
 80040be:	68b9      	ldr	r1, [r7, #8]
 80040c0:	f002 f858 	bl	8006174 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040cc:	441a      	add	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d32b      	bcc.n	8004136 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	609a      	str	r2, [r3, #8]
 80040e6:	e026      	b.n	8004136 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	68d8      	ldr	r0, [r3, #12]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f0:	461a      	mov	r2, r3
 80040f2:	68b9      	ldr	r1, [r7, #8]
 80040f4:	f002 f83e 	bl	8006174 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004100:	425b      	negs	r3, r3
 8004102:	441a      	add	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d207      	bcs.n	8004124 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411c:	425b      	negs	r3, r3
 800411e:	441a      	add	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b02      	cmp	r3, #2
 8004128:	d105      	bne.n	8004136 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	3b01      	subs	r3, #1
 8004134:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800413e:	697b      	ldr	r3, [r7, #20]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004156:	2b00      	cmp	r3, #0
 8004158:	d018      	beq.n	800418c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68da      	ldr	r2, [r3, #12]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004162:	441a      	add	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68da      	ldr	r2, [r3, #12]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	429a      	cmp	r2, r3
 8004172:	d303      	bcc.n	800417c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68d9      	ldr	r1, [r3, #12]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004184:	461a      	mov	r2, r3
 8004186:	6838      	ldr	r0, [r7, #0]
 8004188:	f001 fff4 	bl	8006174 <memcpy>
	}
}
 800418c:	bf00      	nop
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800419c:	f001 fc64 	bl	8005a68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041a8:	e011      	b.n	80041ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d012      	beq.n	80041d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3324      	adds	r3, #36	@ 0x24
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 fd58 	bl	8004c6c <xTaskRemoveFromEventList>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80041c2:	f000 fe31 	bl	8004e28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	dce9      	bgt.n	80041aa <prvUnlockQueue+0x16>
 80041d6:	e000      	b.n	80041da <prvUnlockQueue+0x46>
					break;
 80041d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	22ff      	movs	r2, #255	@ 0xff
 80041de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80041e2:	f001 fc73 	bl	8005acc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80041e6:	f001 fc3f 	bl	8005a68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80041f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041f2:	e011      	b.n	8004218 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d012      	beq.n	8004222 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3310      	adds	r3, #16
 8004200:	4618      	mov	r0, r3
 8004202:	f000 fd33 	bl	8004c6c <xTaskRemoveFromEventList>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800420c:	f000 fe0c 	bl	8004e28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004210:	7bbb      	ldrb	r3, [r7, #14]
 8004212:	3b01      	subs	r3, #1
 8004214:	b2db      	uxtb	r3, r3
 8004216:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800421c:	2b00      	cmp	r3, #0
 800421e:	dce9      	bgt.n	80041f4 <prvUnlockQueue+0x60>
 8004220:	e000      	b.n	8004224 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004222:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	22ff      	movs	r2, #255	@ 0xff
 8004228:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800422c:	f001 fc4e 	bl	8005acc <vPortExitCritical>
}
 8004230:	bf00      	nop
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004240:	f001 fc12 	bl	8005a68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004248:	2b00      	cmp	r3, #0
 800424a:	d102      	bne.n	8004252 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800424c:	2301      	movs	r3, #1
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	e001      	b.n	8004256 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004256:	f001 fc39 	bl	8005acc <vPortExitCritical>

	return xReturn;
 800425a:	68fb      	ldr	r3, [r7, #12]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800426c:	f001 fbfc 	bl	8005a68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004278:	429a      	cmp	r2, r3
 800427a:	d102      	bne.n	8004282 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800427c:	2301      	movs	r3, #1
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	e001      	b.n	8004286 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004282:	2300      	movs	r3, #0
 8004284:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004286:	f001 fc21 	bl	8005acc <vPortExitCritical>

	return xReturn;
 800428a:	68fb      	ldr	r3, [r7, #12]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
 80042a2:	e014      	b.n	80042ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80042a4:	4a0f      	ldr	r2, [pc, #60]	@ (80042e4 <vQueueAddToRegistry+0x50>)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10b      	bne.n	80042c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80042b0:	490c      	ldr	r1, [pc, #48]	@ (80042e4 <vQueueAddToRegistry+0x50>)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80042ba:	4a0a      	ldr	r2, [pc, #40]	@ (80042e4 <vQueueAddToRegistry+0x50>)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	4413      	add	r3, r2
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80042c6:	e006      	b.n	80042d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	3301      	adds	r3, #1
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2b07      	cmp	r3, #7
 80042d2:	d9e7      	bls.n	80042a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80042d4:	bf00      	nop
 80042d6:	bf00      	nop
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	20000904 	.word	0x20000904

080042e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80042f8:	f001 fbb6 	bl	8005a68 <vPortEnterCritical>
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004302:	b25b      	sxtb	r3, r3
 8004304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004308:	d103      	bne.n	8004312 <vQueueWaitForMessageRestricted+0x2a>
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004318:	b25b      	sxtb	r3, r3
 800431a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431e:	d103      	bne.n	8004328 <vQueueWaitForMessageRestricted+0x40>
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004328:	f001 fbd0 	bl	8005acc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004330:	2b00      	cmp	r3, #0
 8004332:	d106      	bne.n	8004342 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	3324      	adds	r3, #36	@ 0x24
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	68b9      	ldr	r1, [r7, #8]
 800433c:	4618      	mov	r0, r3
 800433e:	f000 fc69 	bl	8004c14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004342:	6978      	ldr	r0, [r7, #20]
 8004344:	f7ff ff26 	bl	8004194 <prvUnlockQueue>
	}
 8004348:	bf00      	nop
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08e      	sub	sp, #56	@ 0x38
 8004354:	af04      	add	r7, sp, #16
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
 800435c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800435e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10b      	bne.n	800437c <xTaskCreateStatic+0x2c>
	__asm volatile
 8004364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004368:	f383 8811 	msr	BASEPRI, r3
 800436c:	f3bf 8f6f 	isb	sy
 8004370:	f3bf 8f4f 	dsb	sy
 8004374:	623b      	str	r3, [r7, #32]
}
 8004376:	bf00      	nop
 8004378:	bf00      	nop
 800437a:	e7fd      	b.n	8004378 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800437c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10b      	bne.n	800439a <xTaskCreateStatic+0x4a>
	__asm volatile
 8004382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	61fb      	str	r3, [r7, #28]
}
 8004394:	bf00      	nop
 8004396:	bf00      	nop
 8004398:	e7fd      	b.n	8004396 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800439a:	23a8      	movs	r3, #168	@ 0xa8
 800439c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	2ba8      	cmp	r3, #168	@ 0xa8
 80043a2:	d00b      	beq.n	80043bc <xTaskCreateStatic+0x6c>
	__asm volatile
 80043a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a8:	f383 8811 	msr	BASEPRI, r3
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	61bb      	str	r3, [r7, #24]
}
 80043b6:	bf00      	nop
 80043b8:	bf00      	nop
 80043ba:	e7fd      	b.n	80043b8 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d01e      	beq.n	8004400 <xTaskCreateStatic+0xb0>
 80043c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d01b      	beq.n	8004400 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ca:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043d0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d4:	2202      	movs	r2, #2
 80043d6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80043da:	2300      	movs	r3, #0
 80043dc:	9303      	str	r3, [sp, #12]
 80043de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e0:	9302      	str	r3, [sp, #8]
 80043e2:	f107 0314 	add.w	r3, r7, #20
 80043e6:	9301      	str	r3, [sp, #4]
 80043e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	68b9      	ldr	r1, [r7, #8]
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 f850 	bl	8004498 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80043fa:	f000 f8ed 	bl	80045d8 <prvAddNewTaskToReadyList>
 80043fe:	e001      	b.n	8004404 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8004400:	2300      	movs	r3, #0
 8004402:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004404:	697b      	ldr	r3, [r7, #20]
	}
 8004406:	4618      	mov	r0, r3
 8004408:	3728      	adds	r7, #40	@ 0x28
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800440e:	b580      	push	{r7, lr}
 8004410:	b08c      	sub	sp, #48	@ 0x30
 8004412:	af04      	add	r7, sp, #16
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	603b      	str	r3, [r7, #0]
 800441a:	4613      	mov	r3, r2
 800441c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800441e:	88fb      	ldrh	r3, [r7, #6]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4618      	mov	r0, r3
 8004424:	f001 fc42 	bl	8005cac <pvPortMalloc>
 8004428:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00e      	beq.n	800444e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004430:	20a8      	movs	r0, #168	@ 0xa8
 8004432:	f001 fc3b 	bl	8005cac <pvPortMalloc>
 8004436:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	631a      	str	r2, [r3, #48]	@ 0x30
 8004444:	e005      	b.n	8004452 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004446:	6978      	ldr	r0, [r7, #20]
 8004448:	f001 fcf8 	bl	8005e3c <vPortFree>
 800444c:	e001      	b.n	8004452 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800444e:	2300      	movs	r3, #0
 8004450:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d017      	beq.n	8004488 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004460:	88fa      	ldrh	r2, [r7, #6]
 8004462:	2300      	movs	r3, #0
 8004464:	9303      	str	r3, [sp, #12]
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	9302      	str	r3, [sp, #8]
 800446a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800446c:	9301      	str	r3, [sp, #4]
 800446e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	68b9      	ldr	r1, [r7, #8]
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 f80e 	bl	8004498 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800447c:	69f8      	ldr	r0, [r7, #28]
 800447e:	f000 f8ab 	bl	80045d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004482:	2301      	movs	r3, #1
 8004484:	61bb      	str	r3, [r7, #24]
 8004486:	e002      	b.n	800448e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004488:	f04f 33ff 	mov.w	r3, #4294967295
 800448c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800448e:	69bb      	ldr	r3, [r7, #24]
	}
 8004490:	4618      	mov	r0, r3
 8004492:	3720      	adds	r7, #32
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b088      	sub	sp, #32
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80044a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	461a      	mov	r2, r3
 80044b0:	21a5      	movs	r1, #165	@ 0xa5
 80044b2:	f001 fddb 	bl	800606c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80044b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044c0:	3b01      	subs	r3, #1
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	f023 0307 	bic.w	r3, r3, #7
 80044ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00b      	beq.n	80044f2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80044da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	617b      	str	r3, [r7, #20]
}
 80044ec:	bf00      	nop
 80044ee:	bf00      	nop
 80044f0:	e7fd      	b.n	80044ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044f2:	2300      	movs	r3, #0
 80044f4:	61fb      	str	r3, [r7, #28]
 80044f6:	e012      	b.n	800451e <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	4413      	add	r3, r2
 80044fe:	7819      	ldrb	r1, [r3, #0]
 8004500:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	4413      	add	r3, r2
 8004506:	3334      	adds	r3, #52	@ 0x34
 8004508:	460a      	mov	r2, r1
 800450a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	4413      	add	r3, r2
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d006      	beq.n	8004526 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	3301      	adds	r3, #1
 800451c:	61fb      	str	r3, [r7, #28]
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	2b0f      	cmp	r3, #15
 8004522:	d9e9      	bls.n	80044f8 <prvInitialiseNewTask+0x60>
 8004524:	e000      	b.n	8004528 <prvInitialiseNewTask+0x90>
		{
			break;
 8004526:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004532:	2b37      	cmp	r3, #55	@ 0x37
 8004534:	d901      	bls.n	800453a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004536:	2337      	movs	r3, #55	@ 0x37
 8004538:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800453a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800453e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004542:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004544:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004548:	2200      	movs	r2, #0
 800454a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800454c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454e:	3304      	adds	r3, #4
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff f971 	bl	8003838 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004558:	3318      	adds	r3, #24
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff f96c 	bl	8003838 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004562:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004564:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004568:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800456c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004572:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004574:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004578:	2200      	movs	r2, #0
 800457a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800457e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004580:	2200      	movs	r2, #0
 8004582:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004588:	3354      	adds	r3, #84	@ 0x54
 800458a:	224c      	movs	r2, #76	@ 0x4c
 800458c:	2100      	movs	r1, #0
 800458e:	4618      	mov	r0, r3
 8004590:	f001 fd6c 	bl	800606c <memset>
 8004594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004596:	4a0d      	ldr	r2, [pc, #52]	@ (80045cc <prvInitialiseNewTask+0x134>)
 8004598:	659a      	str	r2, [r3, #88]	@ 0x58
 800459a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800459c:	4a0c      	ldr	r2, [pc, #48]	@ (80045d0 <prvInitialiseNewTask+0x138>)
 800459e:	65da      	str	r2, [r3, #92]	@ 0x5c
 80045a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a2:	4a0c      	ldr	r2, [pc, #48]	@ (80045d4 <prvInitialiseNewTask+0x13c>)
 80045a4:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	68f9      	ldr	r1, [r7, #12]
 80045aa:	69b8      	ldr	r0, [r7, #24]
 80045ac:	f001 f92c 	bl	8005808 <pxPortInitialiseStack>
 80045b0:	4602      	mov	r2, r0
 80045b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80045b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d002      	beq.n	80045c2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045c2:	bf00      	nop
 80045c4:	3720      	adds	r7, #32
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20001b90 	.word	0x20001b90
 80045d0:	20001bf8 	.word	0x20001bf8
 80045d4:	20001c60 	.word	0x20001c60

080045d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80045e0:	f001 fa42 	bl	8005a68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80045e4:	4b2d      	ldr	r3, [pc, #180]	@ (800469c <prvAddNewTaskToReadyList+0xc4>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3301      	adds	r3, #1
 80045ea:	4a2c      	ldr	r2, [pc, #176]	@ (800469c <prvAddNewTaskToReadyList+0xc4>)
 80045ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045ee:	4b2c      	ldr	r3, [pc, #176]	@ (80046a0 <prvAddNewTaskToReadyList+0xc8>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d109      	bne.n	800460a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80045f6:	4a2a      	ldr	r2, [pc, #168]	@ (80046a0 <prvAddNewTaskToReadyList+0xc8>)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045fc:	4b27      	ldr	r3, [pc, #156]	@ (800469c <prvAddNewTaskToReadyList+0xc4>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d110      	bne.n	8004626 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004604:	f000 fc34 	bl	8004e70 <prvInitialiseTaskLists>
 8004608:	e00d      	b.n	8004626 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800460a:	4b26      	ldr	r3, [pc, #152]	@ (80046a4 <prvAddNewTaskToReadyList+0xcc>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d109      	bne.n	8004626 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004612:	4b23      	ldr	r3, [pc, #140]	@ (80046a0 <prvAddNewTaskToReadyList+0xc8>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461c:	429a      	cmp	r2, r3
 800461e:	d802      	bhi.n	8004626 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004620:	4a1f      	ldr	r2, [pc, #124]	@ (80046a0 <prvAddNewTaskToReadyList+0xc8>)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004626:	4b20      	ldr	r3, [pc, #128]	@ (80046a8 <prvAddNewTaskToReadyList+0xd0>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3301      	adds	r3, #1
 800462c:	4a1e      	ldr	r2, [pc, #120]	@ (80046a8 <prvAddNewTaskToReadyList+0xd0>)
 800462e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004630:	4b1d      	ldr	r3, [pc, #116]	@ (80046a8 <prvAddNewTaskToReadyList+0xd0>)
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800463c:	4b1b      	ldr	r3, [pc, #108]	@ (80046ac <prvAddNewTaskToReadyList+0xd4>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	429a      	cmp	r2, r3
 8004642:	d903      	bls.n	800464c <prvAddNewTaskToReadyList+0x74>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004648:	4a18      	ldr	r2, [pc, #96]	@ (80046ac <prvAddNewTaskToReadyList+0xd4>)
 800464a:	6013      	str	r3, [r2, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004650:	4613      	mov	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4a15      	ldr	r2, [pc, #84]	@ (80046b0 <prvAddNewTaskToReadyList+0xd8>)
 800465a:	441a      	add	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3304      	adds	r3, #4
 8004660:	4619      	mov	r1, r3
 8004662:	4610      	mov	r0, r2
 8004664:	f7ff f8f5 	bl	8003852 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004668:	f001 fa30 	bl	8005acc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800466c:	4b0d      	ldr	r3, [pc, #52]	@ (80046a4 <prvAddNewTaskToReadyList+0xcc>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00e      	beq.n	8004692 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004674:	4b0a      	ldr	r3, [pc, #40]	@ (80046a0 <prvAddNewTaskToReadyList+0xc8>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467e:	429a      	cmp	r2, r3
 8004680:	d207      	bcs.n	8004692 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004682:	4b0c      	ldr	r3, [pc, #48]	@ (80046b4 <prvAddNewTaskToReadyList+0xdc>)
 8004684:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004692:	bf00      	nop
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	20000e18 	.word	0x20000e18
 80046a0:	20000944 	.word	0x20000944
 80046a4:	20000e24 	.word	0x20000e24
 80046a8:	20000e34 	.word	0x20000e34
 80046ac:	20000e20 	.word	0x20000e20
 80046b0:	20000948 	.word	0x20000948
 80046b4:	e000ed04 	.word	0xe000ed04

080046b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d018      	beq.n	80046fc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80046ca:	4b14      	ldr	r3, [pc, #80]	@ (800471c <vTaskDelay+0x64>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00b      	beq.n	80046ea <vTaskDelay+0x32>
	__asm volatile
 80046d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	60bb      	str	r3, [r7, #8]
}
 80046e4:	bf00      	nop
 80046e6:	bf00      	nop
 80046e8:	e7fd      	b.n	80046e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80046ea:	f000 f88b 	bl	8004804 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80046ee:	2100      	movs	r1, #0
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 fd15 	bl	8005120 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80046f6:	f000 f893 	bl	8004820 <xTaskResumeAll>
 80046fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d107      	bne.n	8004712 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004702:	4b07      	ldr	r3, [pc, #28]	@ (8004720 <vTaskDelay+0x68>)
 8004704:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004712:	bf00      	nop
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20000e40 	.word	0x20000e40
 8004720:	e000ed04 	.word	0xe000ed04

08004724 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08a      	sub	sp, #40	@ 0x28
 8004728:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800472a:	2300      	movs	r3, #0
 800472c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800472e:	2300      	movs	r3, #0
 8004730:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004732:	463a      	mov	r2, r7
 8004734:	1d39      	adds	r1, r7, #4
 8004736:	f107 0308 	add.w	r3, r7, #8
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff f828 	bl	8003790 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004740:	6839      	ldr	r1, [r7, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	9202      	str	r2, [sp, #8]
 8004748:	9301      	str	r3, [sp, #4]
 800474a:	2300      	movs	r3, #0
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	2300      	movs	r3, #0
 8004750:	460a      	mov	r2, r1
 8004752:	4924      	ldr	r1, [pc, #144]	@ (80047e4 <vTaskStartScheduler+0xc0>)
 8004754:	4824      	ldr	r0, [pc, #144]	@ (80047e8 <vTaskStartScheduler+0xc4>)
 8004756:	f7ff fdfb 	bl	8004350 <xTaskCreateStatic>
 800475a:	4603      	mov	r3, r0
 800475c:	4a23      	ldr	r2, [pc, #140]	@ (80047ec <vTaskStartScheduler+0xc8>)
 800475e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004760:	4b22      	ldr	r3, [pc, #136]	@ (80047ec <vTaskStartScheduler+0xc8>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004768:	2301      	movs	r3, #1
 800476a:	617b      	str	r3, [r7, #20]
 800476c:	e001      	b.n	8004772 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800476e:	2300      	movs	r3, #0
 8004770:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d102      	bne.n	800477e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004778:	f000 fd26 	bl	80051c8 <xTimerCreateTimerTask>
 800477c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d11b      	bne.n	80047bc <vTaskStartScheduler+0x98>
	__asm volatile
 8004784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004788:	f383 8811 	msr	BASEPRI, r3
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	613b      	str	r3, [r7, #16]
}
 8004796:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004798:	4b15      	ldr	r3, [pc, #84]	@ (80047f0 <vTaskStartScheduler+0xcc>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3354      	adds	r3, #84	@ 0x54
 800479e:	4a15      	ldr	r2, [pc, #84]	@ (80047f4 <vTaskStartScheduler+0xd0>)
 80047a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80047a2:	4b15      	ldr	r3, [pc, #84]	@ (80047f8 <vTaskStartScheduler+0xd4>)
 80047a4:	f04f 32ff 	mov.w	r2, #4294967295
 80047a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80047aa:	4b14      	ldr	r3, [pc, #80]	@ (80047fc <vTaskStartScheduler+0xd8>)
 80047ac:	2201      	movs	r2, #1
 80047ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80047b0:	4b13      	ldr	r3, [pc, #76]	@ (8004800 <vTaskStartScheduler+0xdc>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80047b6:	f001 f8b3 	bl	8005920 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80047ba:	e00f      	b.n	80047dc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c2:	d10b      	bne.n	80047dc <vTaskStartScheduler+0xb8>
	__asm volatile
 80047c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	60fb      	str	r3, [r7, #12]
}
 80047d6:	bf00      	nop
 80047d8:	bf00      	nop
 80047da:	e7fd      	b.n	80047d8 <vTaskStartScheduler+0xb4>
}
 80047dc:	bf00      	nop
 80047de:	3718      	adds	r7, #24
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	08006280 	.word	0x08006280
 80047e8:	08004e41 	.word	0x08004e41
 80047ec:	20000e3c 	.word	0x20000e3c
 80047f0:	20000944 	.word	0x20000944
 80047f4:	20000010 	.word	0x20000010
 80047f8:	20000e38 	.word	0x20000e38
 80047fc:	20000e24 	.word	0x20000e24
 8004800:	20000e1c 	.word	0x20000e1c

08004804 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004808:	4b04      	ldr	r3, [pc, #16]	@ (800481c <vTaskSuspendAll+0x18>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3301      	adds	r3, #1
 800480e:	4a03      	ldr	r2, [pc, #12]	@ (800481c <vTaskSuspendAll+0x18>)
 8004810:	6013      	str	r3, [r2, #0]
}
 8004812:	bf00      	nop
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	20000e40 	.word	0x20000e40

08004820 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004826:	2300      	movs	r3, #0
 8004828:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800482a:	2300      	movs	r3, #0
 800482c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800482e:	4b42      	ldr	r3, [pc, #264]	@ (8004938 <xTaskResumeAll+0x118>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10b      	bne.n	800484e <xTaskResumeAll+0x2e>
	__asm volatile
 8004836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800483a:	f383 8811 	msr	BASEPRI, r3
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	603b      	str	r3, [r7, #0]
}
 8004848:	bf00      	nop
 800484a:	bf00      	nop
 800484c:	e7fd      	b.n	800484a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800484e:	f001 f90b 	bl	8005a68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004852:	4b39      	ldr	r3, [pc, #228]	@ (8004938 <xTaskResumeAll+0x118>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3b01      	subs	r3, #1
 8004858:	4a37      	ldr	r2, [pc, #220]	@ (8004938 <xTaskResumeAll+0x118>)
 800485a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800485c:	4b36      	ldr	r3, [pc, #216]	@ (8004938 <xTaskResumeAll+0x118>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d162      	bne.n	800492a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004864:	4b35      	ldr	r3, [pc, #212]	@ (800493c <xTaskResumeAll+0x11c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d05e      	beq.n	800492a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800486c:	e02f      	b.n	80048ce <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800486e:	4b34      	ldr	r3, [pc, #208]	@ (8004940 <xTaskResumeAll+0x120>)
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	3318      	adds	r3, #24
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff f846 	bl	800390c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3304      	adds	r3, #4
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff f841 	bl	800390c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800488e:	4b2d      	ldr	r3, [pc, #180]	@ (8004944 <xTaskResumeAll+0x124>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d903      	bls.n	800489e <xTaskResumeAll+0x7e>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489a:	4a2a      	ldr	r2, [pc, #168]	@ (8004944 <xTaskResumeAll+0x124>)
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4a27      	ldr	r2, [pc, #156]	@ (8004948 <xTaskResumeAll+0x128>)
 80048ac:	441a      	add	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3304      	adds	r3, #4
 80048b2:	4619      	mov	r1, r3
 80048b4:	4610      	mov	r0, r2
 80048b6:	f7fe ffcc 	bl	8003852 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048be:	4b23      	ldr	r3, [pc, #140]	@ (800494c <xTaskResumeAll+0x12c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d302      	bcc.n	80048ce <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80048c8:	4b21      	ldr	r3, [pc, #132]	@ (8004950 <xTaskResumeAll+0x130>)
 80048ca:	2201      	movs	r2, #1
 80048cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048ce:	4b1c      	ldr	r3, [pc, #112]	@ (8004940 <xTaskResumeAll+0x120>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1cb      	bne.n	800486e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80048dc:	f000 fb6c 	bl	8004fb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80048e0:	4b1c      	ldr	r3, [pc, #112]	@ (8004954 <xTaskResumeAll+0x134>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d010      	beq.n	800490e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80048ec:	f000 f846 	bl	800497c <xTaskIncrementTick>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80048f6:	4b16      	ldr	r3, [pc, #88]	@ (8004950 <xTaskResumeAll+0x130>)
 80048f8:	2201      	movs	r2, #1
 80048fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3b01      	subs	r3, #1
 8004900:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1f1      	bne.n	80048ec <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8004908:	4b12      	ldr	r3, [pc, #72]	@ (8004954 <xTaskResumeAll+0x134>)
 800490a:	2200      	movs	r2, #0
 800490c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800490e:	4b10      	ldr	r3, [pc, #64]	@ (8004950 <xTaskResumeAll+0x130>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d009      	beq.n	800492a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004916:	2301      	movs	r3, #1
 8004918:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800491a:	4b0f      	ldr	r3, [pc, #60]	@ (8004958 <xTaskResumeAll+0x138>)
 800491c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800492a:	f001 f8cf 	bl	8005acc <vPortExitCritical>

	return xAlreadyYielded;
 800492e:	68bb      	ldr	r3, [r7, #8]
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	20000e40 	.word	0x20000e40
 800493c:	20000e18 	.word	0x20000e18
 8004940:	20000dd8 	.word	0x20000dd8
 8004944:	20000e20 	.word	0x20000e20
 8004948:	20000948 	.word	0x20000948
 800494c:	20000944 	.word	0x20000944
 8004950:	20000e2c 	.word	0x20000e2c
 8004954:	20000e28 	.word	0x20000e28
 8004958:	e000ed04 	.word	0xe000ed04

0800495c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004962:	4b05      	ldr	r3, [pc, #20]	@ (8004978 <xTaskGetTickCount+0x1c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004968:	687b      	ldr	r3, [r7, #4]
}
 800496a:	4618      	mov	r0, r3
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	20000e1c 	.word	0x20000e1c

0800497c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004986:	4b52      	ldr	r3, [pc, #328]	@ (8004ad0 <xTaskIncrementTick+0x154>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	f040 808f 	bne.w	8004aae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004990:	4b50      	ldr	r3, [pc, #320]	@ (8004ad4 <xTaskIncrementTick+0x158>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3301      	adds	r3, #1
 8004996:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004998:	4a4e      	ldr	r2, [pc, #312]	@ (8004ad4 <xTaskIncrementTick+0x158>)
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d121      	bne.n	80049e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80049a4:	4b4c      	ldr	r3, [pc, #304]	@ (8004ad8 <xTaskIncrementTick+0x15c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00b      	beq.n	80049c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80049ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b2:	f383 8811 	msr	BASEPRI, r3
 80049b6:	f3bf 8f6f 	isb	sy
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	603b      	str	r3, [r7, #0]
}
 80049c0:	bf00      	nop
 80049c2:	bf00      	nop
 80049c4:	e7fd      	b.n	80049c2 <xTaskIncrementTick+0x46>
 80049c6:	4b44      	ldr	r3, [pc, #272]	@ (8004ad8 <xTaskIncrementTick+0x15c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	4b43      	ldr	r3, [pc, #268]	@ (8004adc <xTaskIncrementTick+0x160>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a41      	ldr	r2, [pc, #260]	@ (8004ad8 <xTaskIncrementTick+0x15c>)
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	4a41      	ldr	r2, [pc, #260]	@ (8004adc <xTaskIncrementTick+0x160>)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	4b41      	ldr	r3, [pc, #260]	@ (8004ae0 <xTaskIncrementTick+0x164>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	3301      	adds	r3, #1
 80049e0:	4a3f      	ldr	r2, [pc, #252]	@ (8004ae0 <xTaskIncrementTick+0x164>)
 80049e2:	6013      	str	r3, [r2, #0]
 80049e4:	f000 fae8 	bl	8004fb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80049e8:	4b3e      	ldr	r3, [pc, #248]	@ (8004ae4 <xTaskIncrementTick+0x168>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d34e      	bcc.n	8004a90 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049f2:	4b39      	ldr	r3, [pc, #228]	@ (8004ad8 <xTaskIncrementTick+0x15c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <xTaskIncrementTick+0x84>
 80049fc:	2301      	movs	r3, #1
 80049fe:	e000      	b.n	8004a02 <xTaskIncrementTick+0x86>
 8004a00:	2300      	movs	r3, #0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d004      	beq.n	8004a10 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a06:	4b37      	ldr	r3, [pc, #220]	@ (8004ae4 <xTaskIncrementTick+0x168>)
 8004a08:	f04f 32ff 	mov.w	r2, #4294967295
 8004a0c:	601a      	str	r2, [r3, #0]
					break;
 8004a0e:	e03f      	b.n	8004a90 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a10:	4b31      	ldr	r3, [pc, #196]	@ (8004ad8 <xTaskIncrementTick+0x15c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d203      	bcs.n	8004a30 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a28:	4a2e      	ldr	r2, [pc, #184]	@ (8004ae4 <xTaskIncrementTick+0x168>)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6013      	str	r3, [r2, #0]
						break;
 8004a2e:	e02f      	b.n	8004a90 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	3304      	adds	r3, #4
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fe ff69 	bl	800390c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d004      	beq.n	8004a4c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	3318      	adds	r3, #24
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fe ff60 	bl	800390c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a50:	4b25      	ldr	r3, [pc, #148]	@ (8004ae8 <xTaskIncrementTick+0x16c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d903      	bls.n	8004a60 <xTaskIncrementTick+0xe4>
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a5c:	4a22      	ldr	r2, [pc, #136]	@ (8004ae8 <xTaskIncrementTick+0x16c>)
 8004a5e:	6013      	str	r3, [r2, #0]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a64:	4613      	mov	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4a1f      	ldr	r2, [pc, #124]	@ (8004aec <xTaskIncrementTick+0x170>)
 8004a6e:	441a      	add	r2, r3
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	3304      	adds	r3, #4
 8004a74:	4619      	mov	r1, r3
 8004a76:	4610      	mov	r0, r2
 8004a78:	f7fe feeb 	bl	8003852 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a80:	4b1b      	ldr	r3, [pc, #108]	@ (8004af0 <xTaskIncrementTick+0x174>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d3b3      	bcc.n	80049f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a8e:	e7b0      	b.n	80049f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a90:	4b17      	ldr	r3, [pc, #92]	@ (8004af0 <xTaskIncrementTick+0x174>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a96:	4915      	ldr	r1, [pc, #84]	@ (8004aec <xTaskIncrementTick+0x170>)
 8004a98:	4613      	mov	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	440b      	add	r3, r1
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d907      	bls.n	8004ab8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	e004      	b.n	8004ab8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004aae:	4b11      	ldr	r3, [pc, #68]	@ (8004af4 <xTaskIncrementTick+0x178>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	4a0f      	ldr	r2, [pc, #60]	@ (8004af4 <xTaskIncrementTick+0x178>)
 8004ab6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8004af8 <xTaskIncrementTick+0x17c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d001      	beq.n	8004ac4 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004ac4:	697b      	ldr	r3, [r7, #20]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	20000e40 	.word	0x20000e40
 8004ad4:	20000e1c 	.word	0x20000e1c
 8004ad8:	20000dd0 	.word	0x20000dd0
 8004adc:	20000dd4 	.word	0x20000dd4
 8004ae0:	20000e30 	.word	0x20000e30
 8004ae4:	20000e38 	.word	0x20000e38
 8004ae8:	20000e20 	.word	0x20000e20
 8004aec:	20000948 	.word	0x20000948
 8004af0:	20000944 	.word	0x20000944
 8004af4:	20000e28 	.word	0x20000e28
 8004af8:	20000e2c 	.word	0x20000e2c

08004afc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b02:	4b2b      	ldr	r3, [pc, #172]	@ (8004bb0 <vTaskSwitchContext+0xb4>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8004bb4 <vTaskSwitchContext+0xb8>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b10:	e047      	b.n	8004ba2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004b12:	4b28      	ldr	r3, [pc, #160]	@ (8004bb4 <vTaskSwitchContext+0xb8>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004b18:	4b27      	ldr	r3, [pc, #156]	@ (8004bb8 <vTaskSwitchContext+0xbc>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	e011      	b.n	8004b44 <vTaskSwitchContext+0x48>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10b      	bne.n	8004b3e <vTaskSwitchContext+0x42>
	__asm volatile
 8004b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	607b      	str	r3, [r7, #4]
}
 8004b38:	bf00      	nop
 8004b3a:	bf00      	nop
 8004b3c:	e7fd      	b.n	8004b3a <vTaskSwitchContext+0x3e>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	3b01      	subs	r3, #1
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	491d      	ldr	r1, [pc, #116]	@ (8004bbc <vTaskSwitchContext+0xc0>)
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	440b      	add	r3, r1
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0e3      	beq.n	8004b20 <vTaskSwitchContext+0x24>
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4a16      	ldr	r2, [pc, #88]	@ (8004bbc <vTaskSwitchContext+0xc0>)
 8004b64:	4413      	add	r3, r2
 8004b66:	60bb      	str	r3, [r7, #8]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	605a      	str	r2, [r3, #4]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	3308      	adds	r3, #8
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d104      	bne.n	8004b88 <vTaskSwitchContext+0x8c>
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	605a      	str	r2, [r3, #4]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8004bc0 <vTaskSwitchContext+0xc4>)
 8004b90:	6013      	str	r3, [r2, #0]
 8004b92:	4a09      	ldr	r2, [pc, #36]	@ (8004bb8 <vTaskSwitchContext+0xbc>)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b98:	4b09      	ldr	r3, [pc, #36]	@ (8004bc0 <vTaskSwitchContext+0xc4>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3354      	adds	r3, #84	@ 0x54
 8004b9e:	4a09      	ldr	r2, [pc, #36]	@ (8004bc4 <vTaskSwitchContext+0xc8>)
 8004ba0:	6013      	str	r3, [r2, #0]
}
 8004ba2:	bf00      	nop
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	20000e40 	.word	0x20000e40
 8004bb4:	20000e2c 	.word	0x20000e2c
 8004bb8:	20000e20 	.word	0x20000e20
 8004bbc:	20000948 	.word	0x20000948
 8004bc0:	20000944 	.word	0x20000944
 8004bc4:	20000010 	.word	0x20000010

08004bc8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10b      	bne.n	8004bf0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bdc:	f383 8811 	msr	BASEPRI, r3
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	60fb      	str	r3, [r7, #12]
}
 8004bea:	bf00      	nop
 8004bec:	bf00      	nop
 8004bee:	e7fd      	b.n	8004bec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bf0:	4b07      	ldr	r3, [pc, #28]	@ (8004c10 <vTaskPlaceOnEventList+0x48>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	3318      	adds	r3, #24
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f7fe fe4e 	bl	800389a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004bfe:	2101      	movs	r1, #1
 8004c00:	6838      	ldr	r0, [r7, #0]
 8004c02:	f000 fa8d 	bl	8005120 <prvAddCurrentTaskToDelayedList>
}
 8004c06:	bf00      	nop
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	20000944 	.word	0x20000944

08004c14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10b      	bne.n	8004c3e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c2a:	f383 8811 	msr	BASEPRI, r3
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	617b      	str	r3, [r7, #20]
}
 8004c38:	bf00      	nop
 8004c3a:	bf00      	nop
 8004c3c:	e7fd      	b.n	8004c3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c68 <vTaskPlaceOnEventListRestricted+0x54>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3318      	adds	r3, #24
 8004c44:	4619      	mov	r1, r3
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f7fe fe03 	bl	8003852 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004c52:	f04f 33ff 	mov.w	r3, #4294967295
 8004c56:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	68b8      	ldr	r0, [r7, #8]
 8004c5c:	f000 fa60 	bl	8005120 <prvAddCurrentTaskToDelayedList>
	}
 8004c60:	bf00      	nop
 8004c62:	3718      	adds	r7, #24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	20000944 	.word	0x20000944

08004c6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10b      	bne.n	8004c9a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	60fb      	str	r3, [r7, #12]
}
 8004c94:	bf00      	nop
 8004c96:	bf00      	nop
 8004c98:	e7fd      	b.n	8004c96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	3318      	adds	r3, #24
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fe fe34 	bl	800390c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8004d1c <xTaskRemoveFromEventList+0xb0>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d11d      	bne.n	8004ce8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7fe fe2b 	bl	800390c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cba:	4b19      	ldr	r3, [pc, #100]	@ (8004d20 <xTaskRemoveFromEventList+0xb4>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d903      	bls.n	8004cca <xTaskRemoveFromEventList+0x5e>
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc6:	4a16      	ldr	r2, [pc, #88]	@ (8004d20 <xTaskRemoveFromEventList+0xb4>)
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cce:	4613      	mov	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4a13      	ldr	r2, [pc, #76]	@ (8004d24 <xTaskRemoveFromEventList+0xb8>)
 8004cd8:	441a      	add	r2, r3
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	3304      	adds	r3, #4
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	f7fe fdb6 	bl	8003852 <vListInsertEnd>
 8004ce6:	e005      	b.n	8004cf4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	3318      	adds	r3, #24
 8004cec:	4619      	mov	r1, r3
 8004cee:	480e      	ldr	r0, [pc, #56]	@ (8004d28 <xTaskRemoveFromEventList+0xbc>)
 8004cf0:	f7fe fdaf 	bl	8003852 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8004d2c <xTaskRemoveFromEventList+0xc0>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d905      	bls.n	8004d0e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004d02:	2301      	movs	r3, #1
 8004d04:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004d06:	4b0a      	ldr	r3, [pc, #40]	@ (8004d30 <xTaskRemoveFromEventList+0xc4>)
 8004d08:	2201      	movs	r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	e001      	b.n	8004d12 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004d12:	697b      	ldr	r3, [r7, #20]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3718      	adds	r7, #24
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	20000e40 	.word	0x20000e40
 8004d20:	20000e20 	.word	0x20000e20
 8004d24:	20000948 	.word	0x20000948
 8004d28:	20000dd8 	.word	0x20000dd8
 8004d2c:	20000944 	.word	0x20000944
 8004d30:	20000e2c 	.word	0x20000e2c

08004d34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d3c:	4b06      	ldr	r3, [pc, #24]	@ (8004d58 <vTaskInternalSetTimeOutState+0x24>)
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d44:	4b05      	ldr	r3, [pc, #20]	@ (8004d5c <vTaskInternalSetTimeOutState+0x28>)
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	605a      	str	r2, [r3, #4]
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	20000e30 	.word	0x20000e30
 8004d5c:	20000e1c 	.word	0x20000e1c

08004d60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b088      	sub	sp, #32
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10b      	bne.n	8004d88 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	613b      	str	r3, [r7, #16]
}
 8004d82:	bf00      	nop
 8004d84:	bf00      	nop
 8004d86:	e7fd      	b.n	8004d84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10b      	bne.n	8004da6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	60fb      	str	r3, [r7, #12]
}
 8004da0:	bf00      	nop
 8004da2:	bf00      	nop
 8004da4:	e7fd      	b.n	8004da2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004da6:	f000 fe5f 	bl	8005a68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004daa:	4b1d      	ldr	r3, [pc, #116]	@ (8004e20 <xTaskCheckForTimeOut+0xc0>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc2:	d102      	bne.n	8004dca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	61fb      	str	r3, [r7, #28]
 8004dc8:	e023      	b.n	8004e12 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	4b15      	ldr	r3, [pc, #84]	@ (8004e24 <xTaskCheckForTimeOut+0xc4>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d007      	beq.n	8004de6 <xTaskCheckForTimeOut+0x86>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d302      	bcc.n	8004de6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004de0:	2301      	movs	r3, #1
 8004de2:	61fb      	str	r3, [r7, #28]
 8004de4:	e015      	b.n	8004e12 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d20b      	bcs.n	8004e08 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	1ad2      	subs	r2, r2, r3
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7ff ff99 	bl	8004d34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004e02:	2300      	movs	r3, #0
 8004e04:	61fb      	str	r3, [r7, #28]
 8004e06:	e004      	b.n	8004e12 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004e12:	f000 fe5b 	bl	8005acc <vPortExitCritical>

	return xReturn;
 8004e16:	69fb      	ldr	r3, [r7, #28]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3720      	adds	r7, #32
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	20000e1c 	.word	0x20000e1c
 8004e24:	20000e30 	.word	0x20000e30

08004e28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004e2c:	4b03      	ldr	r3, [pc, #12]	@ (8004e3c <vTaskMissedYield+0x14>)
 8004e2e:	2201      	movs	r2, #1
 8004e30:	601a      	str	r2, [r3, #0]
}
 8004e32:	bf00      	nop
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	20000e2c 	.word	0x20000e2c

08004e40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e48:	f000 f852 	bl	8004ef0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e4c:	4b06      	ldr	r3, [pc, #24]	@ (8004e68 <prvIdleTask+0x28>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d9f9      	bls.n	8004e48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e54:	4b05      	ldr	r3, [pc, #20]	@ (8004e6c <prvIdleTask+0x2c>)
 8004e56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e5a:	601a      	str	r2, [r3, #0]
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e64:	e7f0      	b.n	8004e48 <prvIdleTask+0x8>
 8004e66:	bf00      	nop
 8004e68:	20000948 	.word	0x20000948
 8004e6c:	e000ed04 	.word	0xe000ed04

08004e70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e76:	2300      	movs	r3, #0
 8004e78:	607b      	str	r3, [r7, #4]
 8004e7a:	e00c      	b.n	8004e96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4a12      	ldr	r2, [pc, #72]	@ (8004ed0 <prvInitialiseTaskLists+0x60>)
 8004e88:	4413      	add	r3, r2
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fe fcb4 	bl	80037f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3301      	adds	r3, #1
 8004e94:	607b      	str	r3, [r7, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b37      	cmp	r3, #55	@ 0x37
 8004e9a:	d9ef      	bls.n	8004e7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e9c:	480d      	ldr	r0, [pc, #52]	@ (8004ed4 <prvInitialiseTaskLists+0x64>)
 8004e9e:	f7fe fcab 	bl	80037f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ea2:	480d      	ldr	r0, [pc, #52]	@ (8004ed8 <prvInitialiseTaskLists+0x68>)
 8004ea4:	f7fe fca8 	bl	80037f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ea8:	480c      	ldr	r0, [pc, #48]	@ (8004edc <prvInitialiseTaskLists+0x6c>)
 8004eaa:	f7fe fca5 	bl	80037f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004eae:	480c      	ldr	r0, [pc, #48]	@ (8004ee0 <prvInitialiseTaskLists+0x70>)
 8004eb0:	f7fe fca2 	bl	80037f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004eb4:	480b      	ldr	r0, [pc, #44]	@ (8004ee4 <prvInitialiseTaskLists+0x74>)
 8004eb6:	f7fe fc9f 	bl	80037f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004eba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee8 <prvInitialiseTaskLists+0x78>)
 8004ebc:	4a05      	ldr	r2, [pc, #20]	@ (8004ed4 <prvInitialiseTaskLists+0x64>)
 8004ebe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8004eec <prvInitialiseTaskLists+0x7c>)
 8004ec2:	4a05      	ldr	r2, [pc, #20]	@ (8004ed8 <prvInitialiseTaskLists+0x68>)
 8004ec4:	601a      	str	r2, [r3, #0]
}
 8004ec6:	bf00      	nop
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	20000948 	.word	0x20000948
 8004ed4:	20000da8 	.word	0x20000da8
 8004ed8:	20000dbc 	.word	0x20000dbc
 8004edc:	20000dd8 	.word	0x20000dd8
 8004ee0:	20000dec 	.word	0x20000dec
 8004ee4:	20000e04 	.word	0x20000e04
 8004ee8:	20000dd0 	.word	0x20000dd0
 8004eec:	20000dd4 	.word	0x20000dd4

08004ef0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ef6:	e019      	b.n	8004f2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ef8:	f000 fdb6 	bl	8005a68 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004efc:	4b10      	ldr	r3, [pc, #64]	@ (8004f40 <prvCheckTasksWaitingTermination+0x50>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	3304      	adds	r3, #4
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7fe fcff 	bl	800390c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f44 <prvCheckTasksWaitingTermination+0x54>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	4a0b      	ldr	r2, [pc, #44]	@ (8004f44 <prvCheckTasksWaitingTermination+0x54>)
 8004f16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f18:	4b0b      	ldr	r3, [pc, #44]	@ (8004f48 <prvCheckTasksWaitingTermination+0x58>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8004f48 <prvCheckTasksWaitingTermination+0x58>)
 8004f20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f22:	f000 fdd3 	bl	8005acc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f810 	bl	8004f4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f2c:	4b06      	ldr	r3, [pc, #24]	@ (8004f48 <prvCheckTasksWaitingTermination+0x58>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1e1      	bne.n	8004ef8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f34:	bf00      	nop
 8004f36:	bf00      	nop
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	20000dec 	.word	0x20000dec
 8004f44:	20000e18 	.word	0x20000e18
 8004f48:	20000e00 	.word	0x20000e00

08004f4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3354      	adds	r3, #84	@ 0x54
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f001 f88f 	bl	800607c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d108      	bne.n	8004f7a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 ff65 	bl	8005e3c <vPortFree>
				vPortFree( pxTCB );
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 ff62 	bl	8005e3c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f78:	e019      	b.n	8004fae <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d103      	bne.n	8004f8c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 ff59 	bl	8005e3c <vPortFree>
	}
 8004f8a:	e010      	b.n	8004fae <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d00b      	beq.n	8004fae <prvDeleteTCB+0x62>
	__asm volatile
 8004f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	60fb      	str	r3, [r7, #12]
}
 8004fa8:	bf00      	nop
 8004faa:	bf00      	nop
 8004fac:	e7fd      	b.n	8004faa <prvDeleteTCB+0x5e>
	}
 8004fae:	bf00      	nop
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
	...

08004fb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8004ffc <prvResetNextTaskUnblockTime+0x44>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <prvResetNextTaskUnblockTime+0x14>
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e000      	b.n	8004fce <prvResetNextTaskUnblockTime+0x16>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d004      	beq.n	8004fdc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8005000 <prvResetNextTaskUnblockTime+0x48>)
 8004fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8004fd8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004fda:	e008      	b.n	8004fee <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004fdc:	4b07      	ldr	r3, [pc, #28]	@ (8004ffc <prvResetNextTaskUnblockTime+0x44>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	4a05      	ldr	r2, [pc, #20]	@ (8005000 <prvResetNextTaskUnblockTime+0x48>)
 8004fec:	6013      	str	r3, [r2, #0]
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	20000dd0 	.word	0x20000dd0
 8005000:	20000e38 	.word	0x20000e38

08005004 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800500a:	4b0b      	ldr	r3, [pc, #44]	@ (8005038 <xTaskGetSchedulerState+0x34>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d102      	bne.n	8005018 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005012:	2301      	movs	r3, #1
 8005014:	607b      	str	r3, [r7, #4]
 8005016:	e008      	b.n	800502a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005018:	4b08      	ldr	r3, [pc, #32]	@ (800503c <xTaskGetSchedulerState+0x38>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d102      	bne.n	8005026 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005020:	2302      	movs	r3, #2
 8005022:	607b      	str	r3, [r7, #4]
 8005024:	e001      	b.n	800502a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005026:	2300      	movs	r3, #0
 8005028:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800502a:	687b      	ldr	r3, [r7, #4]
	}
 800502c:	4618      	mov	r0, r3
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	20000e24 	.word	0x20000e24
 800503c:	20000e40 	.word	0x20000e40

08005040 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800504c:	2300      	movs	r3, #0
 800504e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d058      	beq.n	8005108 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005056:	4b2f      	ldr	r3, [pc, #188]	@ (8005114 <xTaskPriorityDisinherit+0xd4>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	429a      	cmp	r2, r3
 800505e:	d00b      	beq.n	8005078 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	60fb      	str	r3, [r7, #12]
}
 8005072:	bf00      	nop
 8005074:	bf00      	nop
 8005076:	e7fd      	b.n	8005074 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10b      	bne.n	8005098 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	60bb      	str	r3, [r7, #8]
}
 8005092:	bf00      	nop
 8005094:	bf00      	nop
 8005096:	e7fd      	b.n	8005094 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800509c:	1e5a      	subs	r2, r3, #1
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d02c      	beq.n	8005108 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d128      	bne.n	8005108 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	3304      	adds	r3, #4
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7fe fc26 	bl	800390c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050cc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050d8:	4b0f      	ldr	r3, [pc, #60]	@ (8005118 <xTaskPriorityDisinherit+0xd8>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d903      	bls.n	80050e8 <xTaskPriorityDisinherit+0xa8>
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e4:	4a0c      	ldr	r2, [pc, #48]	@ (8005118 <xTaskPriorityDisinherit+0xd8>)
 80050e6:	6013      	str	r3, [r2, #0]
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050ec:	4613      	mov	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4a09      	ldr	r2, [pc, #36]	@ (800511c <xTaskPriorityDisinherit+0xdc>)
 80050f6:	441a      	add	r2, r3
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	3304      	adds	r3, #4
 80050fc:	4619      	mov	r1, r3
 80050fe:	4610      	mov	r0, r2
 8005100:	f7fe fba7 	bl	8003852 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005104:	2301      	movs	r3, #1
 8005106:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005108:	697b      	ldr	r3, [r7, #20]
	}
 800510a:	4618      	mov	r0, r3
 800510c:	3718      	adds	r7, #24
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	20000944 	.word	0x20000944
 8005118:	20000e20 	.word	0x20000e20
 800511c:	20000948 	.word	0x20000948

08005120 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800512a:	4b21      	ldr	r3, [pc, #132]	@ (80051b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005130:	4b20      	ldr	r3, [pc, #128]	@ (80051b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3304      	adds	r3, #4
 8005136:	4618      	mov	r0, r3
 8005138:	f7fe fbe8 	bl	800390c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005142:	d10a      	bne.n	800515a <prvAddCurrentTaskToDelayedList+0x3a>
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d007      	beq.n	800515a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800514a:	4b1a      	ldr	r3, [pc, #104]	@ (80051b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	3304      	adds	r3, #4
 8005150:	4619      	mov	r1, r3
 8005152:	4819      	ldr	r0, [pc, #100]	@ (80051b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005154:	f7fe fb7d 	bl	8003852 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005158:	e026      	b.n	80051a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4413      	add	r3, r2
 8005160:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005162:	4b14      	ldr	r3, [pc, #80]	@ (80051b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	429a      	cmp	r2, r3
 8005170:	d209      	bcs.n	8005186 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005172:	4b12      	ldr	r3, [pc, #72]	@ (80051bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	4b0f      	ldr	r3, [pc, #60]	@ (80051b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3304      	adds	r3, #4
 800517c:	4619      	mov	r1, r3
 800517e:	4610      	mov	r0, r2
 8005180:	f7fe fb8b 	bl	800389a <vListInsert>
}
 8005184:	e010      	b.n	80051a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005186:	4b0e      	ldr	r3, [pc, #56]	@ (80051c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	4b0a      	ldr	r3, [pc, #40]	@ (80051b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	3304      	adds	r3, #4
 8005190:	4619      	mov	r1, r3
 8005192:	4610      	mov	r0, r2
 8005194:	f7fe fb81 	bl	800389a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005198:	4b0a      	ldr	r3, [pc, #40]	@ (80051c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d202      	bcs.n	80051a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80051a2:	4a08      	ldr	r2, [pc, #32]	@ (80051c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	6013      	str	r3, [r2, #0]
}
 80051a8:	bf00      	nop
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	20000e1c 	.word	0x20000e1c
 80051b4:	20000944 	.word	0x20000944
 80051b8:	20000e04 	.word	0x20000e04
 80051bc:	20000dd4 	.word	0x20000dd4
 80051c0:	20000dd0 	.word	0x20000dd0
 80051c4:	20000e38 	.word	0x20000e38

080051c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08a      	sub	sp, #40	@ 0x28
 80051cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80051d2:	f000 fad9 	bl	8005788 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80051d6:	4b1d      	ldr	r3, [pc, #116]	@ (800524c <xTimerCreateTimerTask+0x84>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d021      	beq.n	8005222 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80051de:	2300      	movs	r3, #0
 80051e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80051e6:	1d3a      	adds	r2, r7, #4
 80051e8:	f107 0108 	add.w	r1, r7, #8
 80051ec:	f107 030c 	add.w	r3, r7, #12
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7fe fae7 	bl	80037c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80051f6:	6879      	ldr	r1, [r7, #4]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	9202      	str	r2, [sp, #8]
 80051fe:	9301      	str	r3, [sp, #4]
 8005200:	2302      	movs	r3, #2
 8005202:	9300      	str	r3, [sp, #0]
 8005204:	2300      	movs	r3, #0
 8005206:	460a      	mov	r2, r1
 8005208:	4911      	ldr	r1, [pc, #68]	@ (8005250 <xTimerCreateTimerTask+0x88>)
 800520a:	4812      	ldr	r0, [pc, #72]	@ (8005254 <xTimerCreateTimerTask+0x8c>)
 800520c:	f7ff f8a0 	bl	8004350 <xTaskCreateStatic>
 8005210:	4603      	mov	r3, r0
 8005212:	4a11      	ldr	r2, [pc, #68]	@ (8005258 <xTimerCreateTimerTask+0x90>)
 8005214:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005216:	4b10      	ldr	r3, [pc, #64]	@ (8005258 <xTimerCreateTimerTask+0x90>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d001      	beq.n	8005222 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800521e:	2301      	movs	r3, #1
 8005220:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10b      	bne.n	8005240 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800522c:	f383 8811 	msr	BASEPRI, r3
 8005230:	f3bf 8f6f 	isb	sy
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	613b      	str	r3, [r7, #16]
}
 800523a:	bf00      	nop
 800523c:	bf00      	nop
 800523e:	e7fd      	b.n	800523c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005240:	697b      	ldr	r3, [r7, #20]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3718      	adds	r7, #24
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	20000e74 	.word	0x20000e74
 8005250:	08006288 	.word	0x08006288
 8005254:	0800537d 	.word	0x0800537d
 8005258:	20000e78 	.word	0x20000e78

0800525c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b08a      	sub	sp, #40	@ 0x28
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
 8005268:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800526a:	2300      	movs	r3, #0
 800526c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10b      	bne.n	800528c <xTimerGenericCommand+0x30>
	__asm volatile
 8005274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005278:	f383 8811 	msr	BASEPRI, r3
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	623b      	str	r3, [r7, #32]
}
 8005286:	bf00      	nop
 8005288:	bf00      	nop
 800528a:	e7fd      	b.n	8005288 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800528c:	4b19      	ldr	r3, [pc, #100]	@ (80052f4 <xTimerGenericCommand+0x98>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d02a      	beq.n	80052ea <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	2b05      	cmp	r3, #5
 80052a4:	dc18      	bgt.n	80052d8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80052a6:	f7ff fead 	bl	8005004 <xTaskGetSchedulerState>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d109      	bne.n	80052c4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80052b0:	4b10      	ldr	r3, [pc, #64]	@ (80052f4 <xTimerGenericCommand+0x98>)
 80052b2:	6818      	ldr	r0, [r3, #0]
 80052b4:	f107 0110 	add.w	r1, r7, #16
 80052b8:	2300      	movs	r3, #0
 80052ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052bc:	f7fe fc5a 	bl	8003b74 <xQueueGenericSend>
 80052c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80052c2:	e012      	b.n	80052ea <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80052c4:	4b0b      	ldr	r3, [pc, #44]	@ (80052f4 <xTimerGenericCommand+0x98>)
 80052c6:	6818      	ldr	r0, [r3, #0]
 80052c8:	f107 0110 	add.w	r1, r7, #16
 80052cc:	2300      	movs	r3, #0
 80052ce:	2200      	movs	r2, #0
 80052d0:	f7fe fc50 	bl	8003b74 <xQueueGenericSend>
 80052d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80052d6:	e008      	b.n	80052ea <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80052d8:	4b06      	ldr	r3, [pc, #24]	@ (80052f4 <xTimerGenericCommand+0x98>)
 80052da:	6818      	ldr	r0, [r3, #0]
 80052dc:	f107 0110 	add.w	r1, r7, #16
 80052e0:	2300      	movs	r3, #0
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	f7fe fd48 	bl	8003d78 <xQueueGenericSendFromISR>
 80052e8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80052ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3728      	adds	r7, #40	@ 0x28
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	20000e74 	.word	0x20000e74

080052f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af02      	add	r7, sp, #8
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005302:	4b1d      	ldr	r3, [pc, #116]	@ (8005378 <prvProcessExpiredTimer+0x80>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	3304      	adds	r3, #4
 8005310:	4618      	mov	r0, r3
 8005312:	f7fe fafb 	bl	800390c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d123      	bne.n	8005366 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	699a      	ldr	r2, [r3, #24]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	18d1      	adds	r1, r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	6978      	ldr	r0, [r7, #20]
 800532c:	f000 f8cc 	bl	80054c8 <prvInsertTimerInActiveList>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d017      	beq.n	8005366 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005336:	2300      	movs	r3, #0
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	2300      	movs	r3, #0
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	2100      	movs	r1, #0
 8005340:	6978      	ldr	r0, [r7, #20]
 8005342:	f7ff ff8b 	bl	800525c <xTimerGenericCommand>
 8005346:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10b      	bne.n	8005366 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	60fb      	str	r3, [r7, #12]
}
 8005360:	bf00      	nop
 8005362:	bf00      	nop
 8005364:	e7fd      	b.n	8005362 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536a:	6978      	ldr	r0, [r7, #20]
 800536c:	4798      	blx	r3
}
 800536e:	bf00      	nop
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	20000e6c 	.word	0x20000e6c

0800537c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005384:	f107 0308 	add.w	r3, r7, #8
 8005388:	4618      	mov	r0, r3
 800538a:	f000 f859 	bl	8005440 <prvGetNextExpireTime>
 800538e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	4619      	mov	r1, r3
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 f805 	bl	80053a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800539a:	f000 f8d7 	bl	800554c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800539e:	bf00      	nop
 80053a0:	e7f0      	b.n	8005384 <prvTimerTask+0x8>
	...

080053a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80053ae:	f7ff fa29 	bl	8004804 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053b2:	f107 0308 	add.w	r3, r7, #8
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 f866 	bl	8005488 <prvSampleTimeNow>
 80053bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d130      	bne.n	8005426 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10a      	bne.n	80053e0 <prvProcessTimerOrBlockTask+0x3c>
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d806      	bhi.n	80053e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80053d2:	f7ff fa25 	bl	8004820 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80053d6:	68f9      	ldr	r1, [r7, #12]
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7ff ff8d 	bl	80052f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80053de:	e024      	b.n	800542a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d008      	beq.n	80053f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80053e6:	4b13      	ldr	r3, [pc, #76]	@ (8005434 <prvProcessTimerOrBlockTask+0x90>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	bf0c      	ite	eq
 80053f0:	2301      	moveq	r3, #1
 80053f2:	2300      	movne	r3, #0
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80053f8:	4b0f      	ldr	r3, [pc, #60]	@ (8005438 <prvProcessTimerOrBlockTask+0x94>)
 80053fa:	6818      	ldr	r0, [r3, #0]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	4619      	mov	r1, r3
 8005406:	f7fe ff6f 	bl	80042e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800540a:	f7ff fa09 	bl	8004820 <xTaskResumeAll>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10a      	bne.n	800542a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005414:	4b09      	ldr	r3, [pc, #36]	@ (800543c <prvProcessTimerOrBlockTask+0x98>)
 8005416:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	f3bf 8f6f 	isb	sy
}
 8005424:	e001      	b.n	800542a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005426:	f7ff f9fb 	bl	8004820 <xTaskResumeAll>
}
 800542a:	bf00      	nop
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	20000e70 	.word	0x20000e70
 8005438:	20000e74 	.word	0x20000e74
 800543c:	e000ed04 	.word	0xe000ed04

08005440 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005448:	4b0e      	ldr	r3, [pc, #56]	@ (8005484 <prvGetNextExpireTime+0x44>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	bf0c      	ite	eq
 8005452:	2301      	moveq	r3, #1
 8005454:	2300      	movne	r3, #0
 8005456:	b2db      	uxtb	r3, r3
 8005458:	461a      	mov	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d105      	bne.n	8005472 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005466:	4b07      	ldr	r3, [pc, #28]	@ (8005484 <prvGetNextExpireTime+0x44>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	e001      	b.n	8005476 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005472:	2300      	movs	r3, #0
 8005474:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005476:	68fb      	ldr	r3, [r7, #12]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	20000e6c 	.word	0x20000e6c

08005488 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005490:	f7ff fa64 	bl	800495c <xTaskGetTickCount>
 8005494:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005496:	4b0b      	ldr	r3, [pc, #44]	@ (80054c4 <prvSampleTimeNow+0x3c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	429a      	cmp	r2, r3
 800549e:	d205      	bcs.n	80054ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80054a0:	f000 f910 	bl	80056c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	e002      	b.n	80054b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80054b2:	4a04      	ldr	r2, [pc, #16]	@ (80054c4 <prvSampleTimeNow+0x3c>)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80054b8:	68fb      	ldr	r3, [r7, #12]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	20000e7c 	.word	0x20000e7c

080054c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
 80054d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80054d6:	2300      	movs	r3, #0
 80054d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d812      	bhi.n	8005514 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	1ad2      	subs	r2, r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d302      	bcc.n	8005502 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80054fc:	2301      	movs	r3, #1
 80054fe:	617b      	str	r3, [r7, #20]
 8005500:	e01b      	b.n	800553a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005502:	4b10      	ldr	r3, [pc, #64]	@ (8005544 <prvInsertTimerInActiveList+0x7c>)
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	3304      	adds	r3, #4
 800550a:	4619      	mov	r1, r3
 800550c:	4610      	mov	r0, r2
 800550e:	f7fe f9c4 	bl	800389a <vListInsert>
 8005512:	e012      	b.n	800553a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	429a      	cmp	r2, r3
 800551a:	d206      	bcs.n	800552a <prvInsertTimerInActiveList+0x62>
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	429a      	cmp	r2, r3
 8005522:	d302      	bcc.n	800552a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005524:	2301      	movs	r3, #1
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	e007      	b.n	800553a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800552a:	4b07      	ldr	r3, [pc, #28]	@ (8005548 <prvInsertTimerInActiveList+0x80>)
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	3304      	adds	r3, #4
 8005532:	4619      	mov	r1, r3
 8005534:	4610      	mov	r0, r2
 8005536:	f7fe f9b0 	bl	800389a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800553a:	697b      	ldr	r3, [r7, #20]
}
 800553c:	4618      	mov	r0, r3
 800553e:	3718      	adds	r7, #24
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	20000e70 	.word	0x20000e70
 8005548:	20000e6c 	.word	0x20000e6c

0800554c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08e      	sub	sp, #56	@ 0x38
 8005550:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005552:	e0a5      	b.n	80056a0 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	da19      	bge.n	800558e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800555a:	1d3b      	adds	r3, r7, #4
 800555c:	3304      	adds	r3, #4
 800555e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10b      	bne.n	800557e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	61fb      	str	r3, [r7, #28]
}
 8005578:	bf00      	nop
 800557a:	bf00      	nop
 800557c:	e7fd      	b.n	800557a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800557e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005584:	6850      	ldr	r0, [r2, #4]
 8005586:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005588:	6892      	ldr	r2, [r2, #8]
 800558a:	4611      	mov	r1, r2
 800558c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	f2c0 8085 	blt.w	80056a0 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800559a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d004      	beq.n	80055ac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a4:	3304      	adds	r3, #4
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fe f9b0 	bl	800390c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055ac:	463b      	mov	r3, r7
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7ff ff6a 	bl	8005488 <prvSampleTimeNow>
 80055b4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b09      	cmp	r3, #9
 80055ba:	d86c      	bhi.n	8005696 <prvProcessReceivedCommands+0x14a>
 80055bc:	a201      	add	r2, pc, #4	@ (adr r2, 80055c4 <prvProcessReceivedCommands+0x78>)
 80055be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c2:	bf00      	nop
 80055c4:	080055ed 	.word	0x080055ed
 80055c8:	080055ed 	.word	0x080055ed
 80055cc:	080055ed 	.word	0x080055ed
 80055d0:	08005697 	.word	0x08005697
 80055d4:	0800564b 	.word	0x0800564b
 80055d8:	08005685 	.word	0x08005685
 80055dc:	080055ed 	.word	0x080055ed
 80055e0:	080055ed 	.word	0x080055ed
 80055e4:	08005697 	.word	0x08005697
 80055e8:	0800564b 	.word	0x0800564b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	18d1      	adds	r1, r2, r3
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055fa:	f7ff ff65 	bl	80054c8 <prvInsertTimerInActiveList>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d04a      	beq.n	800569a <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005608:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800560a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800560c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d142      	bne.n	800569a <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	441a      	add	r2, r3
 800561c:	2300      	movs	r3, #0
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	2300      	movs	r3, #0
 8005622:	2100      	movs	r1, #0
 8005624:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005626:	f7ff fe19 	bl	800525c <xTimerGenericCommand>
 800562a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d133      	bne.n	800569a <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8005632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	61bb      	str	r3, [r7, #24]
}
 8005644:	bf00      	nop
 8005646:	bf00      	nop
 8005648:	e7fd      	b.n	8005646 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800564e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10b      	bne.n	8005670 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8005658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565c:	f383 8811 	msr	BASEPRI, r3
 8005660:	f3bf 8f6f 	isb	sy
 8005664:	f3bf 8f4f 	dsb	sy
 8005668:	617b      	str	r3, [r7, #20]
}
 800566a:	bf00      	nop
 800566c:	bf00      	nop
 800566e:	e7fd      	b.n	800566c <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005672:	699a      	ldr	r2, [r3, #24]
 8005674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005676:	18d1      	adds	r1, r2, r3
 8005678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800567c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800567e:	f7ff ff23 	bl	80054c8 <prvInsertTimerInActiveList>
					break;
 8005682:	e00d      	b.n	80056a0 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005686:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800568a:	2b00      	cmp	r3, #0
 800568c:	d107      	bne.n	800569e <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800568e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005690:	f000 fbd4 	bl	8005e3c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005694:	e003      	b.n	800569e <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8005696:	bf00      	nop
 8005698:	e002      	b.n	80056a0 <prvProcessReceivedCommands+0x154>
					break;
 800569a:	bf00      	nop
 800569c:	e000      	b.n	80056a0 <prvProcessReceivedCommands+0x154>
					break;
 800569e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056a0:	4b07      	ldr	r3, [pc, #28]	@ (80056c0 <prvProcessReceivedCommands+0x174>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	1d39      	adds	r1, r7, #4
 80056a6:	2200      	movs	r2, #0
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7fe fc01 	bl	8003eb0 <xQueueReceive>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f47f af4f 	bne.w	8005554 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80056b6:	bf00      	nop
 80056b8:	bf00      	nop
 80056ba:	3730      	adds	r7, #48	@ 0x30
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	20000e74 	.word	0x20000e74

080056c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b088      	sub	sp, #32
 80056c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056ca:	e046      	b.n	800575a <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056cc:	4b2c      	ldr	r3, [pc, #176]	@ (8005780 <prvSwitchTimerLists+0xbc>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056d6:	4b2a      	ldr	r3, [pc, #168]	@ (8005780 <prvSwitchTimerLists+0xbc>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	3304      	adds	r3, #4
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7fe f911 	bl	800390c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d12f      	bne.n	800575a <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	4413      	add	r3, r2
 8005702:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	429a      	cmp	r2, r3
 800570a:	d90e      	bls.n	800572a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005718:	4b19      	ldr	r3, [pc, #100]	@ (8005780 <prvSwitchTimerLists+0xbc>)
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3304      	adds	r3, #4
 8005720:	4619      	mov	r1, r3
 8005722:	4610      	mov	r0, r2
 8005724:	f7fe f8b9 	bl	800389a <vListInsert>
 8005728:	e017      	b.n	800575a <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800572a:	2300      	movs	r3, #0
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	2300      	movs	r3, #0
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	2100      	movs	r1, #0
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f7ff fd91 	bl	800525c <xTimerGenericCommand>
 800573a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10b      	bne.n	800575a <prvSwitchTimerLists+0x96>
	__asm volatile
 8005742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	603b      	str	r3, [r7, #0]
}
 8005754:	bf00      	nop
 8005756:	bf00      	nop
 8005758:	e7fd      	b.n	8005756 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800575a:	4b09      	ldr	r3, [pc, #36]	@ (8005780 <prvSwitchTimerLists+0xbc>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1b3      	bne.n	80056cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005764:	4b06      	ldr	r3, [pc, #24]	@ (8005780 <prvSwitchTimerLists+0xbc>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800576a:	4b06      	ldr	r3, [pc, #24]	@ (8005784 <prvSwitchTimerLists+0xc0>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a04      	ldr	r2, [pc, #16]	@ (8005780 <prvSwitchTimerLists+0xbc>)
 8005770:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005772:	4a04      	ldr	r2, [pc, #16]	@ (8005784 <prvSwitchTimerLists+0xc0>)
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	6013      	str	r3, [r2, #0]
}
 8005778:	bf00      	nop
 800577a:	3718      	adds	r7, #24
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	20000e6c 	.word	0x20000e6c
 8005784:	20000e70 	.word	0x20000e70

08005788 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800578e:	f000 f96b 	bl	8005a68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005792:	4b15      	ldr	r3, [pc, #84]	@ (80057e8 <prvCheckForValidListAndQueue+0x60>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d120      	bne.n	80057dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800579a:	4814      	ldr	r0, [pc, #80]	@ (80057ec <prvCheckForValidListAndQueue+0x64>)
 800579c:	f7fe f82c 	bl	80037f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80057a0:	4813      	ldr	r0, [pc, #76]	@ (80057f0 <prvCheckForValidListAndQueue+0x68>)
 80057a2:	f7fe f829 	bl	80037f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80057a6:	4b13      	ldr	r3, [pc, #76]	@ (80057f4 <prvCheckForValidListAndQueue+0x6c>)
 80057a8:	4a10      	ldr	r2, [pc, #64]	@ (80057ec <prvCheckForValidListAndQueue+0x64>)
 80057aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80057ac:	4b12      	ldr	r3, [pc, #72]	@ (80057f8 <prvCheckForValidListAndQueue+0x70>)
 80057ae:	4a10      	ldr	r2, [pc, #64]	@ (80057f0 <prvCheckForValidListAndQueue+0x68>)
 80057b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80057b2:	2300      	movs	r3, #0
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	4b11      	ldr	r3, [pc, #68]	@ (80057fc <prvCheckForValidListAndQueue+0x74>)
 80057b8:	4a11      	ldr	r2, [pc, #68]	@ (8005800 <prvCheckForValidListAndQueue+0x78>)
 80057ba:	2110      	movs	r1, #16
 80057bc:	200a      	movs	r0, #10
 80057be:	f7fe f939 	bl	8003a34 <xQueueGenericCreateStatic>
 80057c2:	4603      	mov	r3, r0
 80057c4:	4a08      	ldr	r2, [pc, #32]	@ (80057e8 <prvCheckForValidListAndQueue+0x60>)
 80057c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80057c8:	4b07      	ldr	r3, [pc, #28]	@ (80057e8 <prvCheckForValidListAndQueue+0x60>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d005      	beq.n	80057dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80057d0:	4b05      	ldr	r3, [pc, #20]	@ (80057e8 <prvCheckForValidListAndQueue+0x60>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	490b      	ldr	r1, [pc, #44]	@ (8005804 <prvCheckForValidListAndQueue+0x7c>)
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fe fd5c 	bl	8004294 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057dc:	f000 f976 	bl	8005acc <vPortExitCritical>
}
 80057e0:	bf00      	nop
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	20000e74 	.word	0x20000e74
 80057ec:	20000e44 	.word	0x20000e44
 80057f0:	20000e58 	.word	0x20000e58
 80057f4:	20000e6c 	.word	0x20000e6c
 80057f8:	20000e70 	.word	0x20000e70
 80057fc:	20000f20 	.word	0x20000f20
 8005800:	20000e80 	.word	0x20000e80
 8005804:	08006290 	.word	0x08006290

08005808 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	3b04      	subs	r3, #4
 8005818:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005820:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	3b04      	subs	r3, #4
 8005826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f023 0201 	bic.w	r2, r3, #1
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	3b04      	subs	r3, #4
 8005836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005838:	4a0c      	ldr	r2, [pc, #48]	@ (800586c <pxPortInitialiseStack+0x64>)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	3b14      	subs	r3, #20
 8005842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	3b04      	subs	r3, #4
 800584e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f06f 0202 	mvn.w	r2, #2
 8005856:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	3b20      	subs	r3, #32
 800585c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800585e:	68fb      	ldr	r3, [r7, #12]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr
 800586c:	08005871 	.word	0x08005871

08005870 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005876:	2300      	movs	r3, #0
 8005878:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800587a:	4b13      	ldr	r3, [pc, #76]	@ (80058c8 <prvTaskExitError+0x58>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005882:	d00b      	beq.n	800589c <prvTaskExitError+0x2c>
	__asm volatile
 8005884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	60fb      	str	r3, [r7, #12]
}
 8005896:	bf00      	nop
 8005898:	bf00      	nop
 800589a:	e7fd      	b.n	8005898 <prvTaskExitError+0x28>
	__asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	60bb      	str	r3, [r7, #8]
}
 80058ae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80058b0:	bf00      	nop
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0fc      	beq.n	80058b2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80058b8:	bf00      	nop
 80058ba:	bf00      	nop
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	2000000c 	.word	0x2000000c
 80058cc:	00000000 	.word	0x00000000

080058d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80058d0:	4b07      	ldr	r3, [pc, #28]	@ (80058f0 <pxCurrentTCBConst2>)
 80058d2:	6819      	ldr	r1, [r3, #0]
 80058d4:	6808      	ldr	r0, [r1, #0]
 80058d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058da:	f380 8809 	msr	PSP, r0
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f04f 0000 	mov.w	r0, #0
 80058e6:	f380 8811 	msr	BASEPRI, r0
 80058ea:	4770      	bx	lr
 80058ec:	f3af 8000 	nop.w

080058f0 <pxCurrentTCBConst2>:
 80058f0:	20000944 	.word	0x20000944
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80058f4:	bf00      	nop
 80058f6:	bf00      	nop

080058f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80058f8:	4808      	ldr	r0, [pc, #32]	@ (800591c <prvPortStartFirstTask+0x24>)
 80058fa:	6800      	ldr	r0, [r0, #0]
 80058fc:	6800      	ldr	r0, [r0, #0]
 80058fe:	f380 8808 	msr	MSP, r0
 8005902:	f04f 0000 	mov.w	r0, #0
 8005906:	f380 8814 	msr	CONTROL, r0
 800590a:	b662      	cpsie	i
 800590c:	b661      	cpsie	f
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	df00      	svc	0
 8005918:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800591a:	bf00      	nop
 800591c:	e000ed08 	.word	0xe000ed08

08005920 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005926:	4b47      	ldr	r3, [pc, #284]	@ (8005a44 <xPortStartScheduler+0x124>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a47      	ldr	r2, [pc, #284]	@ (8005a48 <xPortStartScheduler+0x128>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d10b      	bne.n	8005948 <xPortStartScheduler+0x28>
	__asm volatile
 8005930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005934:	f383 8811 	msr	BASEPRI, r3
 8005938:	f3bf 8f6f 	isb	sy
 800593c:	f3bf 8f4f 	dsb	sy
 8005940:	613b      	str	r3, [r7, #16]
}
 8005942:	bf00      	nop
 8005944:	bf00      	nop
 8005946:	e7fd      	b.n	8005944 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005948:	4b3e      	ldr	r3, [pc, #248]	@ (8005a44 <xPortStartScheduler+0x124>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a3f      	ldr	r2, [pc, #252]	@ (8005a4c <xPortStartScheduler+0x12c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d10b      	bne.n	800596a <xPortStartScheduler+0x4a>
	__asm volatile
 8005952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	60fb      	str	r3, [r7, #12]
}
 8005964:	bf00      	nop
 8005966:	bf00      	nop
 8005968:	e7fd      	b.n	8005966 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800596a:	4b39      	ldr	r3, [pc, #228]	@ (8005a50 <xPortStartScheduler+0x130>)
 800596c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	b2db      	uxtb	r3, r3
 8005974:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	22ff      	movs	r2, #255	@ 0xff
 800597a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	b2db      	uxtb	r3, r3
 8005982:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005984:	78fb      	ldrb	r3, [r7, #3]
 8005986:	b2db      	uxtb	r3, r3
 8005988:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800598c:	b2da      	uxtb	r2, r3
 800598e:	4b31      	ldr	r3, [pc, #196]	@ (8005a54 <xPortStartScheduler+0x134>)
 8005990:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005992:	4b31      	ldr	r3, [pc, #196]	@ (8005a58 <xPortStartScheduler+0x138>)
 8005994:	2207      	movs	r2, #7
 8005996:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005998:	e009      	b.n	80059ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800599a:	4b2f      	ldr	r3, [pc, #188]	@ (8005a58 <xPortStartScheduler+0x138>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3b01      	subs	r3, #1
 80059a0:	4a2d      	ldr	r2, [pc, #180]	@ (8005a58 <xPortStartScheduler+0x138>)
 80059a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80059a4:	78fb      	ldrb	r3, [r7, #3]
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059ae:	78fb      	ldrb	r3, [r7, #3]
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059b6:	2b80      	cmp	r3, #128	@ 0x80
 80059b8:	d0ef      	beq.n	800599a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80059ba:	4b27      	ldr	r3, [pc, #156]	@ (8005a58 <xPortStartScheduler+0x138>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f1c3 0307 	rsb	r3, r3, #7
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	d00b      	beq.n	80059de <xPortStartScheduler+0xbe>
	__asm volatile
 80059c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ca:	f383 8811 	msr	BASEPRI, r3
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	f3bf 8f4f 	dsb	sy
 80059d6:	60bb      	str	r3, [r7, #8]
}
 80059d8:	bf00      	nop
 80059da:	bf00      	nop
 80059dc:	e7fd      	b.n	80059da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80059de:	4b1e      	ldr	r3, [pc, #120]	@ (8005a58 <xPortStartScheduler+0x138>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	021b      	lsls	r3, r3, #8
 80059e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a58 <xPortStartScheduler+0x138>)
 80059e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005a58 <xPortStartScheduler+0x138>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80059f0:	4a19      	ldr	r2, [pc, #100]	@ (8005a58 <xPortStartScheduler+0x138>)
 80059f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	b2da      	uxtb	r2, r3
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059fc:	4b17      	ldr	r3, [pc, #92]	@ (8005a5c <xPortStartScheduler+0x13c>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a16      	ldr	r2, [pc, #88]	@ (8005a5c <xPortStartScheduler+0x13c>)
 8005a02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005a06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a08:	4b14      	ldr	r3, [pc, #80]	@ (8005a5c <xPortStartScheduler+0x13c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a13      	ldr	r2, [pc, #76]	@ (8005a5c <xPortStartScheduler+0x13c>)
 8005a0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005a12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a14:	f000 f8da 	bl	8005bcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a18:	4b11      	ldr	r3, [pc, #68]	@ (8005a60 <xPortStartScheduler+0x140>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005a1e:	f000 f8f9 	bl	8005c14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a22:	4b10      	ldr	r3, [pc, #64]	@ (8005a64 <xPortStartScheduler+0x144>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a0f      	ldr	r2, [pc, #60]	@ (8005a64 <xPortStartScheduler+0x144>)
 8005a28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005a2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a2e:	f7ff ff63 	bl	80058f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a32:	f7ff f863 	bl	8004afc <vTaskSwitchContext>
	prvTaskExitError();
 8005a36:	f7ff ff1b 	bl	8005870 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3718      	adds	r7, #24
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	e000ed00 	.word	0xe000ed00
 8005a48:	410fc271 	.word	0x410fc271
 8005a4c:	410fc270 	.word	0x410fc270
 8005a50:	e000e400 	.word	0xe000e400
 8005a54:	20000f70 	.word	0x20000f70
 8005a58:	20000f74 	.word	0x20000f74
 8005a5c:	e000ed20 	.word	0xe000ed20
 8005a60:	2000000c 	.word	0x2000000c
 8005a64:	e000ef34 	.word	0xe000ef34

08005a68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	607b      	str	r3, [r7, #4]
}
 8005a80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a82:	4b10      	ldr	r3, [pc, #64]	@ (8005ac4 <vPortEnterCritical+0x5c>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3301      	adds	r3, #1
 8005a88:	4a0e      	ldr	r2, [pc, #56]	@ (8005ac4 <vPortEnterCritical+0x5c>)
 8005a8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac4 <vPortEnterCritical+0x5c>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d110      	bne.n	8005ab6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a94:	4b0c      	ldr	r3, [pc, #48]	@ (8005ac8 <vPortEnterCritical+0x60>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00b      	beq.n	8005ab6 <vPortEnterCritical+0x4e>
	__asm volatile
 8005a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	603b      	str	r3, [r7, #0]
}
 8005ab0:	bf00      	nop
 8005ab2:	bf00      	nop
 8005ab4:	e7fd      	b.n	8005ab2 <vPortEnterCritical+0x4a>
	}
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	2000000c 	.word	0x2000000c
 8005ac8:	e000ed04 	.word	0xe000ed04

08005acc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005ad2:	4b12      	ldr	r3, [pc, #72]	@ (8005b1c <vPortExitCritical+0x50>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10b      	bne.n	8005af2 <vPortExitCritical+0x26>
	__asm volatile
 8005ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ade:	f383 8811 	msr	BASEPRI, r3
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	607b      	str	r3, [r7, #4]
}
 8005aec:	bf00      	nop
 8005aee:	bf00      	nop
 8005af0:	e7fd      	b.n	8005aee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005af2:	4b0a      	ldr	r3, [pc, #40]	@ (8005b1c <vPortExitCritical+0x50>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	3b01      	subs	r3, #1
 8005af8:	4a08      	ldr	r2, [pc, #32]	@ (8005b1c <vPortExitCritical+0x50>)
 8005afa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005afc:	4b07      	ldr	r3, [pc, #28]	@ (8005b1c <vPortExitCritical+0x50>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d105      	bne.n	8005b10 <vPortExitCritical+0x44>
 8005b04:	2300      	movs	r3, #0
 8005b06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	f383 8811 	msr	BASEPRI, r3
}
 8005b0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr
 8005b1c:	2000000c 	.word	0x2000000c

08005b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b20:	f3ef 8009 	mrs	r0, PSP
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	4b15      	ldr	r3, [pc, #84]	@ (8005b80 <pxCurrentTCBConst>)
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	f01e 0f10 	tst.w	lr, #16
 8005b30:	bf08      	it	eq
 8005b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b3a:	6010      	str	r0, [r2, #0]
 8005b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005b44:	f380 8811 	msr	BASEPRI, r0
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f7fe ffd4 	bl	8004afc <vTaskSwitchContext>
 8005b54:	f04f 0000 	mov.w	r0, #0
 8005b58:	f380 8811 	msr	BASEPRI, r0
 8005b5c:	bc09      	pop	{r0, r3}
 8005b5e:	6819      	ldr	r1, [r3, #0]
 8005b60:	6808      	ldr	r0, [r1, #0]
 8005b62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b66:	f01e 0f10 	tst.w	lr, #16
 8005b6a:	bf08      	it	eq
 8005b6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b70:	f380 8809 	msr	PSP, r0
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	f3af 8000 	nop.w

08005b80 <pxCurrentTCBConst>:
 8005b80:	20000944 	.word	0x20000944
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b84:	bf00      	nop
 8005b86:	bf00      	nop

08005b88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	607b      	str	r3, [r7, #4]
}
 8005ba0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ba2:	f7fe feeb 	bl	800497c <xTaskIncrementTick>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005bac:	4b06      	ldr	r3, [pc, #24]	@ (8005bc8 <SysTick_Handler+0x40>)
 8005bae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bb2:	601a      	str	r2, [r3, #0]
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	f383 8811 	msr	BASEPRI, r3
}
 8005bbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005bc0:	bf00      	nop
 8005bc2:	3708      	adds	r7, #8
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	e000ed04 	.word	0xe000ed04

08005bcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005bcc:	b480      	push	{r7}
 8005bce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8005c00 <vPortSetupTimerInterrupt+0x34>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005c04 <vPortSetupTimerInterrupt+0x38>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8005c08 <vPortSetupTimerInterrupt+0x3c>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a0a      	ldr	r2, [pc, #40]	@ (8005c0c <vPortSetupTimerInterrupt+0x40>)
 8005be2:	fba2 2303 	umull	r2, r3, r2, r3
 8005be6:	099b      	lsrs	r3, r3, #6
 8005be8:	4a09      	ldr	r2, [pc, #36]	@ (8005c10 <vPortSetupTimerInterrupt+0x44>)
 8005bea:	3b01      	subs	r3, #1
 8005bec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bee:	4b04      	ldr	r3, [pc, #16]	@ (8005c00 <vPortSetupTimerInterrupt+0x34>)
 8005bf0:	2207      	movs	r2, #7
 8005bf2:	601a      	str	r2, [r3, #0]
}
 8005bf4:	bf00      	nop
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	e000e010 	.word	0xe000e010
 8005c04:	e000e018 	.word	0xe000e018
 8005c08:	20000000 	.word	0x20000000
 8005c0c:	10624dd3 	.word	0x10624dd3
 8005c10:	e000e014 	.word	0xe000e014

08005c14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005c14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005c24 <vPortEnableVFP+0x10>
 8005c18:	6801      	ldr	r1, [r0, #0]
 8005c1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005c1e:	6001      	str	r1, [r0, #0]
 8005c20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005c22:	bf00      	nop
 8005c24:	e000ed88 	.word	0xe000ed88

08005c28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005c2e:	f3ef 8305 	mrs	r3, IPSR
 8005c32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2b0f      	cmp	r3, #15
 8005c38:	d915      	bls.n	8005c66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c3a:	4a18      	ldr	r2, [pc, #96]	@ (8005c9c <vPortValidateInterruptPriority+0x74>)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4413      	add	r3, r2
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c44:	4b16      	ldr	r3, [pc, #88]	@ (8005ca0 <vPortValidateInterruptPriority+0x78>)
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	7afa      	ldrb	r2, [r7, #11]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d20b      	bcs.n	8005c66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	607b      	str	r3, [r7, #4]
}
 8005c60:	bf00      	nop
 8005c62:	bf00      	nop
 8005c64:	e7fd      	b.n	8005c62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c66:	4b0f      	ldr	r3, [pc, #60]	@ (8005ca4 <vPortValidateInterruptPriority+0x7c>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ca8 <vPortValidateInterruptPriority+0x80>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d90b      	bls.n	8005c8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c7a:	f383 8811 	msr	BASEPRI, r3
 8005c7e:	f3bf 8f6f 	isb	sy
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	603b      	str	r3, [r7, #0]
}
 8005c88:	bf00      	nop
 8005c8a:	bf00      	nop
 8005c8c:	e7fd      	b.n	8005c8a <vPortValidateInterruptPriority+0x62>
	}
 8005c8e:	bf00      	nop
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	e000e3f0 	.word	0xe000e3f0
 8005ca0:	20000f70 	.word	0x20000f70
 8005ca4:	e000ed0c 	.word	0xe000ed0c
 8005ca8:	20000f74 	.word	0x20000f74

08005cac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b08a      	sub	sp, #40	@ 0x28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005cb8:	f7fe fda4 	bl	8004804 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005cbc:	4b5a      	ldr	r3, [pc, #360]	@ (8005e28 <pvPortMalloc+0x17c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005cc4:	f000 f916 	bl	8005ef4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005cc8:	4b58      	ldr	r3, [pc, #352]	@ (8005e2c <pvPortMalloc+0x180>)
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4013      	ands	r3, r2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f040 8090 	bne.w	8005df6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d01e      	beq.n	8005d1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005cdc:	2208      	movs	r2, #8
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d015      	beq.n	8005d1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f023 0307 	bic.w	r3, r3, #7
 8005cf4:	3308      	adds	r3, #8
 8005cf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f003 0307 	and.w	r3, r3, #7
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00b      	beq.n	8005d1a <pvPortMalloc+0x6e>
	__asm volatile
 8005d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d06:	f383 8811 	msr	BASEPRI, r3
 8005d0a:	f3bf 8f6f 	isb	sy
 8005d0e:	f3bf 8f4f 	dsb	sy
 8005d12:	617b      	str	r3, [r7, #20]
}
 8005d14:	bf00      	nop
 8005d16:	bf00      	nop
 8005d18:	e7fd      	b.n	8005d16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d06a      	beq.n	8005df6 <pvPortMalloc+0x14a>
 8005d20:	4b43      	ldr	r3, [pc, #268]	@ (8005e30 <pvPortMalloc+0x184>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d865      	bhi.n	8005df6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d2a:	4b42      	ldr	r3, [pc, #264]	@ (8005e34 <pvPortMalloc+0x188>)
 8005d2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d2e:	4b41      	ldr	r3, [pc, #260]	@ (8005e34 <pvPortMalloc+0x188>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d34:	e004      	b.n	8005d40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d903      	bls.n	8005d52 <pvPortMalloc+0xa6>
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1f1      	bne.n	8005d36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d52:	4b35      	ldr	r3, [pc, #212]	@ (8005e28 <pvPortMalloc+0x17c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d04c      	beq.n	8005df6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2208      	movs	r2, #8
 8005d62:	4413      	add	r3, r2
 8005d64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
 8005d6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	1ad2      	subs	r2, r2, r3
 8005d76:	2308      	movs	r3, #8
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d920      	bls.n	8005dc0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4413      	add	r3, r2
 8005d84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	f003 0307 	and.w	r3, r3, #7
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00b      	beq.n	8005da8 <pvPortMalloc+0xfc>
	__asm volatile
 8005d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d94:	f383 8811 	msr	BASEPRI, r3
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	613b      	str	r3, [r7, #16]
}
 8005da2:	bf00      	nop
 8005da4:	bf00      	nop
 8005da6:	e7fd      	b.n	8005da4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	1ad2      	subs	r2, r2, r3
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005dba:	69b8      	ldr	r0, [r7, #24]
 8005dbc:	f000 f8fc 	bl	8005fb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8005e30 <pvPortMalloc+0x184>)
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	4a19      	ldr	r2, [pc, #100]	@ (8005e30 <pvPortMalloc+0x184>)
 8005dcc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005dce:	4b18      	ldr	r3, [pc, #96]	@ (8005e30 <pvPortMalloc+0x184>)
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	4b19      	ldr	r3, [pc, #100]	@ (8005e38 <pvPortMalloc+0x18c>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d203      	bcs.n	8005de2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005dda:	4b15      	ldr	r3, [pc, #84]	@ (8005e30 <pvPortMalloc+0x184>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a16      	ldr	r2, [pc, #88]	@ (8005e38 <pvPortMalloc+0x18c>)
 8005de0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	4b11      	ldr	r3, [pc, #68]	@ (8005e2c <pvPortMalloc+0x180>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	431a      	orrs	r2, r3
 8005dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005df6:	f7fe fd13 	bl	8004820 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	f003 0307 	and.w	r3, r3, #7
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00b      	beq.n	8005e1c <pvPortMalloc+0x170>
	__asm volatile
 8005e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e08:	f383 8811 	msr	BASEPRI, r3
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	60fb      	str	r3, [r7, #12]
}
 8005e16:	bf00      	nop
 8005e18:	bf00      	nop
 8005e1a:	e7fd      	b.n	8005e18 <pvPortMalloc+0x16c>
	return pvReturn;
 8005e1c:	69fb      	ldr	r3, [r7, #28]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3728      	adds	r7, #40	@ 0x28
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	20001b80 	.word	0x20001b80
 8005e2c:	20001b8c 	.word	0x20001b8c
 8005e30:	20001b84 	.word	0x20001b84
 8005e34:	20001b78 	.word	0x20001b78
 8005e38:	20001b88 	.word	0x20001b88

08005e3c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d04a      	beq.n	8005ee4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e4e:	2308      	movs	r3, #8
 8005e50:	425b      	negs	r3, r3
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	4413      	add	r3, r2
 8005e56:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	4b22      	ldr	r3, [pc, #136]	@ (8005eec <vPortFree+0xb0>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4013      	ands	r3, r2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10b      	bne.n	8005e82 <vPortFree+0x46>
	__asm volatile
 8005e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e6e:	f383 8811 	msr	BASEPRI, r3
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	f3bf 8f4f 	dsb	sy
 8005e7a:	60fb      	str	r3, [r7, #12]
}
 8005e7c:	bf00      	nop
 8005e7e:	bf00      	nop
 8005e80:	e7fd      	b.n	8005e7e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00b      	beq.n	8005ea2 <vPortFree+0x66>
	__asm volatile
 8005e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	60bb      	str	r3, [r7, #8]
}
 8005e9c:	bf00      	nop
 8005e9e:	bf00      	nop
 8005ea0:	e7fd      	b.n	8005e9e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	4b11      	ldr	r3, [pc, #68]	@ (8005eec <vPortFree+0xb0>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4013      	ands	r3, r2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d019      	beq.n	8005ee4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d115      	bne.n	8005ee4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8005eec <vPortFree+0xb0>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	43db      	mvns	r3, r3
 8005ec2:	401a      	ands	r2, r3
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ec8:	f7fe fc9c 	bl	8004804 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	4b07      	ldr	r3, [pc, #28]	@ (8005ef0 <vPortFree+0xb4>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	4a06      	ldr	r2, [pc, #24]	@ (8005ef0 <vPortFree+0xb4>)
 8005ed8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005eda:	6938      	ldr	r0, [r7, #16]
 8005edc:	f000 f86c 	bl	8005fb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005ee0:	f7fe fc9e 	bl	8004820 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005ee4:	bf00      	nop
 8005ee6:	3718      	adds	r7, #24
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	20001b8c 	.word	0x20001b8c
 8005ef0:	20001b84 	.word	0x20001b84

08005ef4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005efa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005efe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f00:	4b27      	ldr	r3, [pc, #156]	@ (8005fa0 <prvHeapInit+0xac>)
 8005f02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f003 0307 	and.w	r3, r3, #7
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00c      	beq.n	8005f28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	3307      	adds	r3, #7
 8005f12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f023 0307 	bic.w	r3, r3, #7
 8005f1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	4a1f      	ldr	r2, [pc, #124]	@ (8005fa0 <prvHeapInit+0xac>)
 8005f24:	4413      	add	r3, r2
 8005f26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8005fa4 <prvHeapInit+0xb0>)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f32:	4b1c      	ldr	r3, [pc, #112]	@ (8005fa4 <prvHeapInit+0xb0>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f40:	2208      	movs	r2, #8
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	1a9b      	subs	r3, r3, r2
 8005f46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f023 0307 	bic.w	r3, r3, #7
 8005f4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4a15      	ldr	r2, [pc, #84]	@ (8005fa8 <prvHeapInit+0xb4>)
 8005f54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f56:	4b14      	ldr	r3, [pc, #80]	@ (8005fa8 <prvHeapInit+0xb4>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f5e:	4b12      	ldr	r3, [pc, #72]	@ (8005fa8 <prvHeapInit+0xb4>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2200      	movs	r2, #0
 8005f64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	1ad2      	subs	r2, r2, r3
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f74:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa8 <prvHeapInit+0xb4>)
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	4a0a      	ldr	r2, [pc, #40]	@ (8005fac <prvHeapInit+0xb8>)
 8005f82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	4a09      	ldr	r2, [pc, #36]	@ (8005fb0 <prvHeapInit+0xbc>)
 8005f8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f8c:	4b09      	ldr	r3, [pc, #36]	@ (8005fb4 <prvHeapInit+0xc0>)
 8005f8e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005f92:	601a      	str	r2, [r3, #0]
}
 8005f94:	bf00      	nop
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	20000f78 	.word	0x20000f78
 8005fa4:	20001b78 	.word	0x20001b78
 8005fa8:	20001b80 	.word	0x20001b80
 8005fac:	20001b88 	.word	0x20001b88
 8005fb0:	20001b84 	.word	0x20001b84
 8005fb4:	20001b8c 	.word	0x20001b8c

08005fb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005fc0:	4b28      	ldr	r3, [pc, #160]	@ (8006064 <prvInsertBlockIntoFreeList+0xac>)
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	e002      	b.n	8005fcc <prvInsertBlockIntoFreeList+0x14>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d8f7      	bhi.n	8005fc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d108      	bne.n	8005ffa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	441a      	add	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	441a      	add	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	429a      	cmp	r2, r3
 800600c:	d118      	bne.n	8006040 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	4b15      	ldr	r3, [pc, #84]	@ (8006068 <prvInsertBlockIntoFreeList+0xb0>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	429a      	cmp	r2, r3
 8006018:	d00d      	beq.n	8006036 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	441a      	add	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	e008      	b.n	8006048 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006036:	4b0c      	ldr	r3, [pc, #48]	@ (8006068 <prvInsertBlockIntoFreeList+0xb0>)
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	e003      	b.n	8006048 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	429a      	cmp	r2, r3
 800604e:	d002      	beq.n	8006056 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006056:	bf00      	nop
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	20001b78 	.word	0x20001b78
 8006068:	20001b80 	.word	0x20001b80

0800606c <memset>:
 800606c:	4402      	add	r2, r0
 800606e:	4603      	mov	r3, r0
 8006070:	4293      	cmp	r3, r2
 8006072:	d100      	bne.n	8006076 <memset+0xa>
 8006074:	4770      	bx	lr
 8006076:	f803 1b01 	strb.w	r1, [r3], #1
 800607a:	e7f9      	b.n	8006070 <memset+0x4>

0800607c <_reclaim_reent>:
 800607c:	4b29      	ldr	r3, [pc, #164]	@ (8006124 <_reclaim_reent+0xa8>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4283      	cmp	r3, r0
 8006082:	b570      	push	{r4, r5, r6, lr}
 8006084:	4604      	mov	r4, r0
 8006086:	d04b      	beq.n	8006120 <_reclaim_reent+0xa4>
 8006088:	69c3      	ldr	r3, [r0, #28]
 800608a:	b1ab      	cbz	r3, 80060b8 <_reclaim_reent+0x3c>
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	b16b      	cbz	r3, 80060ac <_reclaim_reent+0x30>
 8006090:	2500      	movs	r5, #0
 8006092:	69e3      	ldr	r3, [r4, #28]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	5959      	ldr	r1, [r3, r5]
 8006098:	2900      	cmp	r1, #0
 800609a:	d13b      	bne.n	8006114 <_reclaim_reent+0x98>
 800609c:	3504      	adds	r5, #4
 800609e:	2d80      	cmp	r5, #128	@ 0x80
 80060a0:	d1f7      	bne.n	8006092 <_reclaim_reent+0x16>
 80060a2:	69e3      	ldr	r3, [r4, #28]
 80060a4:	4620      	mov	r0, r4
 80060a6:	68d9      	ldr	r1, [r3, #12]
 80060a8:	f000 f872 	bl	8006190 <_free_r>
 80060ac:	69e3      	ldr	r3, [r4, #28]
 80060ae:	6819      	ldr	r1, [r3, #0]
 80060b0:	b111      	cbz	r1, 80060b8 <_reclaim_reent+0x3c>
 80060b2:	4620      	mov	r0, r4
 80060b4:	f000 f86c 	bl	8006190 <_free_r>
 80060b8:	6961      	ldr	r1, [r4, #20]
 80060ba:	b111      	cbz	r1, 80060c2 <_reclaim_reent+0x46>
 80060bc:	4620      	mov	r0, r4
 80060be:	f000 f867 	bl	8006190 <_free_r>
 80060c2:	69e1      	ldr	r1, [r4, #28]
 80060c4:	b111      	cbz	r1, 80060cc <_reclaim_reent+0x50>
 80060c6:	4620      	mov	r0, r4
 80060c8:	f000 f862 	bl	8006190 <_free_r>
 80060cc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80060ce:	b111      	cbz	r1, 80060d6 <_reclaim_reent+0x5a>
 80060d0:	4620      	mov	r0, r4
 80060d2:	f000 f85d 	bl	8006190 <_free_r>
 80060d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060d8:	b111      	cbz	r1, 80060e0 <_reclaim_reent+0x64>
 80060da:	4620      	mov	r0, r4
 80060dc:	f000 f858 	bl	8006190 <_free_r>
 80060e0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80060e2:	b111      	cbz	r1, 80060ea <_reclaim_reent+0x6e>
 80060e4:	4620      	mov	r0, r4
 80060e6:	f000 f853 	bl	8006190 <_free_r>
 80060ea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80060ec:	b111      	cbz	r1, 80060f4 <_reclaim_reent+0x78>
 80060ee:	4620      	mov	r0, r4
 80060f0:	f000 f84e 	bl	8006190 <_free_r>
 80060f4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80060f6:	b111      	cbz	r1, 80060fe <_reclaim_reent+0x82>
 80060f8:	4620      	mov	r0, r4
 80060fa:	f000 f849 	bl	8006190 <_free_r>
 80060fe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006100:	b111      	cbz	r1, 8006108 <_reclaim_reent+0x8c>
 8006102:	4620      	mov	r0, r4
 8006104:	f000 f844 	bl	8006190 <_free_r>
 8006108:	6a23      	ldr	r3, [r4, #32]
 800610a:	b14b      	cbz	r3, 8006120 <_reclaim_reent+0xa4>
 800610c:	4620      	mov	r0, r4
 800610e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006112:	4718      	bx	r3
 8006114:	680e      	ldr	r6, [r1, #0]
 8006116:	4620      	mov	r0, r4
 8006118:	f000 f83a 	bl	8006190 <_free_r>
 800611c:	4631      	mov	r1, r6
 800611e:	e7bb      	b.n	8006098 <_reclaim_reent+0x1c>
 8006120:	bd70      	pop	{r4, r5, r6, pc}
 8006122:	bf00      	nop
 8006124:	20000010 	.word	0x20000010

08006128 <__libc_init_array>:
 8006128:	b570      	push	{r4, r5, r6, lr}
 800612a:	4d0d      	ldr	r5, [pc, #52]	@ (8006160 <__libc_init_array+0x38>)
 800612c:	4c0d      	ldr	r4, [pc, #52]	@ (8006164 <__libc_init_array+0x3c>)
 800612e:	1b64      	subs	r4, r4, r5
 8006130:	10a4      	asrs	r4, r4, #2
 8006132:	2600      	movs	r6, #0
 8006134:	42a6      	cmp	r6, r4
 8006136:	d109      	bne.n	800614c <__libc_init_array+0x24>
 8006138:	4d0b      	ldr	r5, [pc, #44]	@ (8006168 <__libc_init_array+0x40>)
 800613a:	4c0c      	ldr	r4, [pc, #48]	@ (800616c <__libc_init_array+0x44>)
 800613c:	f000 f87e 	bl	800623c <_init>
 8006140:	1b64      	subs	r4, r4, r5
 8006142:	10a4      	asrs	r4, r4, #2
 8006144:	2600      	movs	r6, #0
 8006146:	42a6      	cmp	r6, r4
 8006148:	d105      	bne.n	8006156 <__libc_init_array+0x2e>
 800614a:	bd70      	pop	{r4, r5, r6, pc}
 800614c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006150:	4798      	blx	r3
 8006152:	3601      	adds	r6, #1
 8006154:	e7ee      	b.n	8006134 <__libc_init_array+0xc>
 8006156:	f855 3b04 	ldr.w	r3, [r5], #4
 800615a:	4798      	blx	r3
 800615c:	3601      	adds	r6, #1
 800615e:	e7f2      	b.n	8006146 <__libc_init_array+0x1e>
 8006160:	08006320 	.word	0x08006320
 8006164:	08006320 	.word	0x08006320
 8006168:	08006320 	.word	0x08006320
 800616c:	08006324 	.word	0x08006324

08006170 <__retarget_lock_acquire_recursive>:
 8006170:	4770      	bx	lr

08006172 <__retarget_lock_release_recursive>:
 8006172:	4770      	bx	lr

08006174 <memcpy>:
 8006174:	440a      	add	r2, r1
 8006176:	4291      	cmp	r1, r2
 8006178:	f100 33ff 	add.w	r3, r0, #4294967295
 800617c:	d100      	bne.n	8006180 <memcpy+0xc>
 800617e:	4770      	bx	lr
 8006180:	b510      	push	{r4, lr}
 8006182:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006186:	f803 4f01 	strb.w	r4, [r3, #1]!
 800618a:	4291      	cmp	r1, r2
 800618c:	d1f9      	bne.n	8006182 <memcpy+0xe>
 800618e:	bd10      	pop	{r4, pc}

08006190 <_free_r>:
 8006190:	b538      	push	{r3, r4, r5, lr}
 8006192:	4605      	mov	r5, r0
 8006194:	2900      	cmp	r1, #0
 8006196:	d041      	beq.n	800621c <_free_r+0x8c>
 8006198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800619c:	1f0c      	subs	r4, r1, #4
 800619e:	2b00      	cmp	r3, #0
 80061a0:	bfb8      	it	lt
 80061a2:	18e4      	addlt	r4, r4, r3
 80061a4:	f000 f83e 	bl	8006224 <__malloc_lock>
 80061a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006220 <_free_r+0x90>)
 80061aa:	6813      	ldr	r3, [r2, #0]
 80061ac:	b933      	cbnz	r3, 80061bc <_free_r+0x2c>
 80061ae:	6063      	str	r3, [r4, #4]
 80061b0:	6014      	str	r4, [r2, #0]
 80061b2:	4628      	mov	r0, r5
 80061b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061b8:	f000 b83a 	b.w	8006230 <__malloc_unlock>
 80061bc:	42a3      	cmp	r3, r4
 80061be:	d908      	bls.n	80061d2 <_free_r+0x42>
 80061c0:	6820      	ldr	r0, [r4, #0]
 80061c2:	1821      	adds	r1, r4, r0
 80061c4:	428b      	cmp	r3, r1
 80061c6:	bf01      	itttt	eq
 80061c8:	6819      	ldreq	r1, [r3, #0]
 80061ca:	685b      	ldreq	r3, [r3, #4]
 80061cc:	1809      	addeq	r1, r1, r0
 80061ce:	6021      	streq	r1, [r4, #0]
 80061d0:	e7ed      	b.n	80061ae <_free_r+0x1e>
 80061d2:	461a      	mov	r2, r3
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	b10b      	cbz	r3, 80061dc <_free_r+0x4c>
 80061d8:	42a3      	cmp	r3, r4
 80061da:	d9fa      	bls.n	80061d2 <_free_r+0x42>
 80061dc:	6811      	ldr	r1, [r2, #0]
 80061de:	1850      	adds	r0, r2, r1
 80061e0:	42a0      	cmp	r0, r4
 80061e2:	d10b      	bne.n	80061fc <_free_r+0x6c>
 80061e4:	6820      	ldr	r0, [r4, #0]
 80061e6:	4401      	add	r1, r0
 80061e8:	1850      	adds	r0, r2, r1
 80061ea:	4283      	cmp	r3, r0
 80061ec:	6011      	str	r1, [r2, #0]
 80061ee:	d1e0      	bne.n	80061b2 <_free_r+0x22>
 80061f0:	6818      	ldr	r0, [r3, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	6053      	str	r3, [r2, #4]
 80061f6:	4408      	add	r0, r1
 80061f8:	6010      	str	r0, [r2, #0]
 80061fa:	e7da      	b.n	80061b2 <_free_r+0x22>
 80061fc:	d902      	bls.n	8006204 <_free_r+0x74>
 80061fe:	230c      	movs	r3, #12
 8006200:	602b      	str	r3, [r5, #0]
 8006202:	e7d6      	b.n	80061b2 <_free_r+0x22>
 8006204:	6820      	ldr	r0, [r4, #0]
 8006206:	1821      	adds	r1, r4, r0
 8006208:	428b      	cmp	r3, r1
 800620a:	bf04      	itt	eq
 800620c:	6819      	ldreq	r1, [r3, #0]
 800620e:	685b      	ldreq	r3, [r3, #4]
 8006210:	6063      	str	r3, [r4, #4]
 8006212:	bf04      	itt	eq
 8006214:	1809      	addeq	r1, r1, r0
 8006216:	6021      	streq	r1, [r4, #0]
 8006218:	6054      	str	r4, [r2, #4]
 800621a:	e7ca      	b.n	80061b2 <_free_r+0x22>
 800621c:	bd38      	pop	{r3, r4, r5, pc}
 800621e:	bf00      	nop
 8006220:	20001ccc 	.word	0x20001ccc

08006224 <__malloc_lock>:
 8006224:	4801      	ldr	r0, [pc, #4]	@ (800622c <__malloc_lock+0x8>)
 8006226:	f7ff bfa3 	b.w	8006170 <__retarget_lock_acquire_recursive>
 800622a:	bf00      	nop
 800622c:	20001cc8 	.word	0x20001cc8

08006230 <__malloc_unlock>:
 8006230:	4801      	ldr	r0, [pc, #4]	@ (8006238 <__malloc_unlock+0x8>)
 8006232:	f7ff bf9e 	b.w	8006172 <__retarget_lock_release_recursive>
 8006236:	bf00      	nop
 8006238:	20001cc8 	.word	0x20001cc8

0800623c <_init>:
 800623c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623e:	bf00      	nop
 8006240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006242:	bc08      	pop	{r3}
 8006244:	469e      	mov	lr, r3
 8006246:	4770      	bx	lr

08006248 <_fini>:
 8006248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624a:	bf00      	nop
 800624c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800624e:	bc08      	pop	{r3}
 8006250:	469e      	mov	lr, r3
 8006252:	4770      	bx	lr
